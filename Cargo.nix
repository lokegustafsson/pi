
# This file was @generated by crate2nix 0.12.0 with the command:
#   "generate"
# See https://github.com/kolloch/crate2nix for more info.

{ nixpkgs ? <nixpkgs>
, pkgs ? import nixpkgs { config = {}; }
, lib ? pkgs.lib
, stdenv ? pkgs.stdenv
, buildRustCrateForPkgs ? pkgs: pkgs.buildRustCrate
  # This is used as the `crateOverrides` argument for `buildRustCrate`.
, defaultCrateOverrides ? pkgs.defaultCrateOverrides
  # The features to enable for the root_crate or the workspace_members.
, rootFeatures ? [ "default" ]
  # If true, throw errors instead of issueing deprecation warnings.
, strictDeprecation ? false
  # Used for conditional compilation based on CPU feature detection.
, targetFeatures ? []
  # Whether to perform release builds: longer compile times, faster binaries.
, release ? true
  # Additional crate2nix configuration if it exists.
, crateConfig
  ? if builtins.pathExists ./crate-config.nix
    then pkgs.callPackage ./crate-config.nix {}
    else {}
}:

rec {
  #
  # "public" attributes that we attempt to keep stable with new versions of crate2nix.
  #


  # Refer your crate build derivation by name here.
  # You can override the features with
  # workspaceMembers."${crateName}".build.override { features = [ "default" "feature1" ... ]; }.
  workspaceMembers = {
    "ingest" = rec {
      packageId = "ingest";
      build = internal.buildRustCrateWithFeatures {
        packageId = "ingest";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "pi" = rec {
      packageId = "pi";
      build = internal.buildRustCrateWithFeatures {
        packageId = "pi";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "procinfo" = rec {
      packageId = "procinfo";
      build = internal.buildRustCrateWithFeatures {
        packageId = "procinfo";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "sysinfo" = rec {
      packageId = "sysinfo";
      build = internal.buildRustCrateWithFeatures {
        packageId = "sysinfo";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "util" = rec {
      packageId = "util";
      build = internal.buildRustCrateWithFeatures {
        packageId = "util";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
  };

  # A derivation that joins the outputs of all workspace members together.
  allWorkspaceMembers = pkgs.symlinkJoin {
      name = "all-workspace-members";
      paths =
        let members = builtins.attrValues workspaceMembers;
        in builtins.map (m: m.build) members;
  };

  #
  # "internal" ("private") attributes that may change in every new version of crate2nix.
  #

  internal = rec {
    # Build and dependency information for crates.
    # Many of the fields are passed one-to-one to buildRustCrate.
    #
    # Noteworthy:
    # * `dependencies`/`buildDependencies`: similar to the corresponding fields for buildRustCrate.
    #   but with additional information which is used during dependency/feature resolution.
    # * `resolvedDependencies`: the selected default features reported by cargo - only included for debugging.
    # * `devDependencies` as of now not used by `buildRustCrate` but used to
    #   inject test dependencies into the build

    crates = {
      "ab_glyph" = rec {
        crateName = "ab_glyph";
        version = "0.2.23";
        edition = "2021";
        sha256 = "099jn5in9ir842wxzvav8zkjvabj55jiwjkwss2w5s6psmyrs5w0";
        authors = [
          "Alex Butler <alexheretic@gmail.com>"
        ];
        dependencies = [
          {
            name = "ab_glyph_rasterizer";
            packageId = "ab_glyph_rasterizer";
            usesDefaultFeatures = false;
          }
          {
            name = "owned_ttf_parser";
            packageId = "owned_ttf_parser";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "variable-fonts" ];
          "libm" = [ "dep:libm" "ab_glyph_rasterizer/libm" ];
          "std" = [ "owned_ttf_parser/default" "ab_glyph_rasterizer/default" ];
          "variable-fonts" = [ "owned_ttf_parser/variable-fonts" ];
        };
        resolvedDefaultFeatures = [ "default" "std" "variable-fonts" ];
      };
      "ab_glyph_rasterizer" = rec {
        crateName = "ab_glyph_rasterizer";
        version = "0.1.8";
        edition = "2018";
        sha256 = "0ikhgzig59q8b1a1iw83sxfnvylg5gx6w2y8ynbnf231xs9if6y7";
        authors = [
          "Alex Butler <alexheretic@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "libm" = [ "dep:libm" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "adler" = rec {
        crateName = "adler";
        version = "1.0.2";
        edition = "2015";
        sha256 = "1zim79cvzd5yrkzl3nyfx0avijwgk9fqv3yrscdy1cc79ih02qpj";
        authors = [
          "Jonas Schievink <jonasschievink@gmail.com>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "ahash" = rec {
        crateName = "ahash";
        version = "0.8.7";
        edition = "2018";
        sha256 = "008xw6gigwnf0q01ic4ar2y4dqfnzn3kyys6vd4cvfa3imjakhvp";
        authors = [
          "Tom Kaitchuck <Tom.Kaitchuck@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "getrandom";
            packageId = "getrandom";
            optional = true;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
            target = { target, features }: (!(("arm" == target."arch" or null) && ("none" == target."os" or null)));
            features = [ "alloc" ];
          }
          {
            name = "zerocopy";
            packageId = "zerocopy";
            usesDefaultFeatures = false;
            features = [ "simd" ];
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "atomic-polyfill" = [ "dep:atomic-polyfill" "once_cell/atomic-polyfill" ];
          "compile-time-rng" = [ "const-random" ];
          "const-random" = [ "dep:const-random" ];
          "default" = [ "std" "runtime-rng" ];
          "getrandom" = [ "dep:getrandom" ];
          "runtime-rng" = [ "getrandom" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "getrandom" "no-rng" "runtime-rng" "std" ];
      };
      "android-activity" = rec {
        crateName = "android-activity";
        version = "0.5.1";
        edition = "2021";
        sha256 = "1fgl1jbzwbxrw4naw8bzjmphqj68q3hiylc05pakyz4p5a8h3f1r";
        dependencies = [
          {
            name = "android-properties";
            packageId = "android-properties";
          }
          {
            name = "bitflags";
            packageId = "bitflags 2.4.1";
          }
          {
            name = "cesu8";
            packageId = "cesu8";
          }
          {
            name = "jni";
            packageId = "jni";
          }
          {
            name = "jni-sys";
            packageId = "jni-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "ndk";
            packageId = "ndk";
            usesDefaultFeatures = false;
          }
          {
            name = "ndk-context";
            packageId = "ndk-context";
          }
          {
            name = "ndk-sys";
            packageId = "ndk-sys";
          }
          {
            name = "num_enum";
            packageId = "num_enum";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
            features = [ "parallel" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "android-properties" = rec {
        crateName = "android-properties";
        version = "0.2.2";
        edition = "2018";
        sha256 = "016slvg269c0y120p9qd8vdfqa2jbw4j0g18gfw6p3ain44v4zpw";
        authors = [
          "Mikhail Lappo <mikhail.lappo@esrlabs.com>"
        ];
        features = {
        };
      };
      "anstream" = rec {
        crateName = "anstream";
        version = "0.6.5";
        edition = "2021";
        sha256 = "1dm1mdbs1x6y3m3pz0qlamgiskb50i4q859676kx0pz8r8pajr6n";
        dependencies = [
          {
            name = "anstyle";
            packageId = "anstyle";
          }
          {
            name = "anstyle-parse";
            packageId = "anstyle-parse";
          }
          {
            name = "anstyle-query";
            packageId = "anstyle-query";
            optional = true;
          }
          {
            name = "anstyle-wincon";
            packageId = "anstyle-wincon";
            optional = true;
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "colorchoice";
            packageId = "colorchoice";
            optional = true;
          }
          {
            name = "utf8parse";
            packageId = "utf8parse";
          }
        ];
        features = {
          "auto" = [ "dep:anstyle-query" "dep:colorchoice" ];
          "default" = [ "auto" "wincon" ];
          "wincon" = [ "dep:anstyle-wincon" ];
        };
        resolvedDefaultFeatures = [ "auto" "default" "wincon" ];
      };
      "anstyle" = rec {
        crateName = "anstyle";
        version = "1.0.4";
        edition = "2021";
        sha256 = "11yxw02b6parn29s757z96rgiqbn8qy0fk9a3p3bhczm85dhfybh";
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "anstyle-parse" = rec {
        crateName = "anstyle-parse";
        version = "0.2.3";
        edition = "2021";
        sha256 = "134jhzrz89labrdwxxnjxqjdg06qvaflj1wkfnmyapwyldfwcnn7";
        dependencies = [
          {
            name = "utf8parse";
            packageId = "utf8parse";
            optional = true;
          }
        ];
        features = {
          "core" = [ "dep:arrayvec" ];
          "default" = [ "utf8" ];
          "utf8" = [ "dep:utf8parse" ];
        };
        resolvedDefaultFeatures = [ "default" "utf8" ];
      };
      "anstyle-query" = rec {
        crateName = "anstyle-query";
        version = "1.0.2";
        edition = "2021";
        sha256 = "0j3na4b1nma39g4x7cwvj009awxckjf3z2vkwhldgka44hqj72g2";
        dependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_System_Console" "Win32_Foundation" ];
          }
        ];

      };
      "anstyle-wincon" = rec {
        crateName = "anstyle-wincon";
        version = "3.0.2";
        edition = "2021";
        sha256 = "19v0fv400bmp4niqpzxnhg83vz12mmqv7l2l8vi80qcdxj0lpm8w";
        dependencies = [
          {
            name = "anstyle";
            packageId = "anstyle";
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_System_Console" "Win32_Foundation" ];
          }
        ];

      };
      "arboard" = rec {
        crateName = "arboard";
        version = "3.3.0";
        edition = "2018";
        sha256 = "021w647fp6d1hy1cilysbh86wyn29aavh7accrva4nj30yqjkyxa";
        authors = [
          "Artur Kovacs <kovacs.artur.barnabas@gmail.com>"
          "Avi Weinstock <aweinstock314@gmail.com>"
          "Arboard contributors"
        ];
        dependencies = [
          {
            name = "clipboard-win";
            packageId = "clipboard-win";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "log";
            packageId = "log";
            target = { target, features }: ((target."unix" or false) && (!(("macos" == target."os" or null) || ("android" == target."os" or null) || ("emscripten" == target."os" or null))));
          }
          {
            name = "log";
            packageId = "log";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "objc";
            packageId = "objc";
            target = { target, features }: ("macos" == target."os" or null);
          }
          {
            name = "objc-foundation";
            packageId = "objc-foundation";
            target = { target, features }: ("macos" == target."os" or null);
          }
          {
            name = "objc_id";
            packageId = "objc_id";
            target = { target, features }: ("macos" == target."os" or null);
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
            target = { target, features }: ((target."unix" or false) && (!(("macos" == target."os" or null) || ("android" == target."os" or null) || ("emscripten" == target."os" or null))));
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "basetsd" "winuser" "winbase" ];
          }
          {
            name = "x11rb";
            packageId = "x11rb 0.12.0";
            target = { target, features }: ((target."unix" or false) && (!(("macos" == target."os" or null) || ("android" == target."os" or null) || ("emscripten" == target."os" or null))));
          }
        ];
        features = {
          "core-graphics" = [ "dep:core-graphics" ];
          "default" = [ "image-data" ];
          "image" = [ "dep:image" ];
          "image-data" = [ "core-graphics" "image" "winapi/minwindef" "winapi/wingdi" "winapi/winnt" ];
          "wayland-data-control" = [ "wl-clipboard-rs" ];
          "wl-clipboard-rs" = [ "dep:wl-clipboard-rs" ];
        };
      };
      "as-raw-xcb-connection" = rec {
        crateName = "as-raw-xcb-connection";
        version = "1.0.1";
        edition = "2021";
        sha256 = "0sqgpz2ymv5yx76r5j2npjq2x5qvvqnw0vrs35cyv30p3pfp2m8p";
        features = {
          "default" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" ];
      };
      "atomic-waker" = rec {
        crateName = "atomic-waker";
        version = "1.1.2";
        edition = "2018";
        sha256 = "1h5av1lw56m0jf0fd3bchxq8a30xv0b4wv8s4zkp4s0i7mfvs18m";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "Contributors to futures-rs"
        ];
        features = {
          "portable-atomic" = [ "dep:portable-atomic" ];
        };
      };
      "autocfg" = rec {
        crateName = "autocfg";
        version = "1.1.0";
        edition = "2015";
        sha256 = "1ylp3cb47ylzabimazvbz9ms6ap784zhb6syaz6c1jqpmcmq0s6l";
        authors = [
          "Josh Stone <cuviper@gmail.com>"
        ];

      };
      "bitflags 1.3.2" = rec {
        crateName = "bitflags";
        version = "1.3.2";
        edition = "2018";
        sha256 = "12ki6w8gn1ldq7yz9y680llwk5gmrhrzszaa17g1sbrw2r2qvwxy";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "bitflags 2.4.1" = rec {
        crateName = "bitflags";
        version = "2.4.1";
        edition = "2021";
        sha256 = "01ryy3kd671b0ll4bhdvhsz67vwz1lz53fz504injrd7wpv64xrj";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "bytemuck" = [ "dep:bytemuck" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "block" = rec {
        crateName = "block";
        version = "0.1.6";
        edition = "2015";
        sha256 = "16k9jgll25pzsq14f244q22cdv0zb4bqacldg3kx6h89d7piz30d";
        authors = [
          "Steven Sheldon"
        ];

      };
      "block-sys" = rec {
        crateName = "block-sys";
        version = "0.2.1";
        edition = "2021";
        links = "block_0_2";
        sha256 = "1rzp0218mwigdmfd5rhmj5h7c1vp0bq0nxaklhsvi8vydrls11df";
        authors = [
          "Mads Marquart <mads@marquart.dk>"
        ];
        dependencies = [
          {
            name = "objc-sys";
            packageId = "objc-sys";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "objc-sys?/alloc" ];
          "default" = [ "std" "apple" ];
          "gnustep-1-7" = [ "objc-sys" "objc-sys/gnustep-1-7" ];
          "gnustep-1-8" = [ "objc-sys/gnustep-1-8" "gnustep-1-7" ];
          "gnustep-1-9" = [ "objc-sys/gnustep-1-9" "gnustep-1-8" ];
          "gnustep-2-0" = [ "objc-sys/gnustep-2-0" "gnustep-1-9" ];
          "gnustep-2-1" = [ "objc-sys/gnustep-2-1" "gnustep-2-0" ];
          "objc-sys" = [ "dep:objc-sys" ];
          "std" = [ "alloc" "objc-sys?/std" ];
          "unstable-docsrs" = [ "objc-sys" "objc-sys/unstable-docsrs" ];
          "unstable-winobjc" = [ "objc-sys/unstable-winobjc" "gnustep-1-8" ];
        };
        resolvedDefaultFeatures = [ "alloc" "apple" "std" ];
      };
      "block2" = rec {
        crateName = "block2";
        version = "0.3.0";
        edition = "2021";
        sha256 = "0s2ywcis2xf9444vmdgzr7ankrrkpchn8zimaw950cszm1imdd8m";
        authors = [
          "Steven Sheldon"
          "Mads Marquart <mads@marquart.dk>"
        ];
        dependencies = [
          {
            name = "block-sys";
            packageId = "block-sys";
            usesDefaultFeatures = false;
          }
          {
            name = "objc2";
            packageId = "objc2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "objc2/alloc" "block-sys/alloc" ];
          "apple" = [ "block-sys/apple" "objc2/apple" ];
          "compiler-rt" = [ "block-sys/compiler-rt" "objc2/unstable-compiler-rt" ];
          "default" = [ "std" "apple" ];
          "gnustep-1-7" = [ "block-sys/gnustep-1-7" "objc2/gnustep-1-7" ];
          "gnustep-1-8" = [ "gnustep-1-7" "block-sys/gnustep-1-8" "objc2/gnustep-1-8" ];
          "gnustep-1-9" = [ "gnustep-1-8" "block-sys/gnustep-1-9" "objc2/gnustep-1-9" ];
          "gnustep-2-0" = [ "gnustep-1-9" "block-sys/gnustep-2-0" "objc2/gnustep-2-0" ];
          "gnustep-2-1" = [ "gnustep-2-0" "block-sys/gnustep-2-1" "objc2/gnustep-2-1" ];
          "std" = [ "alloc" "objc2/std" "block-sys/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "apple" "std" ];
      };
      "bumpalo" = rec {
        crateName = "bumpalo";
        version = "3.14.0";
        edition = "2021";
        sha256 = "1v4arnv9kwk54v5d0qqpv4vyw2sgr660nk0w3apzixi1cm3yfc3z";
        authors = [
          "Nick Fitzgerald <fitzgen@gmail.com>"
        ];
        features = {
          "allocator-api2" = [ "dep:allocator-api2" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "bytemuck" = rec {
        crateName = "bytemuck";
        version = "1.14.0";
        edition = "2018";
        sha256 = "1ik1ma5n3bg700skkzhx50zjk7kj7mbsphi773if17l04pn2hk9p";
        authors = [
          "Lokathor <zefria@gmail.com>"
        ];
        dependencies = [
          {
            name = "bytemuck_derive";
            packageId = "bytemuck_derive";
            optional = true;
          }
        ];
        features = {
          "bytemuck_derive" = [ "dep:bytemuck_derive" ];
          "derive" = [ "bytemuck_derive" ];
          "extern_crate_std" = [ "extern_crate_alloc" ];
        };
        resolvedDefaultFeatures = [ "bytemuck_derive" "derive" "extern_crate_alloc" ];
      };
      "bytemuck_derive" = rec {
        crateName = "bytemuck_derive";
        version = "1.5.0";
        edition = "2018";
        sha256 = "1cgj75df2v32l4fmvnp25xxkkz4lp6hz76f7hfhd55wgbzmvfnln";
        procMacro = true;
        authors = [
          "Lokathor <zefria@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
        ];

      };
      "byteorder" = rec {
        crateName = "byteorder";
        version = "1.5.0";
        edition = "2021";
        sha256 = "0jzncxyf404mwqdbspihyzpkndfgda450l0893pz5xj685cg5l0z";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "bytes" = rec {
        crateName = "bytes";
        version = "1.5.0";
        edition = "2018";
        sha256 = "08w2i8ac912l8vlvkv3q51cd4gr09pwlg3sjsjffcizlrb0i5gd2";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "calloop" = rec {
        crateName = "calloop";
        version = "0.12.3";
        edition = "2018";
        sha256 = "1gxd20zpys0q4v9fg3nrkyhrnjgpkgriidgfm5aqraar9njbal3v";
        authors = [
          "Elinor Berger <elinor@safaradeg.net>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.4.1";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "polling";
            packageId = "polling";
          }
          {
            name = "rustix";
            packageId = "rustix";
            usesDefaultFeatures = false;
            features = [ "event" "fs" "pipe" "std" ];
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        devDependencies = [
          {
            name = "rustix";
            packageId = "rustix";
            usesDefaultFeatures = false;
            features = [ "net" ];
          }
        ];
        features = {
          "async-task" = [ "dep:async-task" ];
          "block_on" = [ "pin-utils" ];
          "executor" = [ "async-task" ];
          "futures-io" = [ "dep:futures-io" ];
          "nix" = [ "dep:nix" ];
          "pin-utils" = [ "dep:pin-utils" ];
          "signals" = [ "nix" ];
        };
      };
      "calloop-wayland-source" = rec {
        crateName = "calloop-wayland-source";
        version = "0.2.0";
        edition = "2021";
        sha256 = "00lgxlqnkd150ylfn3wi4464ibif1qwbp38shj1aszvc8ywsj3hg";
        authors = [
          "Kirill Chibisov <contact@kchibisov.com>"
        ];
        dependencies = [
          {
            name = "calloop";
            packageId = "calloop";
          }
          {
            name = "rustix";
            packageId = "rustix";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "wayland-backend";
            packageId = "wayland-backend";
          }
          {
            name = "wayland-client";
            packageId = "wayland-client";
          }
        ];
        features = {
          "log" = [ "dep:log" ];
        };
      };
      "cc" = rec {
        crateName = "cc";
        version = "1.0.83";
        edition = "2018";
        crateBin = [];
        sha256 = "1l643zidlb5iy1dskc5ggqs4wqa29a02f44piczqc8zcnsq4y5zi";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "jobserver";
            packageId = "jobserver";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
        ];
        features = {
          "jobserver" = [ "dep:jobserver" ];
          "parallel" = [ "jobserver" ];
        };
        resolvedDefaultFeatures = [ "jobserver" "parallel" ];
      };
      "cesu8" = rec {
        crateName = "cesu8";
        version = "1.1.0";
        edition = "2015";
        sha256 = "0g6q58wa7khxrxcxgnqyi9s1z2cjywwwd3hzr5c55wskhx6s0hvd";
        authors = [
          "Eric Kidd <git@randomhacks.net>"
        ];
        features = {
        };
      };
      "cfg-if" = rec {
        crateName = "cfg-if";
        version = "1.0.0";
        edition = "2018";
        sha256 = "1za0vb97n4brpzpv8lsbnzmq5r8f2b0cpqqr0sy8h5bn751xxwds";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "cfg_aliases" = rec {
        crateName = "cfg_aliases";
        version = "0.1.1";
        edition = "2018";
        sha256 = "17p821nc6jm830vzl2lmwz60g3a30hcm33nk6l257i1rjdqw85px";
        authors = [
          "Zicklag <zicklag@katharostech.com>"
        ];

      };
      "cgl" = rec {
        crateName = "cgl";
        version = "0.3.2";
        edition = "2015";
        sha256 = "1zs7skrsyrsm759vfy2cygkx52fx91b567a12bpaz1sf4d8hbv8c";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];

      };
      "clap" = rec {
        crateName = "clap";
        version = "4.4.15";
        edition = "2021";
        crateBin = [];
        sha256 = "1jcgwgmp7ib827bb7m4x02axwsc6s20bjzjzb4phhmd5g5mdcbn1";
        dependencies = [
          {
            name = "clap_builder";
            packageId = "clap_builder";
            usesDefaultFeatures = false;
          }
          {
            name = "clap_derive";
            packageId = "clap_derive";
            optional = true;
          }
        ];
        features = {
          "cargo" = [ "clap_builder/cargo" ];
          "color" = [ "clap_builder/color" ];
          "debug" = [ "clap_builder/debug" "clap_derive?/debug" ];
          "default" = [ "std" "color" "help" "usage" "error-context" "suggestions" ];
          "deprecated" = [ "clap_builder/deprecated" "clap_derive?/deprecated" ];
          "derive" = [ "dep:clap_derive" ];
          "env" = [ "clap_builder/env" ];
          "error-context" = [ "clap_builder/error-context" ];
          "help" = [ "clap_builder/help" ];
          "std" = [ "clap_builder/std" ];
          "string" = [ "clap_builder/string" ];
          "suggestions" = [ "clap_builder/suggestions" ];
          "unicode" = [ "clap_builder/unicode" ];
          "unstable-doc" = [ "clap_builder/unstable-doc" "derive" ];
          "unstable-styles" = [ "clap_builder/unstable-styles" ];
          "unstable-v5" = [ "clap_builder/unstable-v5" "clap_derive?/unstable-v5" "deprecated" ];
          "usage" = [ "clap_builder/usage" ];
          "wrap_help" = [ "clap_builder/wrap_help" ];
        };
        resolvedDefaultFeatures = [ "color" "default" "derive" "error-context" "help" "std" "suggestions" "usage" ];
      };
      "clap_builder" = rec {
        crateName = "clap_builder";
        version = "4.4.15";
        edition = "2021";
        sha256 = "0hsgr3wj4pfxfw4k7w6hik93b2vaa01flsx90f25l7j3ngm4aihg";
        dependencies = [
          {
            name = "anstream";
            packageId = "anstream";
            optional = true;
          }
          {
            name = "anstyle";
            packageId = "anstyle";
          }
          {
            name = "clap_lex";
            packageId = "clap_lex";
          }
          {
            name = "strsim";
            packageId = "strsim";
            optional = true;
          }
        ];
        features = {
          "color" = [ "dep:anstream" ];
          "debug" = [ "dep:backtrace" ];
          "default" = [ "std" "color" "help" "usage" "error-context" "suggestions" ];
          "std" = [ "anstyle/std" ];
          "suggestions" = [ "dep:strsim" "error-context" ];
          "unicode" = [ "dep:unicode-width" "dep:unicase" ];
          "unstable-doc" = [ "cargo" "wrap_help" "env" "unicode" "string" ];
          "unstable-styles" = [ "color" ];
          "unstable-v5" = [ "deprecated" ];
          "wrap_help" = [ "help" "dep:terminal_size" ];
        };
        resolvedDefaultFeatures = [ "color" "error-context" "help" "std" "suggestions" "usage" ];
      };
      "clap_derive" = rec {
        crateName = "clap_derive";
        version = "4.4.7";
        edition = "2021";
        sha256 = "0hk4hcxl56qwqsf4hmf7c0gr19r9fbxk0ah2bgkr36pmmaph966g";
        procMacro = true;
        dependencies = [
          {
            name = "heck";
            packageId = "heck";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "full" ];
          }
        ];
        features = {
          "raw-deprecated" = [ "deprecated" ];
          "unstable-v5" = [ "deprecated" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "clap_lex" = rec {
        crateName = "clap_lex";
        version = "0.6.0";
        edition = "2021";
        sha256 = "1l8bragdvim7mva9flvd159dskn2bdkpl0jqrr41wnjfn8pcfbvh";

      };
      "clipboard-win" = rec {
        crateName = "clipboard-win";
        version = "4.5.0";
        edition = "2018";
        sha256 = "0qh3rypkf1lazniq4nr04hxsck0d55rigb5sjvpvgnap4dyc54bi";
        authors = [
          "Douman <douman@gmx.se>"
        ];
        dependencies = [
          {
            name = "error-code";
            packageId = "error-code";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "str-buf";
            packageId = "str-buf";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "winapi";
            packageId = "winapi";
            usesDefaultFeatures = false;
            target = { target, features }: (target."windows" or false);
            features = [ "basetsd" "shellapi" "winbase" "winuser" "winerror" "stringapiset" "errhandlingapi" "synchapi" ];
          }
        ];
        features = {
          "std" = [ "error-code/std" ];
        };
      };
      "cocoa" = rec {
        crateName = "cocoa";
        version = "0.25.0";
        edition = "2015";
        sha256 = "0g1pl5hq28arqmvsswf2ib7smj445miwa58qa7wrfvksz54h857n";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "block";
            packageId = "block";
          }
          {
            name = "cocoa-foundation";
            packageId = "cocoa-foundation";
          }
          {
            name = "core-foundation";
            packageId = "core-foundation";
          }
          {
            name = "core-graphics";
            packageId = "core-graphics";
          }
          {
            name = "foreign-types";
            packageId = "foreign-types";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "objc";
            packageId = "objc";
          }
        ];

      };
      "cocoa-foundation" = rec {
        crateName = "cocoa-foundation";
        version = "0.1.2";
        edition = "2015";
        sha256 = "1xwk1khdyqw3dwsl15vr8p86shdcn544fr60ass8biz4nb5k8qlc";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "block";
            packageId = "block";
          }
          {
            name = "core-foundation";
            packageId = "core-foundation";
          }
          {
            name = "core-graphics-types";
            packageId = "core-graphics-types";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "objc";
            packageId = "objc";
          }
        ];

      };
      "color_quant" = rec {
        crateName = "color_quant";
        version = "1.1.0";
        edition = "2015";
        sha256 = "12q1n427h2bbmmm1mnglr57jaz2dj9apk0plcxw7nwqiai7qjyrx";
        authors = [
          "nwin <nwin@users.noreply.github.com>"
        ];

      };
      "colorchoice" = rec {
        crateName = "colorchoice";
        version = "1.0.0";
        edition = "2021";
        sha256 = "1ix7w85kwvyybwi2jdkl3yva2r2bvdcc3ka2grjfzfgrapqimgxc";

      };
      "combine" = rec {
        crateName = "combine";
        version = "4.6.6";
        edition = "2018";
        sha256 = "1m7s43cpi36vihmlda217xxgsdni3pbwgwfsa9zimdghhjfnxv9m";
        authors = [
          "Markus Westerlind <marwes91@gmail.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
            optional = true;
          }
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
        ];
        features = {
          "bytes" = [ "dep:bytes" ];
          "bytes_05" = [ "dep:bytes_05" ];
          "default" = [ "std" ];
          "futures-03" = [ "pin-project" "std" "futures-core-03" "futures-io-03" "pin-project-lite" ];
          "futures-core-03" = [ "dep:futures-core-03" ];
          "futures-io-03" = [ "dep:futures-io-03" ];
          "pin-project" = [ "pin-project-lite" ];
          "pin-project-lite" = [ "dep:pin-project-lite" ];
          "regex" = [ "dep:regex" ];
          "std" = [ "memchr/std" "bytes" "alloc" ];
          "tokio" = [ "tokio-dep" "tokio-util/io" "futures-core-03" "pin-project-lite" ];
          "tokio-02" = [ "pin-project" "std" "tokio-02-dep" "futures-core-03" "pin-project-lite" "bytes_05" ];
          "tokio-02-dep" = [ "dep:tokio-02-dep" ];
          "tokio-03" = [ "pin-project" "std" "tokio-03-dep" "futures-core-03" "pin-project-lite" ];
          "tokio-03-dep" = [ "dep:tokio-03-dep" ];
          "tokio-dep" = [ "dep:tokio-dep" ];
          "tokio-util" = [ "dep:tokio-util" ];
        };
        resolvedDefaultFeatures = [ "alloc" "bytes" "default" "std" ];
      };
      "concurrent-queue" = rec {
        crateName = "concurrent-queue";
        version = "2.4.0";
        edition = "2018";
        sha256 = "0qvk23ynj311adb4z7v89wk3bs65blps4n24q8rgl23vjk6lhq6i";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "Taiki Endo <te316e89@gmail.com>"
          "John Nunley <jtnunley01@gmail.com>"
        ];
        dependencies = [
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "loom" = [ "dep:loom" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "core-foundation" = rec {
        crateName = "core-foundation";
        version = "0.9.4";
        edition = "2018";
        sha256 = "13zvbbj07yk3b61b8fhwfzhy35535a583irf23vlcg59j7h9bqci";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
            usesDefaultFeatures = false;
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "chrono" = [ "dep:chrono" ];
          "default" = [ "link" ];
          "link" = [ "core-foundation-sys/link" ];
          "mac_os_10_7_support" = [ "core-foundation-sys/mac_os_10_7_support" ];
          "mac_os_10_8_features" = [ "core-foundation-sys/mac_os_10_8_features" ];
          "uuid" = [ "dep:uuid" ];
          "with-chrono" = [ "chrono" ];
          "with-uuid" = [ "uuid" ];
        };
        resolvedDefaultFeatures = [ "default" "link" ];
      };
      "core-foundation-sys" = rec {
        crateName = "core-foundation-sys";
        version = "0.8.6";
        edition = "2018";
        sha256 = "13w6sdf06r0hn7bx2b45zxsg1mm2phz34jikm6xc5qrbr6djpsh6";
        authors = [
          "The Servo Project Developers"
        ];
        features = {
          "default" = [ "link" ];
        };
        resolvedDefaultFeatures = [ "link" ];
      };
      "core-graphics" = rec {
        crateName = "core-graphics";
        version = "0.23.1";
        edition = "2015";
        sha256 = "04m2hpzrkzkkxmvlak20ivlgf8rcsh3j3y67vgz2c30iyjx2j2lp";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "core-foundation";
            packageId = "core-foundation";
          }
          {
            name = "core-graphics-types";
            packageId = "core-graphics-types";
          }
          {
            name = "foreign-types";
            packageId = "foreign-types";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "core-graphics-types" = rec {
        crateName = "core-graphics-types";
        version = "0.1.3";
        edition = "2018";
        sha256 = "1bxg8nxc8fk4kxnqyanhf36wq0zrjr552c58qy6733zn2ihhwfa5";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "core-foundation";
            packageId = "core-foundation";
            usesDefaultFeatures = false;
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "default" = [ "link" ];
          "link" = [ "core-foundation/link" ];
        };
        resolvedDefaultFeatures = [ "default" "link" ];
      };
      "crc32fast" = rec {
        crateName = "crc32fast";
        version = "1.3.2";
        edition = "2015";
        sha256 = "03c8f29yx293yf43xar946xbls1g60c207m9drf8ilqhr25vsh5m";
        authors = [
          "Sam Rijs <srijs@airpost.net>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "crossbeam-utils" = rec {
        crateName = "crossbeam-utils";
        version = "0.8.19";
        edition = "2021";
        sha256 = "0iakrb1b8fjqrag7wphl94d10irhbh2fw1g444xslsywqyn3p3i4";
        features = {
          "default" = [ "std" ];
          "loom" = [ "dep:loom" ];
        };
      };
      "cursor-icon" = rec {
        crateName = "cursor-icon";
        version = "1.1.0";
        edition = "2021";
        sha256 = "14brf4vd6az9hnszwzqj7xyfaymqx9806d4i7xmwlaja3wjsr9ln";
        authors = [
          "Kirill Chibisov <contact@kchibisov.com>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "dispatch" = rec {
        crateName = "dispatch";
        version = "0.2.0";
        edition = "2018";
        sha256 = "0fwjr9b7582ic5689zxj8lf7zl94iklhlns3yivrnv8c9fxr635x";
        authors = [
          "Steven Sheldon"
        ];

      };
      "dlib" = rec {
        crateName = "dlib";
        version = "0.5.2";
        edition = "2015";
        sha256 = "04m4zzybx804394dnqs1blz241xcy480bdwf3w9p4k6c3l46031k";
        authors = [
          "Elinor Berger <elinor@safaradeg.net>"
        ];
        dependencies = [
          {
            name = "libloading";
            packageId = "libloading";
          }
        ];

      };
      "downcast-rs" = rec {
        crateName = "downcast-rs";
        version = "1.2.0";
        edition = "2015";
        sha256 = "0l36kgxqd5djhqwf5abxjmgasdw8n0qsjvw3jdvhi91nj393ba4y";
        authors = [
          "Ashish Myles <marcianx@gmail.com>"
          "Runji Wang <wangrunji0408@163.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "ecolor" = rec {
        crateName = "ecolor";
        version = "0.25.0";
        edition = "2021";
        sha256 = "0m1k6003dnqk37axcyhhh8axqn61vrk1nhpg0rl3nwxvrnmrllsp";
        authors = [
          "Emil Ernerfeldt <emil.ernerfeldt@gmail.com>"
          "Andreas Reich <reichandreas@gmx.de>"
        ];
        dependencies = [
          {
            name = "bytemuck";
            packageId = "bytemuck";
            optional = true;
            features = [ "derive" ];
          }
        ];
        features = {
          "bytemuck" = [ "dep:bytemuck" ];
          "cint" = [ "dep:cint" ];
          "color-hex" = [ "dep:color-hex" ];
          "document-features" = [ "dep:document-features" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "bytemuck" "default" ];
      };
      "eframe" = rec {
        crateName = "eframe";
        version = "0.25.0";
        edition = "2021";
        sha256 = "13pfhxm414rbzc85a4rssk1mvrybk6hwjd02awkwyr6ml51h3h3r";
        authors = [
          "Emil Ernerfeldt <emil.ernerfeldt@gmail.com>"
        ];
        dependencies = [
          {
            name = "bytemuck";
            packageId = "bytemuck";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "cocoa";
            packageId = "cocoa";
            target = { target, features }: (("macos" == target."os" or null));
          }
          {
            name = "egui";
            packageId = "egui";
            usesDefaultFeatures = false;
            features = [ "bytemuck" "log" ];
          }
          {
            name = "egui-winit";
            packageId = "egui-winit";
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "clipboard" "links" ];
          }
          {
            name = "egui_glow";
            packageId = "egui_glow";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "glow";
            packageId = "glow";
            optional = true;
          }
          {
            name = "glutin";
            packageId = "glutin";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "glutin-winit";
            packageId = "glutin-winit";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "image";
            packageId = "image";
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "png" ];
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "log";
            packageId = "log";
            features = [ "std" ];
          }
          {
            name = "objc";
            packageId = "objc";
            target = { target, features }: (("macos" == target."os" or null));
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "raw-window-handle";
            packageId = "raw-window-handle";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "raw-window-handle";
            packageId = "raw-window-handle";
            optional = true;
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [ "BinaryType" "Blob" "Clipboard" "ClipboardEvent" "CompositionEvent" "console" "CssStyleDeclaration" "DataTransfer" "DataTransferItem" "DataTransferItemList" "Document" "DomRect" "DragEvent" "Element" "Event" "EventListener" "EventTarget" "ExtSRgb" "File" "FileList" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "HtmlInputElement" "InputEvent" "KeyboardEvent" "Location" "MediaQueryList" "MediaQueryListEvent" "MouseEvent" "Navigator" "Performance" "Storage" "Touch" "TouchEvent" "TouchList" "WebGl2RenderingContext" "WebglDebugRendererInfo" "WebGlRenderingContext" "WheelEvent" "Window" ];
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (("windows" == target."os" or null));
          }
          {
            name = "winit";
            packageId = "winit";
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "rwh_05" ];
          }
        ];
        features = {
          "accesskit" = [ "egui/accesskit" "egui-winit/accesskit" ];
          "android-game-activity" = [ "egui-winit/android-game-activity" ];
          "android-native-activity" = [ "egui-winit/android-native-activity" ];
          "default" = [ "accesskit" "default_fonts" "glow" "wayland" "web_screen_reader" "winit/default" "x11" ];
          "default_fonts" = [ "egui/default_fonts" ];
          "directories-next" = [ "dep:directories-next" ];
          "document-features" = [ "dep:document-features" ];
          "glow" = [ "dep:glow" "dep:egui_glow" "dep:glutin" "dep:glutin-winit" ];
          "persistence" = [ "directories-next" "egui-winit/serde" "egui/persistence" "ron" "serde" ];
          "puffin" = [ "dep:puffin" "egui/puffin" "egui_glow?/puffin" "egui-wgpu?/puffin" "egui-winit/puffin" ];
          "ron" = [ "dep:ron" ];
          "serde" = [ "dep:serde" ];
          "wayland" = [ "egui-winit/wayland" ];
          "web_screen_reader" = [ "web-sys/SpeechSynthesis" "web-sys/SpeechSynthesisUtterance" ];
          "wgpu" = [ "dep:wgpu" "dep:egui-wgpu" "dep:pollster" "dep:raw-window-handle" ];
          "x11" = [ "egui-winit/x11" ];
        };
        resolvedDefaultFeatures = [ "default_fonts" "glow" "wayland" ];
      };
      "egui" = rec {
        crateName = "egui";
        version = "0.25.0";
        edition = "2021";
        sha256 = "1qy928q9adyy9d4sck787r28dj09rjx763ghxca3vgzksw769gz0";
        authors = [
          "Emil Ernerfeldt <emil.ernerfeldt@gmail.com>"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash";
            usesDefaultFeatures = false;
            features = [ "no-rng" "std" ];
          }
          {
            name = "epaint";
            packageId = "epaint";
            usesDefaultFeatures = false;
          }
          {
            name = "log";
            packageId = "log";
            optional = true;
            features = [ "std" ];
          }
          {
            name = "nohash-hasher";
            packageId = "nohash-hasher";
          }
        ];
        features = {
          "accesskit" = [ "dep:accesskit" ];
          "bytemuck" = [ "epaint/bytemuck" ];
          "callstack" = [ "dep:backtrace" ];
          "cint" = [ "epaint/cint" ];
          "color-hex" = [ "epaint/color-hex" ];
          "deadlock_detection" = [ "epaint/deadlock_detection" ];
          "default" = [ "default_fonts" ];
          "default_fonts" = [ "epaint/default_fonts" ];
          "document-features" = [ "dep:document-features" ];
          "extra_asserts" = [ "epaint/extra_asserts" ];
          "extra_debug_asserts" = [ "epaint/extra_debug_asserts" ];
          "log" = [ "dep:log" "epaint/log" ];
          "mint" = [ "epaint/mint" ];
          "persistence" = [ "serde" "epaint/serde" "ron" ];
          "puffin" = [ "dep:puffin" ];
          "ron" = [ "dep:ron" ];
          "serde" = [ "dep:serde" "epaint/serde" "accesskit?/serde" ];
          "unity" = [ "epaint/unity" ];
        };
        resolvedDefaultFeatures = [ "bytemuck" "default" "default_fonts" "log" ];
      };
      "egui-winit" = rec {
        crateName = "egui-winit";
        version = "0.25.0";
        edition = "2021";
        sha256 = "18409zk305xj2k0rss1pispz7k4b1n8h5pi44yyl3ian41vdk58x";
        authors = [
          "Emil Ernerfeldt <emil.ernerfeldt@gmail.com>"
        ];
        dependencies = [
          {
            name = "arboard";
            packageId = "arboard";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!("android" == target."os" or null));
          }
          {
            name = "egui";
            packageId = "egui";
            usesDefaultFeatures = false;
            features = [ "log" ];
          }
          {
            name = "log";
            packageId = "log";
            features = [ "std" ];
          }
          {
            name = "raw-window-handle";
            packageId = "raw-window-handle";
          }
          {
            name = "smithay-clipboard";
            packageId = "smithay-clipboard";
            optional = true;
            target = { target, features }: (("linux" == target."os" or null) || ("dragonfly" == target."os" or null) || ("freebsd" == target."os" or null) || ("netbsd" == target."os" or null) || ("openbsd" == target."os" or null));
          }
          {
            name = "web-time";
            packageId = "web-time";
          }
          {
            name = "webbrowser";
            packageId = "webbrowser";
            optional = true;
          }
          {
            name = "winit";
            packageId = "winit";
            usesDefaultFeatures = false;
            features = [ "rwh_05" ];
          }
        ];
        features = {
          "accesskit" = [ "accesskit_winit" "egui/accesskit" ];
          "accesskit_winit" = [ "dep:accesskit_winit" ];
          "android-game-activity" = [ "winit/android-game-activity" ];
          "android-native-activity" = [ "winit/android-native-activity" ];
          "arboard" = [ "dep:arboard" ];
          "bytemuck" = [ "egui/bytemuck" ];
          "clipboard" = [ "arboard" "smithay-clipboard" ];
          "default" = [ "clipboard" "links" "wayland" "winit/default" "x11" ];
          "document-features" = [ "dep:document-features" ];
          "links" = [ "webbrowser" ];
          "puffin" = [ "dep:puffin" "egui/puffin" ];
          "serde" = [ "egui/serde" "dep:serde" ];
          "smithay-clipboard" = [ "dep:smithay-clipboard" ];
          "wayland" = [ "winit/wayland" "bytemuck" ];
          "webbrowser" = [ "dep:webbrowser" ];
          "x11" = [ "winit/x11" "bytemuck" ];
        };
        resolvedDefaultFeatures = [ "arboard" "bytemuck" "clipboard" "links" "smithay-clipboard" "wayland" "webbrowser" ];
      };
      "egui_glow" = rec {
        crateName = "egui_glow";
        version = "0.25.0";
        edition = "2021";
        sha256 = "1f89c0b0dvv7w91k5kcwd4nm48wdczvi7f6nqwwp648dx0azhbnb";
        authors = [
          "Emil Ernerfeldt <emil.ernerfeldt@gmail.com>"
        ];
        dependencies = [
          {
            name = "bytemuck";
            packageId = "bytemuck";
          }
          {
            name = "egui";
            packageId = "egui";
            usesDefaultFeatures = false;
            features = [ "bytemuck" ];
          }
          {
            name = "glow";
            packageId = "glow";
          }
          {
            name = "log";
            packageId = "log";
            features = [ "std" ];
          }
          {
            name = "memoffset";
            packageId = "memoffset";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [ "console" ];
          }
        ];
        features = {
          "clipboard" = [ "egui-winit?/clipboard" ];
          "document-features" = [ "dep:document-features" ];
          "egui-winit" = [ "dep:egui-winit" ];
          "links" = [ "egui-winit?/links" ];
          "puffin" = [ "dep:puffin" "egui-winit?/puffin" "egui/puffin" ];
          "winit" = [ "egui-winit" ];
        };
      };
      "egui_plot" = rec {
        crateName = "egui_plot";
        version = "0.25.0";
        edition = "2021";
        sha256 = "1gh6sm7c2blq19y8z06f5zn1z8h6i7k4hvfj3yfzflphxgzry5ba";
        authors = [
          "Emil Ernerfeldt <emil.ernerfeldt@gmail.com>"
          "Jan Haller <bromeon@gmail.com>"
          "Sven Niederberger <s-niederberger@outlook.com>"
        ];
        dependencies = [
          {
            name = "egui";
            packageId = "egui";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "document-features" = [ "dep:document-features" ];
          "serde" = [ "dep:serde" "egui/serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "either" = rec {
        crateName = "either";
        version = "1.9.0";
        edition = "2018";
        sha256 = "01qy3anr7jal5lpc20791vxrw0nl6vksb5j7x56q2fycgcyy8sm2";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "use_std" ];
      };
      "emath" = rec {
        crateName = "emath";
        version = "0.25.0";
        edition = "2021";
        sha256 = "0zivhbj6zwkfxywlhaschg6m4c5d7kck12bkldxxp1vmfraq7r9y";
        authors = [
          "Emil Ernerfeldt <emil.ernerfeldt@gmail.com>"
        ];
        dependencies = [
          {
            name = "bytemuck";
            packageId = "bytemuck";
            optional = true;
            features = [ "derive" ];
          }
        ];
        features = {
          "bytemuck" = [ "dep:bytemuck" ];
          "document-features" = [ "dep:document-features" ];
          "mint" = [ "dep:mint" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "bytemuck" "default" ];
      };
      "epaint" = rec {
        crateName = "epaint";
        version = "0.25.0";
        edition = "2021";
        sha256 = "1rrd81dg351a6p01k3ynqxwj591ls77icc8lnsxh62gzdc3cnf76";
        authors = [
          "Emil Ernerfeldt <emil.ernerfeldt@gmail.com>"
        ];
        dependencies = [
          {
            name = "ab_glyph";
            packageId = "ab_glyph";
          }
          {
            name = "ahash";
            packageId = "ahash";
            usesDefaultFeatures = false;
            features = [ "no-rng" "std" ];
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
            optional = true;
            features = [ "derive" ];
          }
          {
            name = "ecolor";
            packageId = "ecolor";
          }
          {
            name = "emath";
            packageId = "emath";
          }
          {
            name = "log";
            packageId = "log";
            optional = true;
            features = [ "std" ];
          }
          {
            name = "nohash-hasher";
            packageId = "nohash-hasher";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
          }
        ];
        features = {
          "bytemuck" = [ "dep:bytemuck" "emath/bytemuck" "ecolor/bytemuck" ];
          "cint" = [ "ecolor/cint" ];
          "color-hex" = [ "ecolor/color-hex" ];
          "deadlock_detection" = [ "dep:backtrace" ];
          "default" = [ "default_fonts" ];
          "document-features" = [ "dep:document-features" ];
          "extra_asserts" = [ "emath/extra_asserts" "ecolor/extra_asserts" ];
          "extra_debug_asserts" = [ "emath/extra_debug_asserts" "ecolor/extra_debug_asserts" ];
          "log" = [ "dep:log" ];
          "mint" = [ "emath/mint" ];
          "serde" = [ "dep:serde" "ahash/serde" "emath/serde" "ecolor/serde" ];
        };
        resolvedDefaultFeatures = [ "bytemuck" "default_fonts" "log" ];
      };
      "equivalent" = rec {
        crateName = "equivalent";
        version = "1.0.1";
        edition = "2015";
        sha256 = "1malmx5f4lkfvqasz319lq6gb3ddg19yzf9s8cykfsgzdmyq0hsl";

      };
      "errno" = rec {
        crateName = "errno";
        version = "0.3.8";
        edition = "2018";
        sha256 = "0ia28ylfsp36i27g1qih875cyyy4by2grf80ki8vhgh6vinf8n52";
        authors = [
          "Chris Wong <lambda.fairy@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ("hermit" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ("wasi" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_System_Diagnostics_Debug" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "libc/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "error-code" = rec {
        crateName = "error-code";
        version = "2.3.1";
        edition = "2018";
        sha256 = "08baxlf8qz01lgjsdbfhs193r9y1nlc566s5xvzyf4dzwy8qkwb4";
        authors = [
          "Douman <douman@gmx.se>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
          {
            name = "str-buf";
            packageId = "str-buf";
          }
        ];
        features = {
        };
      };
      "fdeflate" = rec {
        crateName = "fdeflate";
        version = "0.3.3";
        edition = "2021";
        sha256 = "1g9ibjazj6wklff2q8gx9nm3wcmcaf3fkw0ic6m4ai7wdpfri410";
        authors = [
          "The image-rs Developers"
        ];
        dependencies = [
          {
            name = "simd-adler32";
            packageId = "simd-adler32";
          }
        ];

      };
      "flate2" = rec {
        crateName = "flate2";
        version = "1.0.28";
        edition = "2018";
        sha256 = "03llhsh4gqdirnfxxb9g2w9n0721dyn4yjir3pz7z4vjaxb3yc26";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Josh Triplett <josh@joshtriplett.org>"
        ];
        dependencies = [
          {
            name = "crc32fast";
            packageId = "crc32fast";
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "with-alloc" ];
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide";
            usesDefaultFeatures = false;
            target = { target, features }: (("wasm32" == target."arch" or null) && (!("emscripten" == target."os" or null)));
            features = [ "with-alloc" ];
          }
        ];
        features = {
          "any_zlib" = [ "any_impl" ];
          "cloudflare-zlib-sys" = [ "dep:cloudflare-zlib-sys" ];
          "cloudflare_zlib" = [ "any_zlib" "cloudflare-zlib-sys" ];
          "default" = [ "rust_backend" ];
          "libz-ng-sys" = [ "dep:libz-ng-sys" ];
          "libz-sys" = [ "dep:libz-sys" ];
          "miniz-sys" = [ "rust_backend" ];
          "miniz_oxide" = [ "dep:miniz_oxide" ];
          "rust_backend" = [ "miniz_oxide" "any_impl" ];
          "zlib" = [ "any_zlib" "libz-sys" ];
          "zlib-default" = [ "any_zlib" "libz-sys/default" ];
          "zlib-ng" = [ "any_zlib" "libz-ng-sys" ];
          "zlib-ng-compat" = [ "zlib" "libz-sys/zlib-ng" ];
        };
        resolvedDefaultFeatures = [ "any_impl" "default" "miniz_oxide" "rust_backend" ];
      };
      "foreign-types" = rec {
        crateName = "foreign-types";
        version = "0.5.0";
        edition = "2018";
        sha256 = "0rfr2zfxnx9rz3292z5nyk8qs2iirznn5ff3rd4vgdwza6mdjdyp";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "foreign-types-macros";
            packageId = "foreign-types-macros";
          }
          {
            name = "foreign-types-shared";
            packageId = "foreign-types-shared";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "foreign-types-macros/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "foreign-types-macros" = rec {
        crateName = "foreign-types-macros";
        version = "0.2.3";
        edition = "2018";
        sha256 = "0hjpii8ny6l7h7jpns2cp9589016l8mlrpaigcnayjn9bdc6qp0s";
        procMacro = true;
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "full" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "foreign-types-shared" = rec {
        crateName = "foreign-types-shared";
        version = "0.3.1";
        edition = "2018";
        sha256 = "0nykdvv41a3d4py61bylmlwjhhvdm0b3bcj9vxhqgxaxnp5ik6ma";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];

      };
      "form_urlencoded" = rec {
        crateName = "form_urlencoded";
        version = "1.2.1";
        edition = "2018";
        sha256 = "0milh8x7nl4f450s3ddhg57a3flcv6yq8hlkyk6fyr3mcb128dp1";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "percent-encoding/alloc" ];
          "default" = [ "std" ];
          "std" = [ "alloc" "percent-encoding/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "gethostname 0.3.0" = rec {
        crateName = "gethostname";
        version = "0.3.0";
        edition = "2021";
        sha256 = "0xy1wbx5k2bzi4cbaqj9wqgqsbn4f8pm6nsm1d86mibk66xd8rdv";
        authors = [
          "Sebastian Wiesner <sebastian@swsnr.de>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (!(target."windows" or false));
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "sysinfoapi" ];
          }
        ];

      };
      "gethostname 0.4.3" = rec {
        crateName = "gethostname";
        version = "0.4.3";
        edition = "2021";
        sha256 = "063qqhznyckwx9n4z4xrmdv10s0fi6kbr17r6bi1yjifki2y0xh1";
        authors = [
          "Sebastian Wiesner <sebastian@swsnr.de>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (!(target."windows" or false));
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.48.5";
            target = { target, features }: (target."windows" or false);
          }
        ];

      };
      "getrandom" = rec {
        crateName = "getrandom";
        version = "0.2.12";
        edition = "2018";
        sha256 = "1d8jb9bv38nkwlqqdjcav6gxckgwc9g30pm3qq506rvncpm9400r";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "wasi";
            packageId = "wasi";
            usesDefaultFeatures = false;
            target = { target, features }: ("wasi" == target."os" or null);
          }
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "js" = [ "wasm-bindgen" "js-sys" ];
          "js-sys" = [ "dep:js-sys" ];
          "rustc-dep-of-std" = [ "compiler_builtins" "core" "libc/rustc-dep-of-std" "wasi/rustc-dep-of-std" ];
          "wasm-bindgen" = [ "dep:wasm-bindgen" ];
        };
      };
      "gl_generator" = rec {
        crateName = "gl_generator";
        version = "0.14.0";
        edition = "2015";
        sha256 = "0k8j1hmfnff312gy7x1aqjzcm8zxid7ij7dlb8prljib7b1dz58s";
        libPath = "lib.rs";
        authors = [
          "Brendan Zabarauskas <bjzaba@yahoo.com.au>"
          "Corey Richardson"
          "Arseny Kapoulkine"
        ];
        dependencies = [
          {
            name = "khronos_api";
            packageId = "khronos_api";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "xml-rs";
            packageId = "xml-rs";
          }
        ];
        features = {
        };
      };
      "glow" = rec {
        crateName = "glow";
        version = "0.13.0";
        edition = "2021";
        sha256 = "1r01jrpxz7b9d976c7x7ijcbf9mm4q6471zrr3zcdi30n4q2lv48";
        authors = [
          "Joshua Groves <josh@joshgroves.com>"
          "Dzmitry Malyshau <kvarkus@gmail.com>"
        ];
        dependencies = [
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "slotmap";
            packageId = "slotmap";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            rename = "web_sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [ "Document" "Element" "HtmlCanvasElement" "HtmlImageElement" "HtmlVideoElement" "ImageBitmap" "VideoFrame" "WebGlActiveInfo" "WebGlBuffer" "WebGlFramebuffer" "WebGlProgram" "WebGlQuery" "WebGlRenderbuffer" "WebGlRenderingContext" "WebGl2RenderingContext" "WebGlSampler" "WebGlShader" "WebGlSync" "WebGlTexture" "WebGlTransformFeedback" "WebGlUniformLocation" "WebGlVertexArrayObject" "Window" "AngleInstancedArrays" "ExtBlendMinmax" "ExtColorBufferFloat" "ExtColorBufferHalfFloat" "ExtDisjointTimerQuery" "ExtFragDepth" "ExtShaderTextureLod" "ExtSRgb" "ExtTextureFilterAnisotropic" "OesElementIndexUint" "OesStandardDerivatives" "OesTextureFloat" "OesTextureFloatLinear" "OesTextureHalfFloat" "OesTextureHalfFloatLinear" "OesVertexArrayObject" "WebglColorBufferFloat" "WebglCompressedTextureAstc" "WebglCompressedTextureEtc" "WebglCompressedTextureEtc1" "WebglCompressedTexturePvrtc" "WebglCompressedTextureS3tc" "WebglCompressedTextureS3tcSrgb" "WebglDebugRendererInfo" "WebglDebugShaders" "WebglDepthTexture" "WebglDrawBuffers" "WebglLoseContext" "OvrMultiview2" ];
          }
        ];
        features = {
          "log" = [ "dep:log" ];
        };
      };
      "glutin" = rec {
        crateName = "glutin";
        version = "0.31.2";
        edition = "2021";
        sha256 = "04mjvgh2dipwa8wdy8gc70k8w48104v8vmr2cmqdqspq5ai5jm00";
        authors = [
          "Kirill Chibisov <contact@kchibisov.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.4.1";
          }
          {
            name = "cgl";
            packageId = "cgl";
            target = { target, features }: (("macos" == target."os" or null));
          }
          {
            name = "core-foundation";
            packageId = "core-foundation";
            target = { target, features }: (("macos" == target."os" or null));
          }
          {
            name = "dispatch";
            packageId = "dispatch";
            target = { target, features }: (("macos" == target."os" or null));
          }
          {
            name = "glutin_egl_sys";
            packageId = "glutin_egl_sys";
            optional = true;
            target = { target, features }: (("linux" == target."os" or null) || ("freebsd" == target."os" or null) || ("dragonfly" == target."os" or null) || ("netbsd" == target."os" or null) || ("openbsd" == target."os" or null));
          }
          {
            name = "glutin_egl_sys";
            packageId = "glutin_egl_sys";
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "glutin_egl_sys";
            packageId = "glutin_egl_sys";
            optional = true;
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "glutin_glx_sys";
            packageId = "glutin_glx_sys";
            optional = true;
            target = { target, features }: (("linux" == target."os" or null) || ("freebsd" == target."os" or null) || ("dragonfly" == target."os" or null) || ("netbsd" == target."os" or null) || ("openbsd" == target."os" or null));
          }
          {
            name = "glutin_wgl_sys";
            packageId = "glutin_wgl_sys";
            optional = true;
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "icrate";
            packageId = "icrate";
            target = { target, features }: (("macos" == target."os" or null));
            features = [ "dispatch" "Foundation" "Foundation_NSArray" "Foundation_NSThread" "AppKit" "AppKit_NSView" "AppKit_NSWindow" ];
          }
          {
            name = "libloading";
            packageId = "libloading";
            optional = true;
          }
          {
            name = "objc2";
            packageId = "objc2";
            target = { target, features }: (("macos" == target."os" or null));
            features = [ "relax-void-encoding" ];
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "raw-window-handle";
            packageId = "raw-window-handle";
          }
          {
            name = "wayland-sys";
            packageId = "wayland-sys";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (("linux" == target."os" or null) || ("freebsd" == target."os" or null) || ("dragonfly" == target."os" or null) || ("netbsd" == target."os" or null) || ("openbsd" == target."os" or null));
            features = [ "egl" "client" "dlopen" ];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            optional = true;
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Graphics_Gdi" "Win32_Graphics_OpenGL" "Win32_System_LibraryLoader" "Win32_UI_WindowsAndMessaging" ];
          }
          {
            name = "x11-dl";
            packageId = "x11-dl";
            optional = true;
            target = { target, features }: (("linux" == target."os" or null) || ("freebsd" == target."os" or null) || ("dragonfly" == target."os" or null) || ("netbsd" == target."os" or null) || ("openbsd" == target."os" or null));
          }
        ];
        buildDependencies = [
          {
            name = "cfg_aliases";
            packageId = "cfg_aliases";
          }
        ];
        features = {
          "default" = [ "egl" "glx" "x11" "wayland" "wgl" ];
          "egl" = [ "glutin_egl_sys" "libloading" ];
          "glutin_egl_sys" = [ "dep:glutin_egl_sys" ];
          "glutin_glx_sys" = [ "dep:glutin_glx_sys" ];
          "glutin_wgl_sys" = [ "dep:glutin_wgl_sys" ];
          "glx" = [ "x11" "glutin_glx_sys" "libloading" ];
          "libloading" = [ "dep:libloading" ];
          "wayland" = [ "wayland-sys" "egl" ];
          "wayland-sys" = [ "dep:wayland-sys" ];
          "wgl" = [ "glutin_wgl_sys" "windows-sys" ];
          "windows-sys" = [ "dep:windows-sys" ];
          "x11" = [ "x11-dl" ];
          "x11-dl" = [ "dep:x11-dl" ];
        };
        resolvedDefaultFeatures = [ "default" "egl" "glutin_egl_sys" "glutin_glx_sys" "glutin_wgl_sys" "glx" "libloading" "wayland" "wayland-sys" "wgl" "windows-sys" "x11" "x11-dl" ];
      };
      "glutin-winit" = rec {
        crateName = "glutin-winit";
        version = "0.4.2";
        edition = "2021";
        sha256 = "0dbppmj0m2i5df4ww565f5kg3vxmjbq5c7hqql988fzp4jxdzg0y";
        authors = [
          "Kirill Chibisov <contact@kchibisov.com>"
        ];
        dependencies = [
          {
            name = "glutin";
            packageId = "glutin";
            usesDefaultFeatures = false;
          }
          {
            name = "raw-window-handle";
            packageId = "raw-window-handle";
          }
          {
            name = "winit";
            packageId = "winit";
            usesDefaultFeatures = false;
            features = [ "rwh_05" ];
          }
        ];
        buildDependencies = [
          {
            name = "cfg_aliases";
            packageId = "cfg_aliases";
          }
        ];
        features = {
          "default" = [ "egl" "glx" "x11" "wayland" "wgl" ];
          "egl" = [ "glutin/egl" ];
          "glx" = [ "glutin/glx" "glutin/x11" "winit/x11" "x11" ];
          "wayland" = [ "glutin/wayland" "winit/wayland" ];
          "wgl" = [ "glutin/wgl" ];
          "x11" = [ "glutin/x11" "winit/x11" ];
        };
        resolvedDefaultFeatures = [ "default" "egl" "glx" "wayland" "wgl" "x11" ];
      };
      "glutin_egl_sys" = rec {
        crateName = "glutin_egl_sys";
        version = "0.6.0";
        edition = "2021";
        sha256 = "1kcv5pdpdsyhzpiahga15kk7yd4m64ia2k6xqcrz97ihylimdk3p";
        authors = [
          "Kirill Chibisov <contact@kchibisov.com>"
        ];
        dependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Graphics_Gdi" ];
          }
        ];
        buildDependencies = [
          {
            name = "gl_generator";
            packageId = "gl_generator";
          }
        ];

      };
      "glutin_glx_sys" = rec {
        crateName = "glutin_glx_sys";
        version = "0.5.0";
        edition = "2021";
        sha256 = "0krv3chf5sy83rsfwq267paczskpwnb5gcw0agac5p0hdilgsrd1";
        authors = [
          "Kirill Chibisov <contact@kchibisov.com>"
        ];
        dependencies = [
          {
            name = "x11-dl";
            packageId = "x11-dl";
            target = { target, features }: (("linux" == target."os" or null) || ("freebsd" == target."os" or null) || ("dragonfly" == target."os" or null) || ("netbsd" == target."os" or null) || ("openbsd" == target."os" or null));
          }
        ];
        buildDependencies = [
          {
            name = "gl_generator";
            packageId = "gl_generator";
          }
        ];

      };
      "glutin_wgl_sys" = rec {
        crateName = "glutin_wgl_sys";
        version = "0.5.0";
        edition = "2021";
        sha256 = "1b9f6qjc8gwhfxac4fpxkvv524l493f6b6q764nslpwmmjnri03c";
        authors = [
          "Kirill Chibisov <contact@kchibisov.com>"
        ];
        buildDependencies = [
          {
            name = "gl_generator";
            packageId = "gl_generator";
          }
        ];

      };
      "hashbrown" = rec {
        crateName = "hashbrown";
        version = "0.14.3";
        edition = "2021";
        sha256 = "012nywlg0lj9kwanh69my5x67vjlfmzfi9a0rq4qvis2j8fil3r9";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        features = {
          "ahash" = [ "dep:ahash" ];
          "alloc" = [ "dep:alloc" ];
          "allocator-api2" = [ "dep:allocator-api2" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "ahash" "inline-more" "allocator-api2" ];
          "equivalent" = [ "dep:equivalent" ];
          "nightly" = [ "allocator-api2?/nightly" "bumpalo/allocator_api" ];
          "rayon" = [ "dep:rayon" ];
          "rkyv" = [ "dep:rkyv" ];
          "rustc-dep-of-std" = [ "nightly" "core" "compiler_builtins" "alloc" "rustc-internal-api" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "raw" ];
      };
      "heck" = rec {
        crateName = "heck";
        version = "0.4.1";
        edition = "2018";
        sha256 = "1a7mqsnycv5z4z5vnv1k34548jzmc0ajic7c1j8jsaspnhw5ql4m";
        authors = [
          "Without Boats <woboats@gmail.com>"
        ];
        features = {
          "unicode" = [ "unicode-segmentation" ];
          "unicode-segmentation" = [ "dep:unicode-segmentation" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "home" = rec {
        crateName = "home";
        version = "0.5.9";
        edition = "2021";
        sha256 = "19grxyg35rqfd802pcc9ys1q3lafzlcjcv2pl2s5q8xpyr5kblg3";
        authors = [
          "Brian Anderson <andersrb@gmail.com>"
        ];
        dependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_UI_Shell" "Win32_System_Com" ];
          }
        ];

      };
      "icrate" = rec {
        crateName = "icrate";
        version = "0.0.4";
        edition = "2021";
        sha256 = "06d3g8n6xw3f0ai84mya0dlknp2n33zqdxpxp8272mslibzsmlwr";
        authors = [
          "Mads Marquart <mads@marquart.dk>"
        ];
        dependencies = [
          {
            name = "block2";
            packageId = "block2";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "dispatch";
            packageId = "dispatch";
            optional = true;
          }
          {
            name = "objc2";
            packageId = "objc2";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "Accessibility" = [ "Foundation" ];
          "Accessibility_all" = [ "Accessibility" "Accessibility_AXBrailleMap" "Accessibility_AXCategoricalDataAxisDescriptor" "Accessibility_AXChartDescriptor" "Accessibility_AXCustomContent" "Accessibility_AXDataPoint" "Accessibility_AXDataPointValue" "Accessibility_AXDataSeriesDescriptor" "Accessibility_AXLiveAudioGraph" "Accessibility_AXNumericDataAxisDescriptor" ];
          "AdServices" = [ "Foundation" ];
          "AdServices_all" = [ "AdServices" "AdServices_AAAttribution" ];
          "AdSupport" = [ "Foundation" ];
          "AdSupport_all" = [ "AdSupport" "AdSupport_ASIdentifierManager" ];
          "AppKit" = [ "CoreData" "Foundation" "AppKit_NSApplication" "AppKit_NSCollectionLayoutSection" "AppKit_NSCollectionLayoutGroupCustomItem" "AppKit_NSCollectionView" "AppKit_NSView" "AppKit_NSTableView" "AppKit_NSTableColumn" "AppKit_NSTableRowView" "Foundation_NSIndexPath" "Foundation_NSArray" "Foundation_NSCoder" ];
          "AppKit_NSATSTypesetter" = [ "AppKit_NSTypesetter" ];
          "AppKit_NSActionCell" = [ "AppKit_NSCell" ];
          "AppKit_NSApplication" = [ "AppKit_NSResponder" ];
          "AppKit_NSArrayController" = [ "AppKit_NSObjectController" ];
          "AppKit_NSBitmapImageRep" = [ "AppKit_NSImageRep" ];
          "AppKit_NSBox" = [ "AppKit_NSView" ];
          "AppKit_NSBrowser" = [ "AppKit_NSControl" ];
          "AppKit_NSBrowserCell" = [ "AppKit_NSCell" ];
          "AppKit_NSButton" = [ "AppKit_NSControl" ];
          "AppKit_NSButtonCell" = [ "AppKit_NSActionCell" ];
          "AppKit_NSButtonTouchBarItem" = [ "AppKit_NSTouchBarItem" ];
          "AppKit_NSCachedImageRep" = [ "AppKit_NSImageRep" ];
          "AppKit_NSCandidateListTouchBarItem" = [ "AppKit_NSTouchBarItem" ];
          "AppKit_NSClickGestureRecognizer" = [ "AppKit_NSGestureRecognizer" ];
          "AppKit_NSClipView" = [ "AppKit_NSView" ];
          "AppKit_NSCollectionLayoutBoundarySupplementaryItem" = [ "AppKit_NSCollectionLayoutSupplementaryItem" ];
          "AppKit_NSCollectionLayoutDecorationItem" = [ "AppKit_NSCollectionLayoutItem" ];
          "AppKit_NSCollectionLayoutGroup" = [ "AppKit_NSCollectionLayoutItem" ];
          "AppKit_NSCollectionLayoutSupplementaryItem" = [ "AppKit_NSCollectionLayoutItem" ];
          "AppKit_NSCollectionView" = [ "AppKit_NSView" ];
          "AppKit_NSCollectionViewCompositionalLayout" = [ "AppKit_NSCollectionViewLayout" ];
          "AppKit_NSCollectionViewFlowLayout" = [ "AppKit_NSCollectionViewLayout" ];
          "AppKit_NSCollectionViewFlowLayoutInvalidationContext" = [ "AppKit_NSCollectionViewLayoutInvalidationContext" ];
          "AppKit_NSCollectionViewGridLayout" = [ "AppKit_NSCollectionViewLayout" ];
          "AppKit_NSCollectionViewItem" = [ "AppKit_NSViewController" ];
          "AppKit_NSCollectionViewTransitionLayout" = [ "AppKit_NSCollectionViewLayout" ];
          "AppKit_NSColorPanel" = [ "AppKit_NSPanel" ];
          "AppKit_NSColorPickerTouchBarItem" = [ "AppKit_NSTouchBarItem" ];
          "AppKit_NSColorWell" = [ "AppKit_NSControl" ];
          "AppKit_NSComboBox" = [ "AppKit_NSTextField" ];
          "AppKit_NSComboBoxCell" = [ "AppKit_NSTextFieldCell" ];
          "AppKit_NSComboButton" = [ "AppKit_NSControl" ];
          "AppKit_NSControl" = [ "AppKit_NSView" ];
          "AppKit_NSCustomImageRep" = [ "AppKit_NSImageRep" ];
          "AppKit_NSCustomTouchBarItem" = [ "AppKit_NSTouchBarItem" ];
          "AppKit_NSDatePicker" = [ "AppKit_NSControl" ];
          "AppKit_NSDatePickerCell" = [ "AppKit_NSActionCell" ];
          "AppKit_NSDictionaryController" = [ "AppKit_NSArrayController" ];
          "AppKit_NSDrawer" = [ "AppKit_NSResponder" ];
          "AppKit_NSEPSImageRep" = [ "AppKit_NSImageRep" ];
          "AppKit_NSFontPanel" = [ "AppKit_NSPanel" ];
          "AppKit_NSForm" = [ "AppKit_NSMatrix" ];
          "AppKit_NSFormCell" = [ "AppKit_NSActionCell" ];
          "AppKit_NSGridView" = [ "AppKit_NSView" ];
          "AppKit_NSGroupTouchBarItem" = [ "AppKit_NSTouchBarItem" ];
          "AppKit_NSImageCell" = [ "AppKit_NSCell" ];
          "AppKit_NSImageView" = [ "AppKit_NSControl" ];
          "AppKit_NSLayoutDimension" = [ "AppKit_NSLayoutAnchor" ];
          "AppKit_NSLayoutXAxisAnchor" = [ "AppKit_NSLayoutAnchor" ];
          "AppKit_NSLayoutYAxisAnchor" = [ "AppKit_NSLayoutAnchor" ];
          "AppKit_NSLevelIndicator" = [ "AppKit_NSControl" ];
          "AppKit_NSLevelIndicatorCell" = [ "AppKit_NSActionCell" ];
          "AppKit_NSMagnificationGestureRecognizer" = [ "AppKit_NSGestureRecognizer" ];
          "AppKit_NSMatrix" = [ "AppKit_NSControl" ];
          "AppKit_NSMenuItemCell" = [ "AppKit_NSButtonCell" ];
          "AppKit_NSMenuToolbarItem" = [ "AppKit_NSToolbarItem" ];
          "AppKit_NSMutableFontCollection" = [ "AppKit_NSFontCollection" ];
          "AppKit_NSMutableParagraphStyle" = [ "AppKit_NSParagraphStyle" ];
          "AppKit_NSObjectController" = [ "AppKit_NSController" ];
          "AppKit_NSOpenPanel" = [ "AppKit_NSSavePanel" ];
          "AppKit_NSOutlineView" = [ "AppKit_NSTableView" ];
          "AppKit_NSPDFImageRep" = [ "AppKit_NSImageRep" ];
          "AppKit_NSPICTImageRep" = [ "AppKit_NSImageRep" ];
          "AppKit_NSPageController" = [ "AppKit_NSViewController" ];
          "AppKit_NSPanGestureRecognizer" = [ "AppKit_NSGestureRecognizer" ];
          "AppKit_NSPanel" = [ "AppKit_NSWindow" ];
          "AppKit_NSPathCell" = [ "AppKit_NSActionCell" ];
          "AppKit_NSPathComponentCell" = [ "AppKit_NSTextFieldCell" ];
          "AppKit_NSPathControl" = [ "AppKit_NSControl" ];
          "AppKit_NSPersistentDocument" = [ "AppKit_NSDocument" ];
          "AppKit_NSPickerTouchBarItem" = [ "AppKit_NSTouchBarItem" ];
          "AppKit_NSPopUpButton" = [ "AppKit_NSButton" ];
          "AppKit_NSPopUpButtonCell" = [ "AppKit_NSMenuItemCell" ];
          "AppKit_NSPopover" = [ "AppKit_NSResponder" ];
          "AppKit_NSPopoverTouchBarItem" = [ "AppKit_NSTouchBarItem" ];
          "AppKit_NSPredicateEditor" = [ "AppKit_NSRuleEditor" ];
          "AppKit_NSPressGestureRecognizer" = [ "AppKit_NSGestureRecognizer" ];
          "AppKit_NSProgressIndicator" = [ "AppKit_NSView" ];
          "AppKit_NSRotationGestureRecognizer" = [ "AppKit_NSGestureRecognizer" ];
          "AppKit_NSRuleEditor" = [ "AppKit_NSControl" ];
          "AppKit_NSRulerView" = [ "AppKit_NSView" ];
          "AppKit_NSSavePanel" = [ "AppKit_NSPanel" ];
          "AppKit_NSScrollView" = [ "AppKit_NSView" ];
          "AppKit_NSScroller" = [ "AppKit_NSControl" ];
          "AppKit_NSScrubber" = [ "AppKit_NSView" ];
          "AppKit_NSScrubberArrangedView" = [ "AppKit_NSView" ];
          "AppKit_NSScrubberFlowLayout" = [ "AppKit_NSScrubberLayout" ];
          "AppKit_NSScrubberImageItemView" = [ "AppKit_NSScrubberItemView" ];
          "AppKit_NSScrubberItemView" = [ "AppKit_NSScrubberArrangedView" ];
          "AppKit_NSScrubberProportionalLayout" = [ "AppKit_NSScrubberLayout" ];
          "AppKit_NSScrubberSelectionView" = [ "AppKit_NSScrubberArrangedView" ];
          "AppKit_NSScrubberTextItemView" = [ "AppKit_NSScrubberItemView" ];
          "AppKit_NSSearchField" = [ "AppKit_NSTextField" ];
          "AppKit_NSSearchFieldCell" = [ "AppKit_NSTextFieldCell" ];
          "AppKit_NSSearchToolbarItem" = [ "AppKit_NSToolbarItem" ];
          "AppKit_NSSecureTextField" = [ "AppKit_NSTextField" ];
          "AppKit_NSSecureTextFieldCell" = [ "AppKit_NSTextFieldCell" ];
          "AppKit_NSSegmentedCell" = [ "AppKit_NSActionCell" ];
          "AppKit_NSSegmentedControl" = [ "AppKit_NSControl" ];
          "AppKit_NSSharingServicePickerToolbarItem" = [ "AppKit_NSToolbarItem" ];
          "AppKit_NSSharingServicePickerTouchBarItem" = [ "AppKit_NSTouchBarItem" ];
          "AppKit_NSSlider" = [ "AppKit_NSControl" ];
          "AppKit_NSSliderCell" = [ "AppKit_NSActionCell" ];
          "AppKit_NSSliderTouchBarItem" = [ "AppKit_NSTouchBarItem" ];
          "AppKit_NSSplitView" = [ "AppKit_NSView" ];
          "AppKit_NSSplitViewController" = [ "AppKit_NSViewController" ];
          "AppKit_NSStackView" = [ "AppKit_NSView" ];
          "AppKit_NSStatusBarButton" = [ "AppKit_NSButton" ];
          "AppKit_NSStepper" = [ "AppKit_NSControl" ];
          "AppKit_NSStepperCell" = [ "AppKit_NSActionCell" ];
          "AppKit_NSStepperTouchBarItem" = [ "AppKit_NSTouchBarItem" ];
          "AppKit_NSSwitch" = [ "AppKit_NSControl" ];
          "AppKit_NSTabView" = [ "AppKit_NSView" ];
          "AppKit_NSTabViewController" = [ "AppKit_NSViewController" ];
          "AppKit_NSTableCellView" = [ "AppKit_NSView" ];
          "AppKit_NSTableHeaderCell" = [ "AppKit_NSTextFieldCell" ];
          "AppKit_NSTableHeaderView" = [ "AppKit_NSView" ];
          "AppKit_NSTableRowView" = [ "AppKit_NSView" ];
          "AppKit_NSTableView" = [ "AppKit_NSControl" ];
          "AppKit_NSText" = [ "AppKit_NSView" ];
          "AppKit_NSTextAttachmentCell" = [ "AppKit_NSCell" ];
          "AppKit_NSTextContentStorage" = [ "AppKit_NSTextContentManager" ];
          "AppKit_NSTextField" = [ "AppKit_NSControl" ];
          "AppKit_NSTextFieldCell" = [ "AppKit_NSActionCell" ];
          "AppKit_NSTextListElement" = [ "AppKit_NSTextParagraph" ];
          "AppKit_NSTextParagraph" = [ "AppKit_NSTextElement" ];
          "AppKit_NSTextStorage" = [ "Foundation_NSMutableAttributedString" ];
          "AppKit_NSTextTable" = [ "AppKit_NSTextBlock" ];
          "AppKit_NSTextTableBlock" = [ "AppKit_NSTextBlock" ];
          "AppKit_NSTextView" = [ "AppKit_NSText" ];
          "AppKit_NSTitlebarAccessoryViewController" = [ "AppKit_NSViewController" ];
          "AppKit_NSTokenField" = [ "AppKit_NSTextField" ];
          "AppKit_NSTokenFieldCell" = [ "AppKit_NSTextFieldCell" ];
          "AppKit_NSToolbarItemGroup" = [ "AppKit_NSToolbarItem" ];
          "AppKit_NSTrackingSeparatorToolbarItem" = [ "AppKit_NSToolbarItem" ];
          "AppKit_NSTreeController" = [ "AppKit_NSObjectController" ];
          "AppKit_NSUserDefaultsController" = [ "AppKit_NSController" ];
          "AppKit_NSView" = [ "AppKit_NSResponder" ];
          "AppKit_NSViewAnimation" = [ "AppKit_NSAnimation" ];
          "AppKit_NSViewController" = [ "AppKit_NSResponder" ];
          "AppKit_NSVisualEffectView" = [ "AppKit_NSView" ];
          "AppKit_NSWindow" = [ "AppKit_NSResponder" ];
          "AppKit_NSWindowController" = [ "AppKit_NSResponder" ];
          "AppKit_all" = [ "AppKit" "AppKit_NSATSTypesetter" "AppKit_NSAccessibilityCustomAction" "AppKit_NSAccessibilityCustomRotor" "AppKit_NSAccessibilityCustomRotorItemResult" "AppKit_NSAccessibilityCustomRotorSearchParameters" "AppKit_NSAccessibilityElement" "AppKit_NSActionCell" "AppKit_NSAlert" "AppKit_NSAlignmentFeedbackFilter" "AppKit_NSAnimation" "AppKit_NSAnimationContext" "AppKit_NSAppearance" "AppKit_NSApplication" "AppKit_NSArrayController" "AppKit_NSBezierPath" "AppKit_NSBindingSelectionMarker" "AppKit_NSBitmapImageRep" "AppKit_NSBox" "AppKit_NSBrowser" "AppKit_NSBrowserCell" "AppKit_NSButton" "AppKit_NSButtonCell" "AppKit_NSButtonTouchBarItem" "AppKit_NSCachedImageRep" "AppKit_NSCandidateListTouchBarItem" "AppKit_NSCell" "AppKit_NSClickGestureRecognizer" "AppKit_NSClipView" "AppKit_NSCollectionLayoutAnchor" "AppKit_NSCollectionLayoutBoundarySupplementaryItem" "AppKit_NSCollectionLayoutDecorationItem" "AppKit_NSCollectionLayoutDimension" "AppKit_NSCollectionLayoutEdgeSpacing" "AppKit_NSCollectionLayoutGroup" "AppKit_NSCollectionLayoutGroupCustomItem" "AppKit_NSCollectionLayoutItem" "AppKit_NSCollectionLayoutSection" "AppKit_NSCollectionLayoutSize" "AppKit_NSCollectionLayoutSpacing" "AppKit_NSCollectionLayoutSupplementaryItem" "AppKit_NSCollectionView" "AppKit_NSCollectionViewCompositionalLayout" "AppKit_NSCollectionViewCompositionalLayoutConfiguration" "AppKit_NSCollectionViewDiffableDataSource" "AppKit_NSCollectionViewFlowLayout" "AppKit_NSCollectionViewFlowLayoutInvalidationContext" "AppKit_NSCollectionViewGridLayout" "AppKit_NSCollectionViewItem" "AppKit_NSCollectionViewLayout" "AppKit_NSCollectionViewLayoutAttributes" "AppKit_NSCollectionViewLayoutInvalidationContext" "AppKit_NSCollectionViewTransitionLayout" "AppKit_NSCollectionViewUpdateItem" "AppKit_NSColor" "AppKit_NSColorList" "AppKit_NSColorPanel" "AppKit_NSColorPicker" "AppKit_NSColorPickerTouchBarItem" "AppKit_NSColorSampler" "AppKit_NSColorSpace" "AppKit_NSColorWell" "AppKit_NSComboBox" "AppKit_NSComboBoxCell" "AppKit_NSComboButton" "AppKit_NSControl" "AppKit_NSController" "AppKit_NSCursor" "AppKit_NSCustomImageRep" "AppKit_NSCustomTouchBarItem" "AppKit_NSDataAsset" "AppKit_NSDatePicker" "AppKit_NSDatePickerCell" "AppKit_NSDictionaryController" "AppKit_NSDictionaryControllerKeyValuePair" "AppKit_NSDiffableDataSourceSnapshot" "AppKit_NSDockTile" "AppKit_NSDocument" "AppKit_NSDocumentController" "AppKit_NSDraggingImageComponent" "AppKit_NSDraggingItem" "AppKit_NSDraggingSession" "AppKit_NSDrawer" "AppKit_NSEPSImageRep" "AppKit_NSEvent" "AppKit_NSFilePromiseProvider" "AppKit_NSFilePromiseReceiver" "AppKit_NSFont" "AppKit_NSFontAssetRequest" "AppKit_NSFontCollection" "AppKit_NSFontDescriptor" "AppKit_NSFontManager" "AppKit_NSFontPanel" "AppKit_NSForm" "AppKit_NSFormCell" "AppKit_NSGestureRecognizer" "AppKit_NSGlyphGenerator" "AppKit_NSGlyphInfo" "AppKit_NSGradient" "AppKit_NSGraphicsContext" "AppKit_NSGridCell" "AppKit_NSGridColumn" "AppKit_NSGridRow" "AppKit_NSGridView" "AppKit_NSGroupTouchBarItem" "AppKit_NSHapticFeedbackManager" "AppKit_NSHelpManager" "AppKit_NSImage" "AppKit_NSImageCell" "AppKit_NSImageRep" "AppKit_NSImageSymbolConfiguration" "AppKit_NSImageView" "AppKit_NSInputManager" "AppKit_NSInputServer" "AppKit_NSLayoutAnchor" "AppKit_NSLayoutConstraint" "AppKit_NSLayoutDimension" "AppKit_NSLayoutGuide" "AppKit_NSLayoutManager" "AppKit_NSLayoutXAxisAnchor" "AppKit_NSLayoutYAxisAnchor" "AppKit_NSLevelIndicator" "AppKit_NSLevelIndicatorCell" "AppKit_NSMagnificationGestureRecognizer" "AppKit_NSMatrix" "AppKit_NSMediaLibraryBrowserController" "AppKit_NSMenu" "AppKit_NSMenuItem" "AppKit_NSMenuItemCell" "AppKit_NSMenuToolbarItem" "AppKit_NSMovie" "AppKit_NSMutableFontCollection" "AppKit_NSMutableParagraphStyle" "AppKit_NSNib" "AppKit_NSObjectController" "AppKit_NSOpenPanel" "AppKit_NSOutlineView" "AppKit_NSPDFImageRep" "AppKit_NSPDFInfo" "AppKit_NSPDFPanel" "AppKit_NSPICTImageRep" "AppKit_NSPageController" "AppKit_NSPageLayout" "AppKit_NSPanGestureRecognizer" "AppKit_NSPanel" "AppKit_NSParagraphStyle" "AppKit_NSPasteboard" "AppKit_NSPasteboardItem" "AppKit_NSPathCell" "AppKit_NSPathComponentCell" "AppKit_NSPathControl" "AppKit_NSPathControlItem" "AppKit_NSPersistentDocument" "AppKit_NSPickerTouchBarItem" "AppKit_NSPopUpButton" "AppKit_NSPopUpButtonCell" "AppKit_NSPopover" "AppKit_NSPopoverTouchBarItem" "AppKit_NSPredicateEditor" "AppKit_NSPredicateEditorRowTemplate" "AppKit_NSPressGestureRecognizer" "AppKit_NSPressureConfiguration" "AppKit_NSPreviewRepresentingActivityItem" "AppKit_NSPrintInfo" "AppKit_NSPrintOperation" "AppKit_NSPrintPanel" "AppKit_NSPrinter" "AppKit_NSProgressIndicator" "AppKit_NSResponder" "AppKit_NSRotationGestureRecognizer" "AppKit_NSRuleEditor" "AppKit_NSRulerMarker" "AppKit_NSRulerView" "AppKit_NSRunningApplication" "AppKit_NSSavePanel" "AppKit_NSScreen" "AppKit_NSScrollView" "AppKit_NSScroller" "AppKit_NSScrubber" "AppKit_NSScrubberArrangedView" "AppKit_NSScrubberFlowLayout" "AppKit_NSScrubberImageItemView" "AppKit_NSScrubberItemView" "AppKit_NSScrubberLayout" "AppKit_NSScrubberLayoutAttributes" "AppKit_NSScrubberProportionalLayout" "AppKit_NSScrubberSelectionStyle" "AppKit_NSScrubberSelectionView" "AppKit_NSScrubberTextItemView" "AppKit_NSSearchField" "AppKit_NSSearchFieldCell" "AppKit_NSSearchToolbarItem" "AppKit_NSSecureTextField" "AppKit_NSSecureTextFieldCell" "AppKit_NSSegmentedCell" "AppKit_NSSegmentedControl" "AppKit_NSShadow" "AppKit_NSSharingService" "AppKit_NSSharingServicePicker" "AppKit_NSSharingServicePickerToolbarItem" "AppKit_NSSharingServicePickerTouchBarItem" "AppKit_NSSlider" "AppKit_NSSliderAccessory" "AppKit_NSSliderAccessoryBehavior" "AppKit_NSSliderCell" "AppKit_NSSliderTouchBarItem" "AppKit_NSSound" "AppKit_NSSpeechRecognizer" "AppKit_NSSpeechSynthesizer" "AppKit_NSSpellChecker" "AppKit_NSSplitView" "AppKit_NSSplitViewController" "AppKit_NSSplitViewItem" "AppKit_NSStackView" "AppKit_NSStatusBar" "AppKit_NSStatusBarButton" "AppKit_NSStatusItem" "AppKit_NSStepper" "AppKit_NSStepperCell" "AppKit_NSStepperTouchBarItem" "AppKit_NSStoryboard" "AppKit_NSStoryboardSegue" "AppKit_NSStringDrawingContext" "AppKit_NSSwitch" "AppKit_NSTabView" "AppKit_NSTabViewController" "AppKit_NSTabViewItem" "AppKit_NSTableCellView" "AppKit_NSTableColumn" "AppKit_NSTableHeaderCell" "AppKit_NSTableHeaderView" "AppKit_NSTableRowView" "AppKit_NSTableView" "AppKit_NSTableViewDiffableDataSource" "AppKit_NSTableViewRowAction" "AppKit_NSText" "AppKit_NSTextAlternatives" "AppKit_NSTextAttachment" "AppKit_NSTextAttachmentCell" "AppKit_NSTextAttachmentViewProvider" "AppKit_NSTextBlock" "AppKit_NSTextCheckingController" "AppKit_NSTextContainer" "AppKit_NSTextContentManager" "AppKit_NSTextContentStorage" "AppKit_NSTextElement" "AppKit_NSTextField" "AppKit_NSTextFieldCell" "AppKit_NSTextFinder" "AppKit_NSTextInputContext" "AppKit_NSTextLayoutFragment" "AppKit_NSTextLayoutManager" "AppKit_NSTextLineFragment" "AppKit_NSTextList" "AppKit_NSTextListElement" "AppKit_NSTextParagraph" "AppKit_NSTextRange" "AppKit_NSTextSelection" "AppKit_NSTextSelectionNavigation" "AppKit_NSTextStorage" "AppKit_NSTextTab" "AppKit_NSTextTable" "AppKit_NSTextTableBlock" "AppKit_NSTextView" "AppKit_NSTextViewportLayoutController" "AppKit_NSTintConfiguration" "AppKit_NSTitlebarAccessoryViewController" "AppKit_NSTokenField" "AppKit_NSTokenFieldCell" "AppKit_NSToolbar" "AppKit_NSToolbarItem" "AppKit_NSToolbarItemGroup" "AppKit_NSTouch" "AppKit_NSTouchBar" "AppKit_NSTouchBarItem" "AppKit_NSTrackingArea" "AppKit_NSTrackingSeparatorToolbarItem" "AppKit_NSTreeController" "AppKit_NSTreeNode" "AppKit_NSTypesetter" "AppKit_NSUserDefaultsController" "AppKit_NSUserInterfaceCompressionOptions" "AppKit_NSView" "AppKit_NSViewAnimation" "AppKit_NSViewController" "AppKit_NSVisualEffectView" "AppKit_NSWindow" "AppKit_NSWindowController" "AppKit_NSWindowTab" "AppKit_NSWindowTabGroup" "AppKit_NSWorkspace" "AppKit_NSWorkspaceAuthorization" "AppKit_NSWorkspaceOpenConfiguration" ];
          "AuthenticationServices" = [ "AppKit" "Foundation" "Foundation_NSURL" ];
          "AuthenticationServices_ASAccountAuthenticationModificationExtensionContext" = [ "Foundation_NSExtensionContext" ];
          "AuthenticationServices_ASAccountAuthenticationModificationReplacePasswordWithSignInWithAppleRequest" = [ "AuthenticationServices_ASAccountAuthenticationModificationRequest" ];
          "AuthenticationServices_ASAccountAuthenticationModificationUpgradePasswordToStrongPasswordRequest" = [ "AuthenticationServices_ASAccountAuthenticationModificationRequest" ];
          "AuthenticationServices_ASAccountAuthenticationModificationViewController" = [ "AppKit_NSViewController" ];
          "AuthenticationServices_ASAuthorizationAppleIDButton" = [ "AppKit_NSControl" ];
          "AuthenticationServices_ASAuthorizationAppleIDRequest" = [ "AuthenticationServices_ASAuthorizationOpenIDRequest" ];
          "AuthenticationServices_ASAuthorizationOpenIDRequest" = [ "AuthenticationServices_ASAuthorizationRequest" ];
          "AuthenticationServices_ASAuthorizationPasswordRequest" = [ "AuthenticationServices_ASAuthorizationRequest" ];
          "AuthenticationServices_ASAuthorizationPlatformPublicKeyCredentialAssertionRequest" = [ "AuthenticationServices_ASAuthorizationRequest" ];
          "AuthenticationServices_ASAuthorizationPlatformPublicKeyCredentialRegistrationRequest" = [ "AuthenticationServices_ASAuthorizationRequest" ];
          "AuthenticationServices_ASAuthorizationSecurityKeyPublicKeyCredentialAssertionRequest" = [ "AuthenticationServices_ASAuthorizationRequest" ];
          "AuthenticationServices_ASAuthorizationSecurityKeyPublicKeyCredentialRegistrationRequest" = [ "AuthenticationServices_ASAuthorizationRequest" ];
          "AuthenticationServices_ASAuthorizationSingleSignOnRequest" = [ "AuthenticationServices_ASAuthorizationOpenIDRequest" ];
          "AuthenticationServices_ASCredentialProviderExtensionContext" = [ "Foundation_NSExtensionContext" ];
          "AuthenticationServices_ASCredentialProviderViewController" = [ "AppKit_NSViewController" ];
          "AuthenticationServices_all" = [ "AuthenticationServices" "AuthenticationServices_ASAccountAuthenticationModificationController" "AuthenticationServices_ASAccountAuthenticationModificationExtensionContext" "AuthenticationServices_ASAccountAuthenticationModificationReplacePasswordWithSignInWithAppleRequest" "AuthenticationServices_ASAccountAuthenticationModificationRequest" "AuthenticationServices_ASAccountAuthenticationModificationUpgradePasswordToStrongPasswordRequest" "AuthenticationServices_ASAccountAuthenticationModificationViewController" "AuthenticationServices_ASAuthorization" "AuthenticationServices_ASAuthorizationAppleIDButton" "AuthenticationServices_ASAuthorizationAppleIDCredential" "AuthenticationServices_ASAuthorizationAppleIDProvider" "AuthenticationServices_ASAuthorizationAppleIDRequest" "AuthenticationServices_ASAuthorizationController" "AuthenticationServices_ASAuthorizationOpenIDRequest" "AuthenticationServices_ASAuthorizationPasswordProvider" "AuthenticationServices_ASAuthorizationPasswordRequest" "AuthenticationServices_ASAuthorizationPlatformPublicKeyCredentialAssertion" "AuthenticationServices_ASAuthorizationPlatformPublicKeyCredentialAssertionRequest" "AuthenticationServices_ASAuthorizationPlatformPublicKeyCredentialDescriptor" "AuthenticationServices_ASAuthorizationPlatformPublicKeyCredentialProvider" "AuthenticationServices_ASAuthorizationPlatformPublicKeyCredentialRegistration" "AuthenticationServices_ASAuthorizationPlatformPublicKeyCredentialRegistrationRequest" "AuthenticationServices_ASAuthorizationProviderExtensionAuthorizationRequest" "AuthenticationServices_ASAuthorizationProviderExtensionAuthorizationResult" "AuthenticationServices_ASAuthorizationProviderExtensionKerberosMapping" "AuthenticationServices_ASAuthorizationProviderExtensionLoginConfiguration" "AuthenticationServices_ASAuthorizationProviderExtensionLoginManager" "AuthenticationServices_ASAuthorizationPublicKeyCredentialParameters" "AuthenticationServices_ASAuthorizationRequest" "AuthenticationServices_ASAuthorizationSecurityKeyPublicKeyCredentialAssertion" "AuthenticationServices_ASAuthorizationSecurityKeyPublicKeyCredentialAssertionRequest" "AuthenticationServices_ASAuthorizationSecurityKeyPublicKeyCredentialDescriptor" "AuthenticationServices_ASAuthorizationSecurityKeyPublicKeyCredentialProvider" "AuthenticationServices_ASAuthorizationSecurityKeyPublicKeyCredentialRegistration" "AuthenticationServices_ASAuthorizationSecurityKeyPublicKeyCredentialRegistrationRequest" "AuthenticationServices_ASAuthorizationSingleSignOnCredential" "AuthenticationServices_ASAuthorizationSingleSignOnProvider" "AuthenticationServices_ASAuthorizationSingleSignOnRequest" "AuthenticationServices_ASCredentialIdentityStore" "AuthenticationServices_ASCredentialIdentityStoreState" "AuthenticationServices_ASCredentialProviderExtensionContext" "AuthenticationServices_ASCredentialProviderViewController" "AuthenticationServices_ASCredentialServiceIdentifier" "AuthenticationServices_ASPasswordCredential" "AuthenticationServices_ASPasswordCredentialIdentity" "AuthenticationServices_ASWebAuthenticationSession" "AuthenticationServices_ASWebAuthenticationSessionRequest" "AuthenticationServices_ASWebAuthenticationSessionWebBrowserSessionManager" ];
          "AutomaticAssessmentConfiguration" = [ "Foundation" ];
          "AutomaticAssessmentConfiguration_all" = [ "AutomaticAssessmentConfiguration" "AutomaticAssessmentConfiguration_AEAssessmentApplication" "AutomaticAssessmentConfiguration_AEAssessmentConfiguration" "AutomaticAssessmentConfiguration_AEAssessmentParticipantConfiguration" "AutomaticAssessmentConfiguration_AEAssessmentSession" ];
          "Automator" = [ "AppKit" "Foundation" "OSAKit" ];
          "Automator_AMAppleScriptAction" = [ "Automator_AMBundleAction" ];
          "Automator_AMBundleAction" = [ "Automator_AMAction" ];
          "Automator_AMShellScriptAction" = [ "Automator_AMBundleAction" ];
          "Automator_AMWorkflowController" = [ "AppKit_NSController" ];
          "Automator_AMWorkflowView" = [ "AppKit_NSView" ];
          "Automator_all" = [ "Automator" "Automator_AMAction" "Automator_AMAppleScriptAction" "Automator_AMBundleAction" "Automator_AMShellScriptAction" "Automator_AMWorkflow" "Automator_AMWorkflowController" "Automator_AMWorkflowView" "Automator_AMWorkspace" ];
          "BackgroundAssets" = [ "Foundation" ];
          "BackgroundAssets_BAURLDownload" = [ "BackgroundAssets_BADownload" ];
          "BackgroundAssets_all" = [ "BackgroundAssets" "BackgroundAssets_BAAppExtensionInfo" "BackgroundAssets_BADownload" "BackgroundAssets_BADownloadManager" "BackgroundAssets_BAURLDownload" ];
          "BackgroundTasks" = [ "Foundation" ];
          "BackgroundTasks_BGAppRefreshTask" = [ "BackgroundTasks_BGTask" ];
          "BackgroundTasks_BGAppRefreshTaskRequest" = [ "BackgroundTasks_BGTaskRequest" ];
          "BackgroundTasks_BGProcessingTask" = [ "BackgroundTasks_BGTask" ];
          "BackgroundTasks_BGProcessingTaskRequest" = [ "BackgroundTasks_BGTaskRequest" ];
          "BackgroundTasks_all" = [ "BackgroundTasks" "BackgroundTasks_BGAppRefreshTask" "BackgroundTasks_BGAppRefreshTaskRequest" "BackgroundTasks_BGProcessingTask" "BackgroundTasks_BGProcessingTaskRequest" "BackgroundTasks_BGTask" "BackgroundTasks_BGTaskRequest" "BackgroundTasks_BGTaskScheduler" ];
          "BusinessChat" = [ "AppKit" "Foundation" ];
          "BusinessChat_BCChatButton" = [ "AppKit_NSControl" ];
          "BusinessChat_all" = [ "BusinessChat" "BusinessChat_BCChatAction" "BusinessChat_BCChatButton" ];
          "CallKit" = [ "Foundation" ];
          "CallKit_CXAnswerCallAction" = [ "CallKit_CXCallAction" ];
          "CallKit_CXCallAction" = [ "CallKit_CXAction" ];
          "CallKit_CXCallDirectoryExtensionContext" = [ "Foundation_NSExtensionContext" ];
          "CallKit_CXEndCallAction" = [ "CallKit_CXCallAction" ];
          "CallKit_CXPlayDTMFCallAction" = [ "CallKit_CXCallAction" ];
          "CallKit_CXSetGroupCallAction" = [ "CallKit_CXCallAction" ];
          "CallKit_CXSetHeldCallAction" = [ "CallKit_CXCallAction" ];
          "CallKit_CXSetMutedCallAction" = [ "CallKit_CXCallAction" ];
          "CallKit_CXStartCallAction" = [ "CallKit_CXCallAction" ];
          "CallKit_all" = [ "CallKit" "CallKit_CXAction" "CallKit_CXAnswerCallAction" "CallKit_CXCall" "CallKit_CXCallAction" "CallKit_CXCallController" "CallKit_CXCallDirectoryExtensionContext" "CallKit_CXCallDirectoryManager" "CallKit_CXCallDirectoryProvider" "CallKit_CXCallObserver" "CallKit_CXCallUpdate" "CallKit_CXEndCallAction" "CallKit_CXHandle" "CallKit_CXPlayDTMFCallAction" "CallKit_CXProvider" "CallKit_CXProviderConfiguration" "CallKit_CXSetGroupCallAction" "CallKit_CXSetHeldCallAction" "CallKit_CXSetMutedCallAction" "CallKit_CXStartCallAction" "CallKit_CXTransaction" ];
          "ClassKit" = [ "Foundation" ];
          "ClassKit_CLSActivity" = [ "ClassKit_CLSObject" ];
          "ClassKit_CLSActivityItem" = [ "ClassKit_CLSObject" ];
          "ClassKit_CLSBinaryItem" = [ "ClassKit_CLSActivityItem" ];
          "ClassKit_CLSContext" = [ "ClassKit_CLSObject" ];
          "ClassKit_CLSProgressReportingCapability" = [ "ClassKit_CLSObject" ];
          "ClassKit_CLSQuantityItem" = [ "ClassKit_CLSActivityItem" ];
          "ClassKit_CLSScoreItem" = [ "ClassKit_CLSActivityItem" ];
          "ClassKit_all" = [ "ClassKit" "ClassKit_CLSActivity" "ClassKit_CLSActivityItem" "ClassKit_CLSBinaryItem" "ClassKit_CLSContext" "ClassKit_CLSDataStore" "ClassKit_CLSObject" "ClassKit_CLSProgressReportingCapability" "ClassKit_CLSQuantityItem" "ClassKit_CLSScoreItem" ];
          "CloudKit" = [ "CoreLocation" "Foundation" "CloudKit_CKShare" ];
          "CloudKit_CKAcceptSharesOperation" = [ "CloudKit_CKOperation" ];
          "CloudKit_CKDatabaseNotification" = [ "CloudKit_CKNotification" ];
          "CloudKit_CKDatabaseOperation" = [ "CloudKit_CKOperation" ];
          "CloudKit_CKDatabaseSubscription" = [ "CloudKit_CKSubscription" ];
          "CloudKit_CKDiscoverAllUserIdentitiesOperation" = [ "CloudKit_CKOperation" ];
          "CloudKit_CKDiscoverUserIdentitiesOperation" = [ "CloudKit_CKOperation" ];
          "CloudKit_CKFetchDatabaseChangesOperation" = [ "CloudKit_CKDatabaseOperation" ];
          "CloudKit_CKFetchNotificationChangesOperation" = [ "CloudKit_CKOperation" ];
          "CloudKit_CKFetchRecordChangesOperation" = [ "CloudKit_CKDatabaseOperation" ];
          "CloudKit_CKFetchRecordZoneChangesOperation" = [ "CloudKit_CKDatabaseOperation" ];
          "CloudKit_CKFetchRecordZonesOperation" = [ "CloudKit_CKDatabaseOperation" ];
          "CloudKit_CKFetchRecordsOperation" = [ "CloudKit_CKDatabaseOperation" ];
          "CloudKit_CKFetchShareMetadataOperation" = [ "CloudKit_CKOperation" ];
          "CloudKit_CKFetchShareParticipantsOperation" = [ "CloudKit_CKOperation" ];
          "CloudKit_CKFetchSubscriptionsOperation" = [ "CloudKit_CKDatabaseOperation" ];
          "CloudKit_CKFetchWebAuthTokenOperation" = [ "CloudKit_CKDatabaseOperation" ];
          "CloudKit_CKLocationSortDescriptor" = [ "Foundation_NSSortDescriptor" ];
          "CloudKit_CKMarkNotificationsReadOperation" = [ "CloudKit_CKOperation" ];
          "CloudKit_CKModifyBadgeOperation" = [ "CloudKit_CKOperation" ];
          "CloudKit_CKModifyRecordZonesOperation" = [ "CloudKit_CKDatabaseOperation" ];
          "CloudKit_CKModifyRecordsOperation" = [ "CloudKit_CKDatabaseOperation" ];
          "CloudKit_CKModifySubscriptionsOperation" = [ "CloudKit_CKDatabaseOperation" ];
          "CloudKit_CKOperation" = [ "Foundation_NSOperation" ];
          "CloudKit_CKQueryNotification" = [ "CloudKit_CKNotification" ];
          "CloudKit_CKQueryOperation" = [ "CloudKit_CKDatabaseOperation" ];
          "CloudKit_CKQuerySubscription" = [ "CloudKit_CKSubscription" ];
          "CloudKit_CKRecordZoneNotification" = [ "CloudKit_CKNotification" ];
          "CloudKit_CKRecordZoneSubscription" = [ "CloudKit_CKSubscription" ];
          "CloudKit_CKShare" = [ "CloudKit_CKRecord" ];
          "CloudKit_all" = [ "CloudKit" "CloudKit_CKAcceptSharesOperation" "CloudKit_CKAllowedSharingOptions" "CloudKit_CKAsset" "CloudKit_CKContainer" "CloudKit_CKDatabase" "CloudKit_CKDatabaseNotification" "CloudKit_CKDatabaseOperation" "CloudKit_CKDatabaseSubscription" "CloudKit_CKDiscoverAllUserIdentitiesOperation" "CloudKit_CKDiscoverUserIdentitiesOperation" "CloudKit_CKFetchDatabaseChangesOperation" "CloudKit_CKFetchNotificationChangesOperation" "CloudKit_CKFetchRecordChangesOperation" "CloudKit_CKFetchRecordZoneChangesConfiguration" "CloudKit_CKFetchRecordZoneChangesOperation" "CloudKit_CKFetchRecordZoneChangesOptions" "CloudKit_CKFetchRecordZonesOperation" "CloudKit_CKFetchRecordsOperation" "CloudKit_CKFetchShareMetadataOperation" "CloudKit_CKFetchShareParticipantsOperation" "CloudKit_CKFetchSubscriptionsOperation" "CloudKit_CKFetchWebAuthTokenOperation" "CloudKit_CKLocationSortDescriptor" "CloudKit_CKMarkNotificationsReadOperation" "CloudKit_CKModifyBadgeOperation" "CloudKit_CKModifyRecordZonesOperation" "CloudKit_CKModifyRecordsOperation" "CloudKit_CKModifySubscriptionsOperation" "CloudKit_CKNotification" "CloudKit_CKNotificationID" "CloudKit_CKNotificationInfo" "CloudKit_CKOperation" "CloudKit_CKOperationConfiguration" "CloudKit_CKOperationGroup" "CloudKit_CKQuery" "CloudKit_CKQueryCursor" "CloudKit_CKQueryNotification" "CloudKit_CKQueryOperation" "CloudKit_CKQuerySubscription" "CloudKit_CKRecord" "CloudKit_CKRecordID" "CloudKit_CKRecordZone" "CloudKit_CKRecordZoneID" "CloudKit_CKRecordZoneNotification" "CloudKit_CKRecordZoneSubscription" "CloudKit_CKReference" "CloudKit_CKServerChangeToken" "CloudKit_CKShare" "CloudKit_CKShareMetadata" "CloudKit_CKShareParticipant" "CloudKit_CKSubscription" "CloudKit_CKSystemSharingUIObserver" "CloudKit_CKUserIdentity" "CloudKit_CKUserIdentityLookupInfo" ];
          "Contacts" = [ "Foundation" ];
          "Contacts_CNChangeHistoryAddContactEvent" = [ "Contacts_CNChangeHistoryEvent" ];
          "Contacts_CNChangeHistoryAddGroupEvent" = [ "Contacts_CNChangeHistoryEvent" ];
          "Contacts_CNChangeHistoryAddMemberToGroupEvent" = [ "Contacts_CNChangeHistoryEvent" ];
          "Contacts_CNChangeHistoryAddSubgroupToGroupEvent" = [ "Contacts_CNChangeHistoryEvent" ];
          "Contacts_CNChangeHistoryDeleteContactEvent" = [ "Contacts_CNChangeHistoryEvent" ];
          "Contacts_CNChangeHistoryDeleteGroupEvent" = [ "Contacts_CNChangeHistoryEvent" ];
          "Contacts_CNChangeHistoryDropEverythingEvent" = [ "Contacts_CNChangeHistoryEvent" ];
          "Contacts_CNChangeHistoryFetchRequest" = [ "Contacts_CNFetchRequest" ];
          "Contacts_CNChangeHistoryRemoveMemberFromGroupEvent" = [ "Contacts_CNChangeHistoryEvent" ];
          "Contacts_CNChangeHistoryRemoveSubgroupFromGroupEvent" = [ "Contacts_CNChangeHistoryEvent" ];
          "Contacts_CNChangeHistoryUpdateContactEvent" = [ "Contacts_CNChangeHistoryEvent" ];
          "Contacts_CNChangeHistoryUpdateGroupEvent" = [ "Contacts_CNChangeHistoryEvent" ];
          "Contacts_CNContactFetchRequest" = [ "Contacts_CNFetchRequest" ];
          "Contacts_CNContactFormatter" = [ "Foundation_NSFormatter" ];
          "Contacts_CNMutableContact" = [ "Contacts_CNContact" ];
          "Contacts_CNMutableGroup" = [ "Contacts_CNGroup" ];
          "Contacts_CNMutablePostalAddress" = [ "Contacts_CNPostalAddress" ];
          "Contacts_CNPostalAddressFormatter" = [ "Foundation_NSFormatter" ];
          "Contacts_all" = [ "Contacts" "Contacts_CNChangeHistoryAddContactEvent" "Contacts_CNChangeHistoryAddGroupEvent" "Contacts_CNChangeHistoryAddMemberToGroupEvent" "Contacts_CNChangeHistoryAddSubgroupToGroupEvent" "Contacts_CNChangeHistoryDeleteContactEvent" "Contacts_CNChangeHistoryDeleteGroupEvent" "Contacts_CNChangeHistoryDropEverythingEvent" "Contacts_CNChangeHistoryEvent" "Contacts_CNChangeHistoryFetchRequest" "Contacts_CNChangeHistoryRemoveMemberFromGroupEvent" "Contacts_CNChangeHistoryRemoveSubgroupFromGroupEvent" "Contacts_CNChangeHistoryUpdateContactEvent" "Contacts_CNChangeHistoryUpdateGroupEvent" "Contacts_CNContact" "Contacts_CNContactFetchRequest" "Contacts_CNContactFormatter" "Contacts_CNContactProperty" "Contacts_CNContactRelation" "Contacts_CNContactStore" "Contacts_CNContactVCardSerialization" "Contacts_CNContactsUserDefaults" "Contacts_CNContainer" "Contacts_CNFetchRequest" "Contacts_CNFetchResult" "Contacts_CNGroup" "Contacts_CNInstantMessageAddress" "Contacts_CNLabeledValue" "Contacts_CNMutableContact" "Contacts_CNMutableGroup" "Contacts_CNMutablePostalAddress" "Contacts_CNPhoneNumber" "Contacts_CNPostalAddress" "Contacts_CNPostalAddressFormatter" "Contacts_CNSaveRequest" "Contacts_CNSocialProfile" ];
          "CoreAnimation" = [ "Foundation" ];
          "CoreAnimation_CAAnimationGroup" = [ "CoreAnimation_CAAnimation" ];
          "CoreAnimation_CABasicAnimation" = [ "CoreAnimation_CAPropertyAnimation" ];
          "CoreAnimation_CAEmitterLayer" = [ "CoreAnimation_CALayer" ];
          "CoreAnimation_CAGradientLayer" = [ "CoreAnimation_CALayer" ];
          "CoreAnimation_CAKeyframeAnimation" = [ "CoreAnimation_CAPropertyAnimation" ];
          "CoreAnimation_CAPropertyAnimation" = [ "CoreAnimation_CAAnimation" ];
          "CoreAnimation_CAReplicatorLayer" = [ "CoreAnimation_CALayer" ];
          "CoreAnimation_CAScrollLayer" = [ "CoreAnimation_CALayer" ];
          "CoreAnimation_CAShapeLayer" = [ "CoreAnimation_CALayer" ];
          "CoreAnimation_CASpringAnimation" = [ "CoreAnimation_CABasicAnimation" ];
          "CoreAnimation_CATextLayer" = [ "CoreAnimation_CALayer" ];
          "CoreAnimation_CATiledLayer" = [ "CoreAnimation_CALayer" ];
          "CoreAnimation_CATransformLayer" = [ "CoreAnimation_CALayer" ];
          "CoreAnimation_CATransition" = [ "CoreAnimation_CAAnimation" ];
          "CoreAnimation_all" = [ "CoreAnimation" "CoreAnimation_CAAnimation" "CoreAnimation_CAAnimationGroup" "CoreAnimation_CABasicAnimation" "CoreAnimation_CAConstraint" "CoreAnimation_CAConstraintLayoutManager" "CoreAnimation_CADisplayLink" "CoreAnimation_CAEDRMetadata" "CoreAnimation_CAEmitterCell" "CoreAnimation_CAEmitterLayer" "CoreAnimation_CAGradientLayer" "CoreAnimation_CAKeyframeAnimation" "CoreAnimation_CALayer" "CoreAnimation_CAMediaTimingFunction" "CoreAnimation_CAPropertyAnimation" "CoreAnimation_CARemoteLayerClient" "CoreAnimation_CARemoteLayerServer" "CoreAnimation_CARenderer" "CoreAnimation_CAReplicatorLayer" "CoreAnimation_CAScrollLayer" "CoreAnimation_CAShapeLayer" "CoreAnimation_CASpringAnimation" "CoreAnimation_CATextLayer" "CoreAnimation_CATiledLayer" "CoreAnimation_CATransaction" "CoreAnimation_CATransformLayer" "CoreAnimation_CATransition" "CoreAnimation_CAValueFunction" ];
          "CoreData" = [ "Foundation" "CoreData_NSAsynchronousFetchResult" ];
          "CoreData_NSAsynchronousFetchRequest" = [ "CoreData_NSPersistentStoreRequest" ];
          "CoreData_NSAsynchronousFetchResult" = [ "CoreData_NSPersistentStoreAsynchronousResult" ];
          "CoreData_NSAtomicStore" = [ "CoreData_NSPersistentStore" ];
          "CoreData_NSAttributeDescription" = [ "CoreData_NSPropertyDescription" ];
          "CoreData_NSBatchDeleteRequest" = [ "CoreData_NSPersistentStoreRequest" ];
          "CoreData_NSBatchDeleteResult" = [ "CoreData_NSPersistentStoreResult" ];
          "CoreData_NSBatchInsertRequest" = [ "CoreData_NSPersistentStoreRequest" ];
          "CoreData_NSBatchInsertResult" = [ "CoreData_NSPersistentStoreResult" ];
          "CoreData_NSBatchUpdateRequest" = [ "CoreData_NSPersistentStoreRequest" ];
          "CoreData_NSBatchUpdateResult" = [ "CoreData_NSPersistentStoreResult" ];
          "CoreData_NSDerivedAttributeDescription" = [ "CoreData_NSAttributeDescription" ];
          "CoreData_NSExpressionDescription" = [ "CoreData_NSPropertyDescription" ];
          "CoreData_NSFetchRequest" = [ "CoreData_NSPersistentStoreRequest" ];
          "CoreData_NSFetchRequestExpression" = [ "Foundation_NSExpression" ];
          "CoreData_NSFetchedPropertyDescription" = [ "CoreData_NSPropertyDescription" ];
          "CoreData_NSIncrementalStore" = [ "CoreData_NSPersistentStore" ];
          "CoreData_NSPersistentCloudKitContainer" = [ "CoreData_NSPersistentContainer" ];
          "CoreData_NSPersistentCloudKitContainerEventRequest" = [ "CoreData_NSPersistentStoreRequest" ];
          "CoreData_NSPersistentCloudKitContainerEventResult" = [ "CoreData_NSPersistentStoreResult" ];
          "CoreData_NSPersistentHistoryChangeRequest" = [ "CoreData_NSPersistentStoreRequest" ];
          "CoreData_NSPersistentHistoryResult" = [ "CoreData_NSPersistentStoreResult" ];
          "CoreData_NSPersistentStoreAsynchronousResult" = [ "CoreData_NSPersistentStoreResult" ];
          "CoreData_NSRelationshipDescription" = [ "CoreData_NSPropertyDescription" ];
          "CoreData_NSSaveChangesRequest" = [ "CoreData_NSPersistentStoreRequest" ];
          "CoreData_all" = [ "CoreData" "CoreData_NSAsynchronousFetchRequest" "CoreData_NSAsynchronousFetchResult" "CoreData_NSAtomicStore" "CoreData_NSAtomicStoreCacheNode" "CoreData_NSAttributeDescription" "CoreData_NSBatchDeleteRequest" "CoreData_NSBatchDeleteResult" "CoreData_NSBatchInsertRequest" "CoreData_NSBatchInsertResult" "CoreData_NSBatchUpdateRequest" "CoreData_NSBatchUpdateResult" "CoreData_NSConstraintConflict" "CoreData_NSCoreDataCoreSpotlightDelegate" "CoreData_NSDerivedAttributeDescription" "CoreData_NSEntityDescription" "CoreData_NSEntityMapping" "CoreData_NSEntityMigrationPolicy" "CoreData_NSExpressionDescription" "CoreData_NSFetchIndexDescription" "CoreData_NSFetchIndexElementDescription" "CoreData_NSFetchRequest" "CoreData_NSFetchRequestExpression" "CoreData_NSFetchedPropertyDescription" "CoreData_NSFetchedResultsController" "CoreData_NSIncrementalStore" "CoreData_NSIncrementalStoreNode" "CoreData_NSManagedObject" "CoreData_NSManagedObjectContext" "CoreData_NSManagedObjectID" "CoreData_NSManagedObjectModel" "CoreData_NSMappingModel" "CoreData_NSMergeConflict" "CoreData_NSMergePolicy" "CoreData_NSMigrationManager" "CoreData_NSPersistentCloudKitContainer" "CoreData_NSPersistentCloudKitContainerEvent" "CoreData_NSPersistentCloudKitContainerEventRequest" "CoreData_NSPersistentCloudKitContainerEventResult" "CoreData_NSPersistentCloudKitContainerOptions" "CoreData_NSPersistentContainer" "CoreData_NSPersistentHistoryChange" "CoreData_NSPersistentHistoryChangeRequest" "CoreData_NSPersistentHistoryResult" "CoreData_NSPersistentHistoryToken" "CoreData_NSPersistentHistoryTransaction" "CoreData_NSPersistentStore" "CoreData_NSPersistentStoreAsynchronousResult" "CoreData_NSPersistentStoreCoordinator" "CoreData_NSPersistentStoreDescription" "CoreData_NSPersistentStoreRequest" "CoreData_NSPersistentStoreResult" "CoreData_NSPropertyDescription" "CoreData_NSPropertyMapping" "CoreData_NSQueryGenerationToken" "CoreData_NSRelationshipDescription" "CoreData_NSSaveChangesRequest" ];
          "CoreLocation" = [ "Contacts" "Foundation" "CoreLocation_CLPlacemark" ];
          "CoreLocation_CLBeaconRegion" = [ "CoreLocation_CLRegion" ];
          "CoreLocation_CLCircularRegion" = [ "CoreLocation_CLRegion" ];
          "CoreLocation_all" = [ "CoreLocation" "CoreLocation_CLBeacon" "CoreLocation_CLBeaconIdentityConstraint" "CoreLocation_CLBeaconRegion" "CoreLocation_CLCircularRegion" "CoreLocation_CLFloor" "CoreLocation_CLGeocoder" "CoreLocation_CLHeading" "CoreLocation_CLLocation" "CoreLocation_CLLocationManager" "CoreLocation_CLLocationSourceInformation" "CoreLocation_CLPlacemark" "CoreLocation_CLRegion" "CoreLocation_CLVisit" ];
          "DataDetection" = [ "Foundation" ];
          "DataDetection_DDMatchCalendarEvent" = [ "DataDetection_DDMatch" ];
          "DataDetection_DDMatchEmailAddress" = [ "DataDetection_DDMatch" ];
          "DataDetection_DDMatchFlightNumber" = [ "DataDetection_DDMatch" ];
          "DataDetection_DDMatchLink" = [ "DataDetection_DDMatch" ];
          "DataDetection_DDMatchMoneyAmount" = [ "DataDetection_DDMatch" ];
          "DataDetection_DDMatchPhoneNumber" = [ "DataDetection_DDMatch" ];
          "DataDetection_DDMatchPostalAddress" = [ "DataDetection_DDMatch" ];
          "DataDetection_DDMatchShipmentTrackingNumber" = [ "DataDetection_DDMatch" ];
          "DataDetection_all" = [ "DataDetection" "DataDetection_DDMatch" "DataDetection_DDMatchCalendarEvent" "DataDetection_DDMatchEmailAddress" "DataDetection_DDMatchFlightNumber" "DataDetection_DDMatchLink" "DataDetection_DDMatchMoneyAmount" "DataDetection_DDMatchPhoneNumber" "DataDetection_DDMatchPostalAddress" "DataDetection_DDMatchShipmentTrackingNumber" ];
          "DeviceCheck" = [ "Foundation" ];
          "DeviceCheck_all" = [ "DeviceCheck" "DeviceCheck_DCAppAttestService" "DeviceCheck_DCDevice" ];
          "EventKit" = [ "AppKit" "CoreLocation" "Foundation" "MapKit" "EventKit_EKEvent" ];
          "EventKit_EKAlarm" = [ "EventKit_EKObject" ];
          "EventKit_EKCalendar" = [ "EventKit_EKObject" ];
          "EventKit_EKCalendarItem" = [ "EventKit_EKObject" ];
          "EventKit_EKEvent" = [ "EventKit_EKCalendarItem" ];
          "EventKit_EKParticipant" = [ "EventKit_EKObject" ];
          "EventKit_EKRecurrenceRule" = [ "EventKit_EKObject" ];
          "EventKit_EKReminder" = [ "EventKit_EKCalendarItem" ];
          "EventKit_EKSource" = [ "EventKit_EKObject" ];
          "EventKit_EKStructuredLocation" = [ "EventKit_EKObject" ];
          "EventKit_all" = [ "EventKit" "EventKit_EKAlarm" "EventKit_EKCalendar" "EventKit_EKCalendarItem" "EventKit_EKEvent" "EventKit_EKEventStore" "EventKit_EKObject" "EventKit_EKParticipant" "EventKit_EKRecurrenceDayOfWeek" "EventKit_EKRecurrenceEnd" "EventKit_EKRecurrenceRule" "EventKit_EKReminder" "EventKit_EKSource" "EventKit_EKStructuredLocation" "EventKit_EKVirtualConferenceDescriptor" "EventKit_EKVirtualConferenceProvider" "EventKit_EKVirtualConferenceRoomTypeDescriptor" "EventKit_EKVirtualConferenceURLDescriptor" ];
          "ExceptionHandling" = [ "Foundation" ];
          "ExceptionHandling_all" = [ "ExceptionHandling" "ExceptionHandling_NSExceptionHandler" ];
          "ExtensionKit" = [ "AppKit" "Foundation" ];
          "ExtensionKit_EXAppExtensionBrowserViewController" = [ "AppKit_NSViewController" ];
          "ExtensionKit_EXHostViewController" = [ "AppKit_NSViewController" ];
          "ExtensionKit_all" = [ "ExtensionKit" "ExtensionKit_EXAppExtensionBrowserViewController" "ExtensionKit_EXHostViewController" ];
          "ExternalAccessory" = [ "Foundation" ];
          "ExternalAccessory_all" = [ "ExternalAccessory" "ExternalAccessory_EAAccessory" "ExternalAccessory_EAAccessoryManager" "ExternalAccessory_EASession" "ExternalAccessory_EAWiFiUnconfiguredAccessory" "ExternalAccessory_EAWiFiUnconfiguredAccessoryBrowser" ];
          "FileProvider" = [ "AppKit" "Foundation" "UniformTypeIdentifiers" ];
          "FileProviderUI" = [ "AppKit" "FileProvider" "Foundation" ];
          "FileProviderUI_FPUIActionExtensionContext" = [ "Foundation_NSExtensionContext" ];
          "FileProviderUI_FPUIActionExtensionViewController" = [ "AppKit_NSViewController" ];
          "FileProviderUI_all" = [ "FileProviderUI" "FileProviderUI_FPUIActionExtensionContext" "FileProviderUI_FPUIActionExtensionViewController" ];
          "FileProvider_all" = [ "FileProvider" "FileProvider_NSFileProviderDomain" "FileProvider_NSFileProviderDomainVersion" "FileProvider_NSFileProviderExtension" "FileProvider_NSFileProviderItemVersion" "FileProvider_NSFileProviderManager" "FileProvider_NSFileProviderRequest" ];
          "Foundation" = [ "objective-c" "block" "Foundation_NSError" "Foundation_NSAppleEventDescriptor" "Foundation_NSHashTable" "Foundation_NSMapTable" "Foundation_NSProgress" "Foundation_NSString" "Foundation_NSDictionary" "Foundation_NSEnumerator" ];
          "Foundation_NSArchiver" = [ "Foundation_NSCoder" ];
          "Foundation_NSBlockOperation" = [ "Foundation_NSOperation" ];
          "Foundation_NSByteCountFormatter" = [ "Foundation_NSFormatter" ];
          "Foundation_NSCalendarDate" = [ "Foundation_NSDate" ];
          "Foundation_NSCloneCommand" = [ "Foundation_NSScriptCommand" ];
          "Foundation_NSCloseCommand" = [ "Foundation_NSScriptCommand" ];
          "Foundation_NSComparisonPredicate" = [ "Foundation_NSPredicate" ];
          "Foundation_NSCompoundPredicate" = [ "Foundation_NSPredicate" ];
          "Foundation_NSConstantString" = [ "Foundation_NSSimpleCString" ];
          "Foundation_NSCountCommand" = [ "Foundation_NSScriptCommand" ];
          "Foundation_NSCountedSet" = [ "Foundation_NSMutableSet" ];
          "Foundation_NSCreateCommand" = [ "Foundation_NSScriptCommand" ];
          "Foundation_NSDataDetector" = [ "Foundation_NSRegularExpression" ];
          "Foundation_NSDateComponentsFormatter" = [ "Foundation_NSFormatter" ];
          "Foundation_NSDateFormatter" = [ "Foundation_NSFormatter" ];
          "Foundation_NSDateIntervalFormatter" = [ "Foundation_NSFormatter" ];
          "Foundation_NSDecimalNumber" = [ "Foundation_NSNumber" ];
          "Foundation_NSDeleteCommand" = [ "Foundation_NSScriptCommand" ];
          "Foundation_NSDimension" = [ "Foundation_NSUnit" ];
          "Foundation_NSDirectoryEnumerator" = [ "Foundation_NSEnumerator" ];
          "Foundation_NSDistantObject" = [ "Foundation_NSProxy" ];
          "Foundation_NSDistributedNotificationCenter" = [ "Foundation_NSNotificationCenter" ];
          "Foundation_NSEnergyFormatter" = [ "Foundation_NSFormatter" ];
          "Foundation_NSExistsCommand" = [ "Foundation_NSScriptCommand" ];
          "Foundation_NSGetCommand" = [ "Foundation_NSScriptCommand" ];
          "Foundation_NSHTTPURLResponse" = [ "Foundation_NSURLResponse" ];
          "Foundation_NSISO8601DateFormatter" = [ "Foundation_NSFormatter" ];
          "Foundation_NSIndexSpecifier" = [ "Foundation_NSScriptObjectSpecifier" ];
          "Foundation_NSInflectionRuleExplicit" = [ "Foundation_NSInflectionRule" ];
          "Foundation_NSInputStream" = [ "Foundation_NSStream" ];
          "Foundation_NSInvocationOperation" = [ "Foundation_NSOperation" ];
          "Foundation_NSKeyedArchiver" = [ "Foundation_NSCoder" ];
          "Foundation_NSKeyedUnarchiver" = [ "Foundation_NSCoder" ];
          "Foundation_NSLengthFormatter" = [ "Foundation_NSFormatter" ];
          "Foundation_NSListFormatter" = [ "Foundation_NSFormatter" ];
          "Foundation_NSLogicalTest" = [ "Foundation_NSScriptWhoseTest" ];
          "Foundation_NSMachBootstrapServer" = [ "Foundation_NSPortNameServer" ];
          "Foundation_NSMachPort" = [ "Foundation_NSPort" ];
          "Foundation_NSMassFormatter" = [ "Foundation_NSFormatter" ];
          "Foundation_NSMeasurementFormatter" = [ "Foundation_NSFormatter" ];
          "Foundation_NSMessagePort" = [ "Foundation_NSPort" ];
          "Foundation_NSMessagePortNameServer" = [ "Foundation_NSPortNameServer" ];
          "Foundation_NSMiddleSpecifier" = [ "Foundation_NSScriptObjectSpecifier" ];
          "Foundation_NSMoveCommand" = [ "Foundation_NSScriptCommand" ];
          "Foundation_NSMutableArray" = [ "Foundation_NSArray" ];
          "Foundation_NSMutableAttributedString" = [ "Foundation_NSAttributedString" ];
          "Foundation_NSMutableCharacterSet" = [ "Foundation_NSCharacterSet" ];
          "Foundation_NSMutableData" = [ "Foundation_NSData" ];
          "Foundation_NSMutableDictionary" = [ "Foundation_NSDictionary" ];
          "Foundation_NSMutableIndexSet" = [ "Foundation_NSIndexSet" ];
          "Foundation_NSMutableOrderedSet" = [ "Foundation_NSOrderedSet" ];
          "Foundation_NSMutableSet" = [ "Foundation_NSSet" ];
          "Foundation_NSMutableString" = [ "Foundation_NSString" ];
          "Foundation_NSMutableURLRequest" = [ "Foundation_NSURLRequest" ];
          "Foundation_NSNameSpecifier" = [ "Foundation_NSScriptObjectSpecifier" ];
          "Foundation_NSNumber" = [ "Foundation_NSValue" ];
          "Foundation_NSNumberFormatter" = [ "Foundation_NSFormatter" ];
          "Foundation_NSOutputStream" = [ "Foundation_NSStream" ];
          "Foundation_NSPersonNameComponentsFormatter" = [ "Foundation_NSFormatter" ];
          "Foundation_NSPortCoder" = [ "Foundation_NSCoder" ];
          "Foundation_NSPropertySpecifier" = [ "Foundation_NSScriptObjectSpecifier" ];
          "Foundation_NSProtocolChecker" = [ "Foundation_NSProxy" ];
          "Foundation_NSPurgeableData" = [ "Foundation_NSMutableData" ];
          "Foundation_NSQuitCommand" = [ "Foundation_NSScriptCommand" ];
          "Foundation_NSRandomSpecifier" = [ "Foundation_NSScriptObjectSpecifier" ];
          "Foundation_NSRangeSpecifier" = [ "Foundation_NSScriptObjectSpecifier" ];
          "Foundation_NSRelativeDateTimeFormatter" = [ "Foundation_NSFormatter" ];
          "Foundation_NSRelativeSpecifier" = [ "Foundation_NSScriptObjectSpecifier" ];
          "Foundation_NSScriptClassDescription" = [ "Foundation_NSClassDescription" ];
          "Foundation_NSSecureUnarchiveFromDataTransformer" = [ "Foundation_NSValueTransformer" ];
          "Foundation_NSSetCommand" = [ "Foundation_NSScriptCommand" ];
          "Foundation_NSSimpleCString" = [ "Foundation_NSString" ];
          "Foundation_NSSocketPort" = [ "Foundation_NSPort" ];
          "Foundation_NSSocketPortNameServer" = [ "Foundation_NSPortNameServer" ];
          "Foundation_NSSpecifierTest" = [ "Foundation_NSScriptWhoseTest" ];
          "Foundation_NSURLSessionDataTask" = [ "Foundation_NSURLSessionTask" ];
          "Foundation_NSURLSessionDownloadTask" = [ "Foundation_NSURLSessionTask" ];
          "Foundation_NSURLSessionStreamTask" = [ "Foundation_NSURLSessionTask" ];
          "Foundation_NSURLSessionUploadTask" = [ "Foundation_NSURLSessionDataTask" ];
          "Foundation_NSURLSessionWebSocketTask" = [ "Foundation_NSURLSessionTask" ];
          "Foundation_NSUnarchiver" = [ "Foundation_NSCoder" ];
          "Foundation_NSUniqueIDSpecifier" = [ "Foundation_NSScriptObjectSpecifier" ];
          "Foundation_NSUnitAcceleration" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitAngle" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitArea" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitConcentrationMass" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitConverterLinear" = [ "Foundation_NSUnitConverter" ];
          "Foundation_NSUnitDispersion" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitDuration" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitElectricCharge" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitElectricCurrent" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitElectricPotentialDifference" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitElectricResistance" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitEnergy" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitFrequency" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitFuelEfficiency" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitIlluminance" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitInformationStorage" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitLength" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitMass" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitPower" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitPressure" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitSpeed" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitTemperature" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitVolume" = [ "Foundation_NSDimension" ];
          "Foundation_NSUserAppleScriptTask" = [ "Foundation_NSUserScriptTask" ];
          "Foundation_NSUserAutomatorTask" = [ "Foundation_NSUserScriptTask" ];
          "Foundation_NSUserUnixTask" = [ "Foundation_NSUserScriptTask" ];
          "Foundation_NSWhoseSpecifier" = [ "Foundation_NSScriptObjectSpecifier" ];
          "Foundation_NSXMLDTD" = [ "Foundation_NSXMLNode" ];
          "Foundation_NSXMLDTDNode" = [ "Foundation_NSXMLNode" ];
          "Foundation_NSXMLDocument" = [ "Foundation_NSXMLNode" ];
          "Foundation_NSXMLElement" = [ "Foundation_NSXMLNode" ];
          "Foundation_NSXPCCoder" = [ "Foundation_NSCoder" ];
          "Foundation_all" = [ "Foundation" "Foundation_NSAffineTransform" "Foundation_NSAppleEventDescriptor" "Foundation_NSAppleEventManager" "Foundation_NSAppleScript" "Foundation_NSArchiver" "Foundation_NSArray" "Foundation_NSAssertionHandler" "Foundation_NSAttributedString" "Foundation_NSAttributedStringMarkdownParsingOptions" "Foundation_NSAttributedStringMarkdownSourcePosition" "Foundation_NSAutoreleasePool" "Foundation_NSBackgroundActivityScheduler" "Foundation_NSBlockOperation" "Foundation_NSBundle" "Foundation_NSBundleResourceRequest" "Foundation_NSByteCountFormatter" "Foundation_NSCache" "Foundation_NSCachedURLResponse" "Foundation_NSCalendar" "Foundation_NSCalendarDate" "Foundation_NSCharacterSet" "Foundation_NSClassDescription" "Foundation_NSCloneCommand" "Foundation_NSCloseCommand" "Foundation_NSCoder" "Foundation_NSComparisonPredicate" "Foundation_NSCompoundPredicate" "Foundation_NSCondition" "Foundation_NSConditionLock" "Foundation_NSConnection" "Foundation_NSConstantString" "Foundation_NSCountCommand" "Foundation_NSCountedSet" "Foundation_NSCreateCommand" "Foundation_NSData" "Foundation_NSDataDetector" "Foundation_NSDate" "Foundation_NSDateComponents" "Foundation_NSDateComponentsFormatter" "Foundation_NSDateFormatter" "Foundation_NSDateInterval" "Foundation_NSDateIntervalFormatter" "Foundation_NSDecimalNumber" "Foundation_NSDecimalNumberHandler" "Foundation_NSDeleteCommand" "Foundation_NSDictionary" "Foundation_NSDimension" "Foundation_NSDirectoryEnumerator" "Foundation_NSDistantObject" "Foundation_NSDistantObjectRequest" "Foundation_NSDistributedLock" "Foundation_NSDistributedNotificationCenter" "Foundation_NSEnergyFormatter" "Foundation_NSEnumerator" "Foundation_NSError" "Foundation_NSException" "Foundation_NSExistsCommand" "Foundation_NSExpression" "Foundation_NSExtensionContext" "Foundation_NSExtensionItem" "Foundation_NSFileAccessIntent" "Foundation_NSFileCoordinator" "Foundation_NSFileHandle" "Foundation_NSFileManager" "Foundation_NSFileProviderService" "Foundation_NSFileSecurity" "Foundation_NSFileVersion" "Foundation_NSFileWrapper" "Foundation_NSFormatter" "Foundation_NSGarbageCollector" "Foundation_NSGetCommand" "Foundation_NSHTTPCookie" "Foundation_NSHTTPCookieStorage" "Foundation_NSHTTPURLResponse" "Foundation_NSHashTable" "Foundation_NSHost" "Foundation_NSISO8601DateFormatter" "Foundation_NSIndexPath" "Foundation_NSIndexSet" "Foundation_NSIndexSpecifier" "Foundation_NSInflectionRule" "Foundation_NSInflectionRuleExplicit" "Foundation_NSInputStream" "Foundation_NSInvocation" "Foundation_NSInvocationOperation" "Foundation_NSItemProvider" "Foundation_NSJSONSerialization" "Foundation_NSKeyedArchiver" "Foundation_NSKeyedUnarchiver" "Foundation_NSLengthFormatter" "Foundation_NSLinguisticTagger" "Foundation_NSListFormatter" "Foundation_NSLocale" "Foundation_NSLock" "Foundation_NSLogicalTest" "Foundation_NSMachBootstrapServer" "Foundation_NSMachPort" "Foundation_NSMapTable" "Foundation_NSMassFormatter" "Foundation_NSMeasurement" "Foundation_NSMeasurementFormatter" "Foundation_NSMessagePort" "Foundation_NSMessagePortNameServer" "Foundation_NSMetadataItem" "Foundation_NSMetadataQuery" "Foundation_NSMetadataQueryAttributeValueTuple" "Foundation_NSMetadataQueryResultGroup" "Foundation_NSMethodSignature" "Foundation_NSMiddleSpecifier" "Foundation_NSMorphology" "Foundation_NSMorphologyCustomPronoun" "Foundation_NSMoveCommand" "Foundation_NSMutableArray" "Foundation_NSMutableAttributedString" "Foundation_NSMutableCharacterSet" "Foundation_NSMutableData" "Foundation_NSMutableDictionary" "Foundation_NSMutableIndexSet" "Foundation_NSMutableOrderedSet" "Foundation_NSMutableSet" "Foundation_NSMutableString" "Foundation_NSMutableURLRequest" "Foundation_NSNameSpecifier" "Foundation_NSNetService" "Foundation_NSNetServiceBrowser" "Foundation_NSNotification" "Foundation_NSNotificationCenter" "Foundation_NSNotificationQueue" "Foundation_NSNull" "Foundation_NSNumber" "Foundation_NSNumberFormatter" "Foundation_NSOperation" "Foundation_NSOperationQueue" "Foundation_NSOrderedCollectionChange" "Foundation_NSOrderedCollectionDifference" "Foundation_NSOrderedSet" "Foundation_NSOrthography" "Foundation_NSOutputStream" "Foundation_NSPersonNameComponents" "Foundation_NSPersonNameComponentsFormatter" "Foundation_NSPipe" "Foundation_NSPointerArray" "Foundation_NSPointerFunctions" "Foundation_NSPort" "Foundation_NSPortCoder" "Foundation_NSPortMessage" "Foundation_NSPortNameServer" "Foundation_NSPositionalSpecifier" "Foundation_NSPredicate" "Foundation_NSPresentationIntent" "Foundation_NSProcessInfo" "Foundation_NSProgress" "Foundation_NSPropertyListSerialization" "Foundation_NSPropertySpecifier" "Foundation_NSProtocolChecker" "Foundation_NSPurgeableData" "Foundation_NSQuitCommand" "Foundation_NSRandomSpecifier" "Foundation_NSRangeSpecifier" "Foundation_NSRecursiveLock" "Foundation_NSRegularExpression" "Foundation_NSRelativeDateTimeFormatter" "Foundation_NSRelativeSpecifier" "Foundation_NSRunLoop" "Foundation_NSScanner" "Foundation_NSScriptClassDescription" "Foundation_NSScriptCoercionHandler" "Foundation_NSScriptCommand" "Foundation_NSScriptCommandDescription" "Foundation_NSScriptExecutionContext" "Foundation_NSScriptObjectSpecifier" "Foundation_NSScriptSuiteRegistry" "Foundation_NSScriptWhoseTest" "Foundation_NSSecureUnarchiveFromDataTransformer" "Foundation_NSSet" "Foundation_NSSetCommand" "Foundation_NSSimpleCString" "Foundation_NSSocketPort" "Foundation_NSSocketPortNameServer" "Foundation_NSSortDescriptor" "Foundation_NSSpecifierTest" "Foundation_NSSpellServer" "Foundation_NSStream" "Foundation_NSString" "Foundation_NSTask" "Foundation_NSTextCheckingResult" "Foundation_NSThread" "Foundation_NSTimeZone" "Foundation_NSTimer" "Foundation_NSURL" "Foundation_NSURLAuthenticationChallenge" "Foundation_NSURLCache" "Foundation_NSURLComponents" "Foundation_NSURLConnection" "Foundation_NSURLCredential" "Foundation_NSURLCredentialStorage" "Foundation_NSURLDownload" "Foundation_NSURLHandle" "Foundation_NSURLProtectionSpace" "Foundation_NSURLProtocol" "Foundation_NSURLQueryItem" "Foundation_NSURLRequest" "Foundation_NSURLResponse" "Foundation_NSURLSession" "Foundation_NSURLSessionConfiguration" "Foundation_NSURLSessionDataTask" "Foundation_NSURLSessionDownloadTask" "Foundation_NSURLSessionStreamTask" "Foundation_NSURLSessionTask" "Foundation_NSURLSessionTaskMetrics" "Foundation_NSURLSessionTaskTransactionMetrics" "Foundation_NSURLSessionUploadTask" "Foundation_NSURLSessionWebSocketMessage" "Foundation_NSURLSessionWebSocketTask" "Foundation_NSUUID" "Foundation_NSUbiquitousKeyValueStore" "Foundation_NSUnarchiver" "Foundation_NSUndoManager" "Foundation_NSUniqueIDSpecifier" "Foundation_NSUnit" "Foundation_NSUnitAcceleration" "Foundation_NSUnitAngle" "Foundation_NSUnitArea" "Foundation_NSUnitConcentrationMass" "Foundation_NSUnitConverter" "Foundation_NSUnitConverterLinear" "Foundation_NSUnitDispersion" "Foundation_NSUnitDuration" "Foundation_NSUnitElectricCharge" "Foundation_NSUnitElectricCurrent" "Foundation_NSUnitElectricPotentialDifference" "Foundation_NSUnitElectricResistance" "Foundation_NSUnitEnergy" "Foundation_NSUnitFrequency" "Foundation_NSUnitFuelEfficiency" "Foundation_NSUnitIlluminance" "Foundation_NSUnitInformationStorage" "Foundation_NSUnitLength" "Foundation_NSUnitMass" "Foundation_NSUnitPower" "Foundation_NSUnitPressure" "Foundation_NSUnitSpeed" "Foundation_NSUnitTemperature" "Foundation_NSUnitVolume" "Foundation_NSUserActivity" "Foundation_NSUserAppleScriptTask" "Foundation_NSUserAutomatorTask" "Foundation_NSUserDefaults" "Foundation_NSUserNotification" "Foundation_NSUserNotificationAction" "Foundation_NSUserNotificationCenter" "Foundation_NSUserScriptTask" "Foundation_NSUserUnixTask" "Foundation_NSValue" "Foundation_NSValueTransformer" "Foundation_NSWhoseSpecifier" "Foundation_NSXMLDTD" "Foundation_NSXMLDTDNode" "Foundation_NSXMLDocument" "Foundation_NSXMLElement" "Foundation_NSXMLNode" "Foundation_NSXMLParser" "Foundation_NSXPCCoder" "Foundation_NSXPCConnection" "Foundation_NSXPCInterface" "Foundation_NSXPCListener" "Foundation_NSXPCListenerEndpoint" ];
          "GameController" = [ "AppKit" "Foundation" "GameController_GCControllerAxisInput" "GameController_GCControllerButtonInput" "GameController_GCControllerDirectionPad" "GameController_GCControllerTouchpad" "GameController_GCExtendedGamepad" "GameController_GCControllerElement" "GameController_GCGamepad" "GameController_GCKeyboardInput" "GameController_GCMicroGamepad" "GameController_GCMotion" "GameController_GCMouseInput" ];
          "GameController_GCControllerAxisInput" = [ "GameController_GCControllerElement" ];
          "GameController_GCControllerButtonInput" = [ "GameController_GCControllerElement" ];
          "GameController_GCControllerDirectionPad" = [ "GameController_GCControllerElement" ];
          "GameController_GCControllerTouchpad" = [ "GameController_GCControllerElement" ];
          "GameController_GCDeviceCursor" = [ "GameController_GCControllerDirectionPad" ];
          "GameController_GCDirectionalGamepad" = [ "GameController_GCMicroGamepad" ];
          "GameController_GCDualSenseAdaptiveTrigger" = [ "GameController_GCControllerButtonInput" ];
          "GameController_GCDualSenseGamepad" = [ "GameController_GCExtendedGamepad" ];
          "GameController_GCDualShockGamepad" = [ "GameController_GCExtendedGamepad" ];
          "GameController_GCEventViewController" = [ "AppKit_NSViewController" ];
          "GameController_GCExtendedGamepad" = [ "GameController_GCPhysicalInputProfile" ];
          "GameController_GCExtendedGamepadSnapshot" = [ "GameController_GCExtendedGamepad" ];
          "GameController_GCGamepad" = [ "GameController_GCPhysicalInputProfile" ];
          "GameController_GCGamepadSnapshot" = [ "GameController_GCGamepad" ];
          "GameController_GCKeyboardInput" = [ "GameController_GCPhysicalInputProfile" ];
          "GameController_GCMicroGamepad" = [ "GameController_GCPhysicalInputProfile" ];
          "GameController_GCMicroGamepadSnapshot" = [ "GameController_GCMicroGamepad" ];
          "GameController_GCMouseInput" = [ "GameController_GCPhysicalInputProfile" ];
          "GameController_GCRacingWheelInput" = [ "GameController_GCRacingWheelInputState" ];
          "GameController_GCXboxGamepad" = [ "GameController_GCExtendedGamepad" ];
          "GameController_all" = [ "GameController" "GameController_GCColor" "GameController_GCController" "GameController_GCControllerAxisInput" "GameController_GCControllerButtonInput" "GameController_GCControllerDirectionPad" "GameController_GCControllerElement" "GameController_GCControllerTouchpad" "GameController_GCDeviceBattery" "GameController_GCDeviceCursor" "GameController_GCDeviceHaptics" "GameController_GCDeviceLight" "GameController_GCDirectionalGamepad" "GameController_GCDualSenseAdaptiveTrigger" "GameController_GCDualSenseGamepad" "GameController_GCDualShockGamepad" "GameController_GCEventViewController" "GameController_GCExtendedGamepad" "GameController_GCExtendedGamepadSnapshot" "GameController_GCGamepad" "GameController_GCGamepadSnapshot" "GameController_GCGearShifterElement" "GameController_GCKeyboard" "GameController_GCKeyboardInput" "GameController_GCMicroGamepad" "GameController_GCMicroGamepadSnapshot" "GameController_GCMotion" "GameController_GCMouse" "GameController_GCMouseInput" "GameController_GCPhysicalInputElementCollection" "GameController_GCPhysicalInputProfile" "GameController_GCRacingWheel" "GameController_GCRacingWheelInput" "GameController_GCRacingWheelInputState" "GameController_GCSteeringWheelElement" "GameController_GCXboxGamepad" ];
          "GameKit" = [ "AppKit" "Foundation" "AppKit_NSViewController" ];
          "GameKit_GKAchievementChallenge" = [ "GameKit_GKChallenge" ];
          "GameKit_GKAchievementViewController" = [ "GameKit_GKGameCenterViewController" ];
          "GameKit_GKChallengesViewController" = [ "AppKit_NSViewController" ];
          "GameKit_GKCloudPlayer" = [ "GameKit_GKBasePlayer" ];
          "GameKit_GKDialogController" = [ "AppKit_NSResponder" ];
          "GameKit_GKFriendRequestComposeViewController" = [ "AppKit_NSViewController" ];
          "GameKit_GKGameCenterViewController" = [ "AppKit_NSViewController" ];
          "GameKit_GKLeaderboardViewController" = [ "GameKit_GKGameCenterViewController" ];
          "GameKit_GKLocalPlayer" = [ "GameKit_GKPlayer" ];
          "GameKit_GKMatchmakerViewController" = [ "AppKit_NSViewController" ];
          "GameKit_GKPlayer" = [ "GameKit_GKBasePlayer" ];
          "GameKit_GKScoreChallenge" = [ "GameKit_GKChallenge" ];
          "GameKit_GKTurnBasedMatchmakerViewController" = [ "AppKit_NSViewController" ];
          "GameKit_all" = [ "GameKit" "GameKit_GKAccessPoint" "GameKit_GKAchievement" "GameKit_GKAchievementChallenge" "GameKit_GKAchievementDescription" "GameKit_GKAchievementViewController" "GameKit_GKBasePlayer" "GameKit_GKChallenge" "GameKit_GKChallengeEventHandler" "GameKit_GKChallengesViewController" "GameKit_GKCloudPlayer" "GameKit_GKDialogController" "GameKit_GKFriendRequestComposeViewController" "GameKit_GKGameCenterViewController" "GameKit_GKGameSession" "GameKit_GKInvite" "GameKit_GKLeaderboard" "GameKit_GKLeaderboardEntry" "GameKit_GKLeaderboardScore" "GameKit_GKLeaderboardSet" "GameKit_GKLeaderboardViewController" "GameKit_GKLocalPlayer" "GameKit_GKMatch" "GameKit_GKMatchRequest" "GameKit_GKMatchmaker" "GameKit_GKMatchmakerViewController" "GameKit_GKNotificationBanner" "GameKit_GKPlayer" "GameKit_GKSavedGame" "GameKit_GKScore" "GameKit_GKScoreChallenge" "GameKit_GKSession" "GameKit_GKTurnBasedEventHandler" "GameKit_GKTurnBasedExchange" "GameKit_GKTurnBasedExchangeReply" "GameKit_GKTurnBasedMatch" "GameKit_GKTurnBasedMatchmakerViewController" "GameKit_GKTurnBasedParticipant" "GameKit_GKVoiceChat" "GameKit_GKVoiceChatService" ];
          "HealthKit" = [ "CoreLocation" "Foundation" "UniformTypeIdentifiers" ];
          "HealthKit_HKActivitySummaryQuery" = [ "HealthKit_HKQuery" ];
          "HealthKit_HKActivitySummaryType" = [ "HealthKit_HKObjectType" ];
          "HealthKit_HKAnchoredObjectQuery" = [ "HealthKit_HKQuery" ];
          "HealthKit_HKAudiogramSample" = [ "HealthKit_HKSample" ];
          "HealthKit_HKAudiogramSampleType" = [ "HealthKit_HKSampleType" ];
          "HealthKit_HKCDADocumentSample" = [ "HealthKit_HKDocumentSample" ];
          "HealthKit_HKCategorySample" = [ "HealthKit_HKSample" ];
          "HealthKit_HKCategoryType" = [ "HealthKit_HKSampleType" ];
          "HealthKit_HKCharacteristicType" = [ "HealthKit_HKObjectType" ];
          "HealthKit_HKClinicalRecord" = [ "HealthKit_HKSample" ];
          "HealthKit_HKClinicalType" = [ "HealthKit_HKSampleType" ];
          "HealthKit_HKContactsLensSpecification" = [ "HealthKit_HKLensSpecification" ];
          "HealthKit_HKContactsPrescription" = [ "HealthKit_HKVisionPrescription" ];
          "HealthKit_HKCorrelation" = [ "HealthKit_HKSample" ];
          "HealthKit_HKCorrelationQuery" = [ "HealthKit_HKQuery" ];
          "HealthKit_HKCorrelationType" = [ "HealthKit_HKSampleType" ];
          "HealthKit_HKCumulativeQuantitySample" = [ "HealthKit_HKQuantitySample" ];
          "HealthKit_HKCumulativeQuantitySeriesSample" = [ "HealthKit_HKCumulativeQuantitySample" ];
          "HealthKit_HKDiscreteQuantitySample" = [ "HealthKit_HKQuantitySample" ];
          "HealthKit_HKDocumentQuery" = [ "HealthKit_HKQuery" ];
          "HealthKit_HKDocumentSample" = [ "HealthKit_HKSample" ];
          "HealthKit_HKDocumentType" = [ "HealthKit_HKSampleType" ];
          "HealthKit_HKElectrocardiogram" = [ "HealthKit_HKSample" ];
          "HealthKit_HKElectrocardiogramQuery" = [ "HealthKit_HKQuery" ];
          "HealthKit_HKElectrocardiogramType" = [ "HealthKit_HKSampleType" ];
          "HealthKit_HKGlassesLensSpecification" = [ "HealthKit_HKLensSpecification" ];
          "HealthKit_HKGlassesPrescription" = [ "HealthKit_HKVisionPrescription" ];
          "HealthKit_HKHeartbeatSeriesBuilder" = [ "HealthKit_HKSeriesBuilder" ];
          "HealthKit_HKHeartbeatSeriesQuery" = [ "HealthKit_HKQuery" ];
          "HealthKit_HKHeartbeatSeriesSample" = [ "HealthKit_HKSeriesSample" ];
          "HealthKit_HKLiveWorkoutBuilder" = [ "HealthKit_HKWorkoutBuilder" ];
          "HealthKit_HKObserverQuery" = [ "HealthKit_HKQuery" ];
          "HealthKit_HKPrescriptionType" = [ "HealthKit_HKSampleType" ];
          "HealthKit_HKQuantitySample" = [ "HealthKit_HKSample" ];
          "HealthKit_HKQuantitySeriesSampleQuery" = [ "HealthKit_HKQuery" ];
          "HealthKit_HKQuantityType" = [ "HealthKit_HKSampleType" ];
          "HealthKit_HKSample" = [ "HealthKit_HKObject" ];
          "HealthKit_HKSampleQuery" = [ "HealthKit_HKQuery" ];
          "HealthKit_HKSampleType" = [ "HealthKit_HKObjectType" ];
          "HealthKit_HKSeriesSample" = [ "HealthKit_HKSample" ];
          "HealthKit_HKSeriesType" = [ "HealthKit_HKSampleType" ];
          "HealthKit_HKSourceQuery" = [ "HealthKit_HKQuery" ];
          "HealthKit_HKStatisticsCollectionQuery" = [ "HealthKit_HKQuery" ];
          "HealthKit_HKStatisticsQuery" = [ "HealthKit_HKQuery" ];
          "HealthKit_HKVerifiableClinicalRecord" = [ "HealthKit_HKSample" ];
          "HealthKit_HKVerifiableClinicalRecordQuery" = [ "HealthKit_HKQuery" ];
          "HealthKit_HKVisionPrescription" = [ "HealthKit_HKSample" ];
          "HealthKit_HKWorkout" = [ "HealthKit_HKSample" ];
          "HealthKit_HKWorkoutRoute" = [ "HealthKit_HKSeriesSample" ];
          "HealthKit_HKWorkoutRouteBuilder" = [ "HealthKit_HKSeriesBuilder" ];
          "HealthKit_HKWorkoutRouteQuery" = [ "HealthKit_HKQuery" ];
          "HealthKit_HKWorkoutType" = [ "HealthKit_HKSampleType" ];
          "HealthKit_all" = [ "HealthKit" "HealthKit_HKActivityMoveModeObject" "HealthKit_HKActivitySummary" "HealthKit_HKActivitySummaryQuery" "HealthKit_HKActivitySummaryType" "HealthKit_HKAnchoredObjectQuery" "HealthKit_HKAttachment" "HealthKit_HKAttachmentStore" "HealthKit_HKAudiogramSample" "HealthKit_HKAudiogramSampleType" "HealthKit_HKAudiogramSensitivityPoint" "HealthKit_HKBiologicalSexObject" "HealthKit_HKBloodTypeObject" "HealthKit_HKCDADocument" "HealthKit_HKCDADocumentSample" "HealthKit_HKCategorySample" "HealthKit_HKCategoryType" "HealthKit_HKCharacteristicType" "HealthKit_HKClinicalRecord" "HealthKit_HKClinicalType" "HealthKit_HKContactsLensSpecification" "HealthKit_HKContactsPrescription" "HealthKit_HKCorrelation" "HealthKit_HKCorrelationQuery" "HealthKit_HKCorrelationType" "HealthKit_HKCumulativeQuantitySample" "HealthKit_HKCumulativeQuantitySeriesSample" "HealthKit_HKDeletedObject" "HealthKit_HKDevice" "HealthKit_HKDiscreteQuantitySample" "HealthKit_HKDocumentQuery" "HealthKit_HKDocumentSample" "HealthKit_HKDocumentType" "HealthKit_HKElectrocardiogram" "HealthKit_HKElectrocardiogramQuery" "HealthKit_HKElectrocardiogramType" "HealthKit_HKElectrocardiogramVoltageMeasurement" "HealthKit_HKFHIRResource" "HealthKit_HKFHIRVersion" "HealthKit_HKFitzpatrickSkinTypeObject" "HealthKit_HKGlassesLensSpecification" "HealthKit_HKGlassesPrescription" "HealthKit_HKHealthStore" "HealthKit_HKHeartbeatSeriesBuilder" "HealthKit_HKHeartbeatSeriesQuery" "HealthKit_HKHeartbeatSeriesSample" "HealthKit_HKLensSpecification" "HealthKit_HKLiveWorkoutBuilder" "HealthKit_HKLiveWorkoutDataSource" "HealthKit_HKObject" "HealthKit_HKObjectType" "HealthKit_HKObserverQuery" "HealthKit_HKPrescriptionType" "HealthKit_HKQuantity" "HealthKit_HKQuantitySample" "HealthKit_HKQuantitySeriesSampleBuilder" "HealthKit_HKQuantitySeriesSampleQuery" "HealthKit_HKQuantityType" "HealthKit_HKQuery" "HealthKit_HKQueryAnchor" "HealthKit_HKQueryDescriptor" "HealthKit_HKSample" "HealthKit_HKSampleQuery" "HealthKit_HKSampleType" "HealthKit_HKSeriesBuilder" "HealthKit_HKSeriesSample" "HealthKit_HKSeriesType" "HealthKit_HKSource" "HealthKit_HKSourceQuery" "HealthKit_HKSourceRevision" "HealthKit_HKStatistics" "HealthKit_HKStatisticsCollection" "HealthKit_HKStatisticsCollectionQuery" "HealthKit_HKStatisticsQuery" "HealthKit_HKUnit" "HealthKit_HKVerifiableClinicalRecord" "HealthKit_HKVerifiableClinicalRecordQuery" "HealthKit_HKVerifiableClinicalRecordSubject" "HealthKit_HKVisionPrescription" "HealthKit_HKVisionPrism" "HealthKit_HKWheelchairUseObject" "HealthKit_HKWorkout" "HealthKit_HKWorkoutActivity" "HealthKit_HKWorkoutBuilder" "HealthKit_HKWorkoutConfiguration" "HealthKit_HKWorkoutEvent" "HealthKit_HKWorkoutRoute" "HealthKit_HKWorkoutRouteBuilder" "HealthKit_HKWorkoutRouteQuery" "HealthKit_HKWorkoutSession" "HealthKit_HKWorkoutType" ];
          "IdentityLookup" = [ "Foundation" ];
          "IdentityLookup_ILCallClassificationRequest" = [ "IdentityLookup_ILClassificationRequest" ];
          "IdentityLookup_ILCallCommunication" = [ "IdentityLookup_ILCommunication" ];
          "IdentityLookup_ILMessageClassificationRequest" = [ "IdentityLookup_ILClassificationRequest" ];
          "IdentityLookup_ILMessageCommunication" = [ "IdentityLookup_ILCommunication" ];
          "IdentityLookup_ILMessageFilterExtensionContext" = [ "Foundation_NSExtensionContext" ];
          "IdentityLookup_all" = [ "IdentityLookup" "IdentityLookup_ILCallClassificationRequest" "IdentityLookup_ILCallCommunication" "IdentityLookup_ILClassificationRequest" "IdentityLookup_ILClassificationResponse" "IdentityLookup_ILCommunication" "IdentityLookup_ILMessageClassificationRequest" "IdentityLookup_ILMessageCommunication" "IdentityLookup_ILMessageFilterCapabilitiesQueryRequest" "IdentityLookup_ILMessageFilterCapabilitiesQueryResponse" "IdentityLookup_ILMessageFilterExtension" "IdentityLookup_ILMessageFilterExtensionContext" "IdentityLookup_ILMessageFilterQueryRequest" "IdentityLookup_ILMessageFilterQueryResponse" "IdentityLookup_ILNetworkResponse" ];
          "InputMethodKit" = [ "AppKit" "Foundation" ];
          "InputMethodKit_IMKCandidates" = [ "AppKit_NSResponder" ];
          "InputMethodKit_all" = [ "InputMethodKit" "InputMethodKit_IMKCandidates" "InputMethodKit_IMKInputController" "InputMethodKit_IMKServer" ];
          "LinkPresentation" = [ "AppKit" "Foundation" ];
          "LinkPresentation_LPLinkView" = [ "AppKit_NSView" ];
          "LinkPresentation_all" = [ "LinkPresentation" "LinkPresentation_LPLinkMetadata" "LinkPresentation_LPLinkView" "LinkPresentation_LPMetadataProvider" ];
          "LocalAuthentication" = [ "Foundation" ];
          "LocalAuthenticationEmbeddedUI" = [ "AppKit" "Foundation" "LocalAuthentication" "AppKit_NSWindow" ];
          "LocalAuthenticationEmbeddedUI_LAAuthenticationView" = [ "AppKit_NSView" ];
          "LocalAuthenticationEmbeddedUI_all" = [ "LocalAuthenticationEmbeddedUI" "LocalAuthenticationEmbeddedUI_LAAuthenticationView" ];
          "LocalAuthentication_LAPersistedRight" = [ "LocalAuthentication_LARight" ];
          "LocalAuthentication_all" = [ "LocalAuthentication" "LocalAuthentication_LAAuthenticationRequirement" "LocalAuthentication_LABiometryFallbackRequirement" "LocalAuthentication_LAContext" "LocalAuthentication_LAPersistedRight" "LocalAuthentication_LAPrivateKey" "LocalAuthentication_LAPublicKey" "LocalAuthentication_LARight" "LocalAuthentication_LARightStore" "LocalAuthentication_LASecret" ];
          "MailKit" = [ "AppKit" "Foundation" ];
          "MailKit_MEExtensionViewController" = [ "AppKit_NSViewController" ];
          "MailKit_all" = [ "MailKit" "MailKit_MEAddressAnnotation" "MailKit_MEComposeContext" "MailKit_MEComposeSession" "MailKit_MEDecodedMessage" "MailKit_MEDecodedMessageBanner" "MailKit_MEEmailAddress" "MailKit_MEEncodedOutgoingMessage" "MailKit_MEExtensionManager" "MailKit_MEExtensionViewController" "MailKit_MEMessage" "MailKit_MEMessageAction" "MailKit_MEMessageActionDecision" "MailKit_MEMessageEncodingResult" "MailKit_MEMessageSecurityInformation" "MailKit_MEMessageSigner" "MailKit_MEOutgoingMessageEncodingStatus" ];
          "MapKit" = [ "AppKit" "Contacts" "CoreLocation" "Foundation" "MapKit_MKDirectionsResponse" "MapKit_MKETAResponse" "MapKit_MKLocalSearchResponse" "MapKit_MKMapSnapshot" ];
          "MapKit_MKAnnotationView" = [ "AppKit_NSView" ];
          "MapKit_MKCircle" = [ "MapKit_MKShape" ];
          "MapKit_MKCircleRenderer" = [ "MapKit_MKOverlayPathRenderer" ];
          "MapKit_MKCompassButton" = [ "AppKit_NSView" ];
          "MapKit_MKDistanceFormatter" = [ "Foundation_NSFormatter" ];
          "MapKit_MKGeodesicPolyline" = [ "MapKit_MKPolyline" ];
          "MapKit_MKGradientPolylineRenderer" = [ "MapKit_MKPolylineRenderer" ];
          "MapKit_MKHybridMapConfiguration" = [ "MapKit_MKMapConfiguration" ];
          "MapKit_MKImageryMapConfiguration" = [ "MapKit_MKMapConfiguration" ];
          "MapKit_MKLookAroundViewController" = [ "AppKit_NSViewController" ];
          "MapKit_MKMapView" = [ "AppKit_NSView" ];
          "MapKit_MKMarkerAnnotationView" = [ "MapKit_MKAnnotationView" ];
          "MapKit_MKMultiPoint" = [ "MapKit_MKShape" ];
          "MapKit_MKMultiPolygon" = [ "MapKit_MKShape" ];
          "MapKit_MKMultiPolygonRenderer" = [ "MapKit_MKOverlayPathRenderer" ];
          "MapKit_MKMultiPolyline" = [ "MapKit_MKShape" ];
          "MapKit_MKMultiPolylineRenderer" = [ "MapKit_MKOverlayPathRenderer" ];
          "MapKit_MKOverlayPathRenderer" = [ "MapKit_MKOverlayRenderer" ];
          "MapKit_MKPinAnnotationView" = [ "MapKit_MKAnnotationView" ];
          "MapKit_MKPitchControl" = [ "AppKit_NSView" ];
          "MapKit_MKPlacemark" = [ "CoreLocation_CLPlacemark" ];
          "MapKit_MKPointAnnotation" = [ "MapKit_MKShape" ];
          "MapKit_MKPolygon" = [ "MapKit_MKMultiPoint" ];
          "MapKit_MKPolygonRenderer" = [ "MapKit_MKOverlayPathRenderer" ];
          "MapKit_MKPolyline" = [ "MapKit_MKMultiPoint" ];
          "MapKit_MKPolylineRenderer" = [ "MapKit_MKOverlayPathRenderer" ];
          "MapKit_MKStandardMapConfiguration" = [ "MapKit_MKMapConfiguration" ];
          "MapKit_MKTileOverlayRenderer" = [ "MapKit_MKOverlayRenderer" ];
          "MapKit_MKUserLocationView" = [ "MapKit_MKAnnotationView" ];
          "MapKit_MKZoomControl" = [ "AppKit_NSView" ];
          "MapKit_all" = [ "MapKit" "MapKit_MKAnnotationView" "MapKit_MKCircle" "MapKit_MKCircleRenderer" "MapKit_MKClusterAnnotation" "MapKit_MKCompassButton" "MapKit_MKDirections" "MapKit_MKDirectionsRequest" "MapKit_MKDirectionsResponse" "MapKit_MKDistanceFormatter" "MapKit_MKETAResponse" "MapKit_MKGeoJSONDecoder" "MapKit_MKGeoJSONFeature" "MapKit_MKGeodesicPolyline" "MapKit_MKGradientPolylineRenderer" "MapKit_MKHybridMapConfiguration" "MapKit_MKImageryMapConfiguration" "MapKit_MKLocalPointsOfInterestRequest" "MapKit_MKLocalSearch" "MapKit_MKLocalSearchCompleter" "MapKit_MKLocalSearchCompletion" "MapKit_MKLocalSearchRequest" "MapKit_MKLocalSearchResponse" "MapKit_MKLookAroundScene" "MapKit_MKLookAroundSceneRequest" "MapKit_MKLookAroundSnapshot" "MapKit_MKLookAroundSnapshotOptions" "MapKit_MKLookAroundSnapshotter" "MapKit_MKLookAroundViewController" "MapKit_MKMapCamera" "MapKit_MKMapCameraBoundary" "MapKit_MKMapCameraZoomRange" "MapKit_MKMapConfiguration" "MapKit_MKMapItem" "MapKit_MKMapSnapshot" "MapKit_MKMapSnapshotOptions" "MapKit_MKMapSnapshotter" "MapKit_MKMapView" "MapKit_MKMarkerAnnotationView" "MapKit_MKMultiPoint" "MapKit_MKMultiPolygon" "MapKit_MKMultiPolygonRenderer" "MapKit_MKMultiPolyline" "MapKit_MKMultiPolylineRenderer" "MapKit_MKOverlayPathRenderer" "MapKit_MKOverlayRenderer" "MapKit_MKPinAnnotationView" "MapKit_MKPitchControl" "MapKit_MKPlacemark" "MapKit_MKPointAnnotation" "MapKit_MKPointOfInterestFilter" "MapKit_MKPolygon" "MapKit_MKPolygonRenderer" "MapKit_MKPolyline" "MapKit_MKPolylineRenderer" "MapKit_MKRoute" "MapKit_MKRouteStep" "MapKit_MKShape" "MapKit_MKStandardMapConfiguration" "MapKit_MKTileOverlay" "MapKit_MKTileOverlayRenderer" "MapKit_MKUserLocation" "MapKit_MKUserLocationView" "MapKit_MKZoomControl" ];
          "MediaPlayer" = [ "AppKit" "Foundation" ];
          "MediaPlayer_MPChangeLanguageOptionCommandEvent" = [ "MediaPlayer_MPRemoteCommandEvent" ];
          "MediaPlayer_MPChangePlaybackPositionCommand" = [ "MediaPlayer_MPRemoteCommand" ];
          "MediaPlayer_MPChangePlaybackPositionCommandEvent" = [ "MediaPlayer_MPRemoteCommandEvent" ];
          "MediaPlayer_MPChangePlaybackRateCommand" = [ "MediaPlayer_MPRemoteCommand" ];
          "MediaPlayer_MPChangePlaybackRateCommandEvent" = [ "MediaPlayer_MPRemoteCommandEvent" ];
          "MediaPlayer_MPChangeRepeatModeCommand" = [ "MediaPlayer_MPRemoteCommand" ];
          "MediaPlayer_MPChangeRepeatModeCommandEvent" = [ "MediaPlayer_MPRemoteCommandEvent" ];
          "MediaPlayer_MPChangeShuffleModeCommand" = [ "MediaPlayer_MPRemoteCommand" ];
          "MediaPlayer_MPChangeShuffleModeCommandEvent" = [ "MediaPlayer_MPRemoteCommandEvent" ];
          "MediaPlayer_MPFeedbackCommand" = [ "MediaPlayer_MPRemoteCommand" ];
          "MediaPlayer_MPFeedbackCommandEvent" = [ "MediaPlayer_MPRemoteCommandEvent" ];
          "MediaPlayer_MPMediaItem" = [ "MediaPlayer_MPMediaEntity" ];
          "MediaPlayer_MPMediaItemCollection" = [ "MediaPlayer_MPMediaEntity" ];
          "MediaPlayer_MPMediaPlaylist" = [ "MediaPlayer_MPMediaItemCollection" ];
          "MediaPlayer_MPMediaPropertyPredicate" = [ "MediaPlayer_MPMediaPredicate" ];
          "MediaPlayer_MPMusicPlayerApplicationController" = [ "MediaPlayer_MPMusicPlayerController" ];
          "MediaPlayer_MPMusicPlayerControllerMutableQueue" = [ "MediaPlayer_MPMusicPlayerControllerQueue" ];
          "MediaPlayer_MPMusicPlayerMediaItemQueueDescriptor" = [ "MediaPlayer_MPMusicPlayerQueueDescriptor" ];
          "MediaPlayer_MPMusicPlayerPlayParametersQueueDescriptor" = [ "MediaPlayer_MPMusicPlayerQueueDescriptor" ];
          "MediaPlayer_MPMusicPlayerStoreQueueDescriptor" = [ "MediaPlayer_MPMusicPlayerQueueDescriptor" ];
          "MediaPlayer_MPRatingCommand" = [ "MediaPlayer_MPRemoteCommand" ];
          "MediaPlayer_MPRatingCommandEvent" = [ "MediaPlayer_MPRemoteCommandEvent" ];
          "MediaPlayer_MPSeekCommandEvent" = [ "MediaPlayer_MPRemoteCommandEvent" ];
          "MediaPlayer_MPSkipIntervalCommand" = [ "MediaPlayer_MPRemoteCommand" ];
          "MediaPlayer_MPSkipIntervalCommandEvent" = [ "MediaPlayer_MPRemoteCommandEvent" ];
          "MediaPlayer_all" = [ "MediaPlayer" "MediaPlayer_MPAdTimeRange" "MediaPlayer_MPChangeLanguageOptionCommandEvent" "MediaPlayer_MPChangePlaybackPositionCommand" "MediaPlayer_MPChangePlaybackPositionCommandEvent" "MediaPlayer_MPChangePlaybackRateCommand" "MediaPlayer_MPChangePlaybackRateCommandEvent" "MediaPlayer_MPChangeRepeatModeCommand" "MediaPlayer_MPChangeRepeatModeCommandEvent" "MediaPlayer_MPChangeShuffleModeCommand" "MediaPlayer_MPChangeShuffleModeCommandEvent" "MediaPlayer_MPContentItem" "MediaPlayer_MPFeedbackCommand" "MediaPlayer_MPFeedbackCommandEvent" "MediaPlayer_MPMediaEntity" "MediaPlayer_MPMediaItem" "MediaPlayer_MPMediaItemArtwork" "MediaPlayer_MPMediaItemCollection" "MediaPlayer_MPMediaLibrary" "MediaPlayer_MPMediaPlaylist" "MediaPlayer_MPMediaPlaylistCreationMetadata" "MediaPlayer_MPMediaPredicate" "MediaPlayer_MPMediaPropertyPredicate" "MediaPlayer_MPMediaQuery" "MediaPlayer_MPMediaQuerySection" "MediaPlayer_MPMusicPlayerApplicationController" "MediaPlayer_MPMusicPlayerController" "MediaPlayer_MPMusicPlayerControllerMutableQueue" "MediaPlayer_MPMusicPlayerControllerQueue" "MediaPlayer_MPMusicPlayerMediaItemQueueDescriptor" "MediaPlayer_MPMusicPlayerPlayParameters" "MediaPlayer_MPMusicPlayerPlayParametersQueueDescriptor" "MediaPlayer_MPMusicPlayerQueueDescriptor" "MediaPlayer_MPMusicPlayerStoreQueueDescriptor" "MediaPlayer_MPNowPlayingInfoCenter" "MediaPlayer_MPNowPlayingInfoLanguageOption" "MediaPlayer_MPNowPlayingInfoLanguageOptionGroup" "MediaPlayer_MPNowPlayingSession" "MediaPlayer_MPPlayableContentManager" "MediaPlayer_MPPlayableContentManagerContext" "MediaPlayer_MPRatingCommand" "MediaPlayer_MPRatingCommandEvent" "MediaPlayer_MPRemoteCommand" "MediaPlayer_MPRemoteCommandCenter" "MediaPlayer_MPRemoteCommandEvent" "MediaPlayer_MPSeekCommandEvent" "MediaPlayer_MPSkipIntervalCommand" "MediaPlayer_MPSkipIntervalCommandEvent" ];
          "Metal" = [ "Foundation" ];
          "MetalFX" = [ "Metal" ];
          "MetalFX_all" = [ "MetalFX" "MetalFX_MTLFXSpatialScalerDescriptor" "MetalFX_MTLFXTemporalScalerDescriptor" ];
          "MetalKit" = [ "AppKit" "Foundation" "Metal" "Metal_MTLRenderPipelineReflection" "Metal_MTLComputePipelineReflection" ];
          "MetalKit_MTKView" = [ "AppKit_NSView" ];
          "MetalKit_all" = [ "MetalKit" "MetalKit_MTKMesh" "MetalKit_MTKMeshBuffer" "MetalKit_MTKMeshBufferAllocator" "MetalKit_MTKSubmesh" "MetalKit_MTKTextureLoader" "MetalKit_MTKView" ];
          "Metal_MTLAccelerationStructureBoundingBoxGeometryDescriptor" = [ "Metal_MTLAccelerationStructureGeometryDescriptor" ];
          "Metal_MTLAccelerationStructureMotionBoundingBoxGeometryDescriptor" = [ "Metal_MTLAccelerationStructureGeometryDescriptor" ];
          "Metal_MTLAccelerationStructureMotionTriangleGeometryDescriptor" = [ "Metal_MTLAccelerationStructureGeometryDescriptor" ];
          "Metal_MTLAccelerationStructureTriangleGeometryDescriptor" = [ "Metal_MTLAccelerationStructureGeometryDescriptor" ];
          "Metal_MTLArrayType" = [ "Metal_MTLType" ];
          "Metal_MTLInstanceAccelerationStructureDescriptor" = [ "Metal_MTLAccelerationStructureDescriptor" ];
          "Metal_MTLIntersectionFunctionDescriptor" = [ "Metal_MTLFunctionDescriptor" ];
          "Metal_MTLPointerType" = [ "Metal_MTLType" ];
          "Metal_MTLPrimitiveAccelerationStructureDescriptor" = [ "Metal_MTLAccelerationStructureDescriptor" ];
          "Metal_MTLRenderPassColorAttachmentDescriptor" = [ "Metal_MTLRenderPassAttachmentDescriptor" ];
          "Metal_MTLRenderPassDepthAttachmentDescriptor" = [ "Metal_MTLRenderPassAttachmentDescriptor" ];
          "Metal_MTLRenderPassStencilAttachmentDescriptor" = [ "Metal_MTLRenderPassAttachmentDescriptor" ];
          "Metal_MTLStructType" = [ "Metal_MTLType" ];
          "Metal_MTLTextureReferenceType" = [ "Metal_MTLType" ];
          "Metal_all" = [ "Metal" "Metal_MTLAccelerationStructureBoundingBoxGeometryDescriptor" "Metal_MTLAccelerationStructureDescriptor" "Metal_MTLAccelerationStructureGeometryDescriptor" "Metal_MTLAccelerationStructureMotionBoundingBoxGeometryDescriptor" "Metal_MTLAccelerationStructureMotionTriangleGeometryDescriptor" "Metal_MTLAccelerationStructurePassDescriptor" "Metal_MTLAccelerationStructurePassSampleBufferAttachmentDescriptor" "Metal_MTLAccelerationStructurePassSampleBufferAttachmentDescriptorArray" "Metal_MTLAccelerationStructureTriangleGeometryDescriptor" "Metal_MTLArgument" "Metal_MTLArgumentDescriptor" "Metal_MTLArrayType" "Metal_MTLAttribute" "Metal_MTLAttributeDescriptor" "Metal_MTLAttributeDescriptorArray" "Metal_MTLBinaryArchiveDescriptor" "Metal_MTLBlitPassDescriptor" "Metal_MTLBlitPassSampleBufferAttachmentDescriptor" "Metal_MTLBlitPassSampleBufferAttachmentDescriptorArray" "Metal_MTLBufferLayoutDescriptor" "Metal_MTLBufferLayoutDescriptorArray" "Metal_MTLCaptureDescriptor" "Metal_MTLCaptureManager" "Metal_MTLCommandBufferDescriptor" "Metal_MTLCompileOptions" "Metal_MTLComputePassDescriptor" "Metal_MTLComputePassSampleBufferAttachmentDescriptor" "Metal_MTLComputePassSampleBufferAttachmentDescriptorArray" "Metal_MTLComputePipelineDescriptor" "Metal_MTLComputePipelineReflection" "Metal_MTLCounterSampleBufferDescriptor" "Metal_MTLDepthStencilDescriptor" "Metal_MTLFunctionConstant" "Metal_MTLFunctionConstantValues" "Metal_MTLFunctionDescriptor" "Metal_MTLFunctionStitchingAttributeAlwaysInline" "Metal_MTLFunctionStitchingFunctionNode" "Metal_MTLFunctionStitchingGraph" "Metal_MTLFunctionStitchingInputNode" "Metal_MTLHeapDescriptor" "Metal_MTLIOCommandQueueDescriptor" "Metal_MTLIndirectCommandBufferDescriptor" "Metal_MTLInstanceAccelerationStructureDescriptor" "Metal_MTLIntersectionFunctionDescriptor" "Metal_MTLIntersectionFunctionTableDescriptor" "Metal_MTLLinkedFunctions" "Metal_MTLMeshRenderPipelineDescriptor" "Metal_MTLMotionKeyframeData" "Metal_MTLPipelineBufferDescriptor" "Metal_MTLPipelineBufferDescriptorArray" "Metal_MTLPointerType" "Metal_MTLPrimitiveAccelerationStructureDescriptor" "Metal_MTLRasterizationRateLayerArray" "Metal_MTLRasterizationRateLayerDescriptor" "Metal_MTLRasterizationRateMapDescriptor" "Metal_MTLRasterizationRateSampleArray" "Metal_MTLRenderPassAttachmentDescriptor" "Metal_MTLRenderPassColorAttachmentDescriptor" "Metal_MTLRenderPassColorAttachmentDescriptorArray" "Metal_MTLRenderPassDepthAttachmentDescriptor" "Metal_MTLRenderPassDescriptor" "Metal_MTLRenderPassSampleBufferAttachmentDescriptor" "Metal_MTLRenderPassSampleBufferAttachmentDescriptorArray" "Metal_MTLRenderPassStencilAttachmentDescriptor" "Metal_MTLRenderPipelineColorAttachmentDescriptor" "Metal_MTLRenderPipelineColorAttachmentDescriptorArray" "Metal_MTLRenderPipelineDescriptor" "Metal_MTLRenderPipelineFunctionsDescriptor" "Metal_MTLRenderPipelineReflection" "Metal_MTLResourceStatePassDescriptor" "Metal_MTLResourceStatePassSampleBufferAttachmentDescriptor" "Metal_MTLResourceStatePassSampleBufferAttachmentDescriptorArray" "Metal_MTLSamplerDescriptor" "Metal_MTLSharedEventHandle" "Metal_MTLSharedEventListener" "Metal_MTLSharedTextureHandle" "Metal_MTLStageInputOutputDescriptor" "Metal_MTLStencilDescriptor" "Metal_MTLStitchedLibraryDescriptor" "Metal_MTLStructMember" "Metal_MTLStructType" "Metal_MTLTextureDescriptor" "Metal_MTLTextureReferenceType" "Metal_MTLTileRenderPipelineColorAttachmentDescriptor" "Metal_MTLTileRenderPipelineColorAttachmentDescriptorArray" "Metal_MTLTileRenderPipelineDescriptor" "Metal_MTLType" "Metal_MTLVertexAttribute" "Metal_MTLVertexAttributeDescriptor" "Metal_MTLVertexAttributeDescriptorArray" "Metal_MTLVertexBufferLayoutDescriptor" "Metal_MTLVertexBufferLayoutDescriptorArray" "Metal_MTLVertexDescriptor" "Metal_MTLVisibleFunctionTableDescriptor" ];
          "MetricKit" = [ "Foundation" ];
          "MetricKit_MXAnimationMetric" = [ "MetricKit_MXMetric" ];
          "MetricKit_MXAppExitMetric" = [ "MetricKit_MXMetric" ];
          "MetricKit_MXAppLaunchDiagnostic" = [ "MetricKit_MXDiagnostic" ];
          "MetricKit_MXAppLaunchMetric" = [ "MetricKit_MXMetric" ];
          "MetricKit_MXAppResponsivenessMetric" = [ "MetricKit_MXMetric" ];
          "MetricKit_MXAppRunTimeMetric" = [ "MetricKit_MXMetric" ];
          "MetricKit_MXCPUExceptionDiagnostic" = [ "MetricKit_MXDiagnostic" ];
          "MetricKit_MXCPUMetric" = [ "MetricKit_MXMetric" ];
          "MetricKit_MXCellularConditionMetric" = [ "MetricKit_MXMetric" ];
          "MetricKit_MXCrashDiagnostic" = [ "MetricKit_MXDiagnostic" ];
          "MetricKit_MXDiskIOMetric" = [ "MetricKit_MXMetric" ];
          "MetricKit_MXDiskWriteExceptionDiagnostic" = [ "MetricKit_MXDiagnostic" ];
          "MetricKit_MXDisplayMetric" = [ "MetricKit_MXMetric" ];
          "MetricKit_MXGPUMetric" = [ "MetricKit_MXMetric" ];
          "MetricKit_MXHangDiagnostic" = [ "MetricKit_MXDiagnostic" ];
          "MetricKit_MXLocationActivityMetric" = [ "MetricKit_MXMetric" ];
          "MetricKit_MXMemoryMetric" = [ "MetricKit_MXMetric" ];
          "MetricKit_MXNetworkTransferMetric" = [ "MetricKit_MXMetric" ];
          "MetricKit_MXSignpostMetric" = [ "MetricKit_MXMetric" ];
          "MetricKit_MXUnitAveragePixelLuminance" = [ "Foundation_NSDimension" ];
          "MetricKit_MXUnitSignalBars" = [ "Foundation_NSDimension" ];
          "MetricKit_all" = [ "MetricKit" "MetricKit_MXAnimationMetric" "MetricKit_MXAppExitMetric" "MetricKit_MXAppLaunchDiagnostic" "MetricKit_MXAppLaunchMetric" "MetricKit_MXAppResponsivenessMetric" "MetricKit_MXAppRunTimeMetric" "MetricKit_MXAverage" "MetricKit_MXBackgroundExitData" "MetricKit_MXCPUExceptionDiagnostic" "MetricKit_MXCPUMetric" "MetricKit_MXCallStackTree" "MetricKit_MXCellularConditionMetric" "MetricKit_MXCrashDiagnostic" "MetricKit_MXDiagnostic" "MetricKit_MXDiagnosticPayload" "MetricKit_MXDiskIOMetric" "MetricKit_MXDiskWriteExceptionDiagnostic" "MetricKit_MXDisplayMetric" "MetricKit_MXForegroundExitData" "MetricKit_MXGPUMetric" "MetricKit_MXHangDiagnostic" "MetricKit_MXHistogram" "MetricKit_MXHistogramBucket" "MetricKit_MXLocationActivityMetric" "MetricKit_MXMemoryMetric" "MetricKit_MXMetaData" "MetricKit_MXMetric" "MetricKit_MXMetricManager" "MetricKit_MXMetricPayload" "MetricKit_MXNetworkTransferMetric" "MetricKit_MXSignpostIntervalData" "MetricKit_MXSignpostMetric" "MetricKit_MXUnitAveragePixelLuminance" "MetricKit_MXUnitSignalBars" ];
          "OSAKit" = [ "AppKit" "Foundation" ];
          "OSAKit_OSAScriptController" = [ "AppKit_NSController" ];
          "OSAKit_OSAScriptView" = [ "AppKit_NSTextView" ];
          "OSAKit_all" = [ "OSAKit" "OSAKit_OSALanguage" "OSAKit_OSALanguageInstance" "OSAKit_OSAScript" "OSAKit_OSAScriptController" "OSAKit_OSAScriptView" ];
          "PhotoKit" = [ "AppKit" "CoreLocation" "Foundation" ];
          "PhotoKit_PHAsset" = [ "PhotoKit_PHObject" ];
          "PhotoKit_PHAssetChangeRequest" = [ "PhotoKit_PHChangeRequest" ];
          "PhotoKit_PHAssetCollection" = [ "PhotoKit_PHCollection" ];
          "PhotoKit_PHAssetCollectionChangeRequest" = [ "PhotoKit_PHChangeRequest" ];
          "PhotoKit_PHAssetCreationRequest" = [ "PhotoKit_PHAssetChangeRequest" ];
          "PhotoKit_PHCachingImageManager" = [ "PhotoKit_PHImageManager" ];
          "PhotoKit_PHCollection" = [ "PhotoKit_PHObject" ];
          "PhotoKit_PHCollectionList" = [ "PhotoKit_PHCollection" ];
          "PhotoKit_PHCollectionListChangeRequest" = [ "PhotoKit_PHChangeRequest" ];
          "PhotoKit_PHObjectPlaceholder" = [ "PhotoKit_PHObject" ];
          "PhotoKit_PHProject" = [ "PhotoKit_PHAssetCollection" ];
          "PhotoKit_PHProjectChangeRequest" = [ "PhotoKit_PHChangeRequest" ];
          "PhotoKit_all" = [ "PhotoKit" "PhotoKit_PHAdjustmentData" "PhotoKit_PHAsset" "PhotoKit_PHAssetChangeRequest" "PhotoKit_PHAssetCollection" "PhotoKit_PHAssetCollectionChangeRequest" "PhotoKit_PHAssetCreationRequest" "PhotoKit_PHAssetResource" "PhotoKit_PHAssetResourceCreationOptions" "PhotoKit_PHAssetResourceManager" "PhotoKit_PHAssetResourceRequestOptions" "PhotoKit_PHCachingImageManager" "PhotoKit_PHChange" "PhotoKit_PHChangeRequest" "PhotoKit_PHCloudIdentifier" "PhotoKit_PHCloudIdentifierMapping" "PhotoKit_PHCollection" "PhotoKit_PHCollectionList" "PhotoKit_PHCollectionListChangeRequest" "PhotoKit_PHContentEditingInput" "PhotoKit_PHContentEditingInputRequestOptions" "PhotoKit_PHContentEditingOutput" "PhotoKit_PHFetchOptions" "PhotoKit_PHFetchResult" "PhotoKit_PHFetchResultChangeDetails" "PhotoKit_PHImageManager" "PhotoKit_PHImageRequestOptions" "PhotoKit_PHLivePhoto" "PhotoKit_PHLivePhotoEditingContext" "PhotoKit_PHLivePhotoRequestOptions" "PhotoKit_PHLocalIdentifierMapping" "PhotoKit_PHObject" "PhotoKit_PHObjectChangeDetails" "PhotoKit_PHObjectPlaceholder" "PhotoKit_PHPersistentChange" "PhotoKit_PHPersistentChangeFetchResult" "PhotoKit_PHPersistentChangeToken" "PhotoKit_PHPersistentObjectChangeDetails" "PhotoKit_PHPhotoLibrary" "PhotoKit_PHProject" "PhotoKit_PHProjectChangeRequest" "PhotoKit_PHVideoRequestOptions" ];
          "SoundAnalysis" = [ "Foundation" ];
          "SoundAnalysis_all" = [ "SoundAnalysis" "SoundAnalysis_SNAudioFileAnalyzer" "SoundAnalysis_SNAudioStreamAnalyzer" "SoundAnalysis_SNClassification" "SoundAnalysis_SNClassificationResult" "SoundAnalysis_SNClassifySoundRequest" "SoundAnalysis_SNTimeDurationConstraint" ];
          "Speech" = [ "Foundation" ];
          "Speech_SFSpeechAudioBufferRecognitionRequest" = [ "Speech_SFSpeechRecognitionRequest" ];
          "Speech_SFSpeechURLRecognitionRequest" = [ "Speech_SFSpeechRecognitionRequest" ];
          "Speech_all" = [ "Speech" "Speech_SFAcousticFeature" "Speech_SFSpeechAudioBufferRecognitionRequest" "Speech_SFSpeechRecognitionMetadata" "Speech_SFSpeechRecognitionRequest" "Speech_SFSpeechRecognitionResult" "Speech_SFSpeechRecognitionTask" "Speech_SFSpeechRecognizer" "Speech_SFSpeechURLRecognitionRequest" "Speech_SFTranscription" "Speech_SFTranscriptionSegment" "Speech_SFVoiceAnalytics" ];
          "StoreKit" = [ "AppKit" "Foundation" ];
          "StoreKit_SKCloudServiceSetupViewController" = [ "AppKit_NSViewController" ];
          "StoreKit_SKMutablePayment" = [ "StoreKit_SKPayment" ];
          "StoreKit_SKOverlayAppClipConfiguration" = [ "StoreKit_SKOverlayConfiguration" ];
          "StoreKit_SKOverlayAppConfiguration" = [ "StoreKit_SKOverlayConfiguration" ];
          "StoreKit_SKProductsRequest" = [ "StoreKit_SKRequest" ];
          "StoreKit_SKReceiptRefreshRequest" = [ "StoreKit_SKRequest" ];
          "StoreKit_SKStoreProductViewController" = [ "AppKit_NSViewController" ];
          "StoreKit_all" = [ "StoreKit" "StoreKit_SKAdImpression" "StoreKit_SKAdNetwork" "StoreKit_SKArcadeService" "StoreKit_SKCloudServiceController" "StoreKit_SKCloudServiceSetupViewController" "StoreKit_SKDownload" "StoreKit_SKMutablePayment" "StoreKit_SKOverlay" "StoreKit_SKOverlayAppClipConfiguration" "StoreKit_SKOverlayAppConfiguration" "StoreKit_SKOverlayConfiguration" "StoreKit_SKOverlayTransitionContext" "StoreKit_SKPayment" "StoreKit_SKPaymentDiscount" "StoreKit_SKPaymentQueue" "StoreKit_SKPaymentTransaction" "StoreKit_SKProduct" "StoreKit_SKProductDiscount" "StoreKit_SKProductStorePromotionController" "StoreKit_SKProductSubscriptionPeriod" "StoreKit_SKProductsRequest" "StoreKit_SKProductsResponse" "StoreKit_SKReceiptRefreshRequest" "StoreKit_SKRequest" "StoreKit_SKStoreProductViewController" "StoreKit_SKStoreReviewController" "StoreKit_SKStorefront" ];
          "UniformTypeIdentifiers" = [ "Foundation" "UniformTypeIdentifiers_UTType" ];
          "UniformTypeIdentifiers_all" = [ "UniformTypeIdentifiers" "UniformTypeIdentifiers_UTType" ];
          "UserNotifications" = [ "CoreLocation" "Foundation" ];
          "UserNotifications_UNCalendarNotificationTrigger" = [ "UserNotifications_UNNotificationTrigger" ];
          "UserNotifications_UNLocationNotificationTrigger" = [ "UserNotifications_UNNotificationTrigger" ];
          "UserNotifications_UNMutableNotificationContent" = [ "UserNotifications_UNNotificationContent" ];
          "UserNotifications_UNPushNotificationTrigger" = [ "UserNotifications_UNNotificationTrigger" ];
          "UserNotifications_UNTextInputNotificationAction" = [ "UserNotifications_UNNotificationAction" ];
          "UserNotifications_UNTextInputNotificationResponse" = [ "UserNotifications_UNNotificationResponse" ];
          "UserNotifications_UNTimeIntervalNotificationTrigger" = [ "UserNotifications_UNNotificationTrigger" ];
          "UserNotifications_all" = [ "UserNotifications" "UserNotifications_UNCalendarNotificationTrigger" "UserNotifications_UNLocationNotificationTrigger" "UserNotifications_UNMutableNotificationContent" "UserNotifications_UNNotification" "UserNotifications_UNNotificationAction" "UserNotifications_UNNotificationActionIcon" "UserNotifications_UNNotificationAttachment" "UserNotifications_UNNotificationCategory" "UserNotifications_UNNotificationContent" "UserNotifications_UNNotificationRequest" "UserNotifications_UNNotificationResponse" "UserNotifications_UNNotificationServiceExtension" "UserNotifications_UNNotificationSettings" "UserNotifications_UNNotificationSound" "UserNotifications_UNNotificationTrigger" "UserNotifications_UNPushNotificationTrigger" "UserNotifications_UNTextInputNotificationAction" "UserNotifications_UNTextInputNotificationResponse" "UserNotifications_UNTimeIntervalNotificationTrigger" "UserNotifications_UNUserNotificationCenter" ];
          "WebKit" = [ "AppKit" "Foundation" "Foundation_NSAttributedString" ];
          "WebKit_DOMAbstractView" = [ "WebKit_DOMObject" ];
          "WebKit_DOMAttr" = [ "WebKit_DOMNode" ];
          "WebKit_DOMBlob" = [ "WebKit_DOMObject" ];
          "WebKit_DOMCDATASection" = [ "WebKit_DOMText" ];
          "WebKit_DOMCSSCharsetRule" = [ "WebKit_DOMCSSRule" ];
          "WebKit_DOMCSSFontFaceRule" = [ "WebKit_DOMCSSRule" ];
          "WebKit_DOMCSSImportRule" = [ "WebKit_DOMCSSRule" ];
          "WebKit_DOMCSSMediaRule" = [ "WebKit_DOMCSSRule" ];
          "WebKit_DOMCSSPageRule" = [ "WebKit_DOMCSSRule" ];
          "WebKit_DOMCSSPrimitiveValue" = [ "WebKit_DOMCSSValue" ];
          "WebKit_DOMCSSRule" = [ "WebKit_DOMObject" ];
          "WebKit_DOMCSSRuleList" = [ "WebKit_DOMObject" ];
          "WebKit_DOMCSSStyleDeclaration" = [ "WebKit_DOMObject" ];
          "WebKit_DOMCSSStyleRule" = [ "WebKit_DOMCSSRule" ];
          "WebKit_DOMCSSStyleSheet" = [ "WebKit_DOMStyleSheet" ];
          "WebKit_DOMCSSUnknownRule" = [ "WebKit_DOMCSSRule" ];
          "WebKit_DOMCSSValue" = [ "WebKit_DOMObject" ];
          "WebKit_DOMCSSValueList" = [ "WebKit_DOMCSSValue" ];
          "WebKit_DOMCharacterData" = [ "WebKit_DOMNode" ];
          "WebKit_DOMComment" = [ "WebKit_DOMCharacterData" ];
          "WebKit_DOMCounter" = [ "WebKit_DOMObject" ];
          "WebKit_DOMDocument" = [ "WebKit_DOMNode" ];
          "WebKit_DOMDocumentFragment" = [ "WebKit_DOMNode" ];
          "WebKit_DOMDocumentType" = [ "WebKit_DOMNode" ];
          "WebKit_DOMElement" = [ "WebKit_DOMNode" ];
          "WebKit_DOMEntity" = [ "WebKit_DOMNode" ];
          "WebKit_DOMEntityReference" = [ "WebKit_DOMNode" ];
          "WebKit_DOMEvent" = [ "WebKit_DOMObject" ];
          "WebKit_DOMFile" = [ "WebKit_DOMBlob" ];
          "WebKit_DOMFileList" = [ "WebKit_DOMObject" ];
          "WebKit_DOMHTMLAnchorElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLAppletElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLAreaElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLBRElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLBaseElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLBaseFontElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLBodyElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLButtonElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLCollection" = [ "WebKit_DOMObject" ];
          "WebKit_DOMHTMLDListElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLDirectoryElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLDivElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLDocument" = [ "WebKit_DOMDocument" ];
          "WebKit_DOMHTMLElement" = [ "WebKit_DOMElement" ];
          "WebKit_DOMHTMLEmbedElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLFieldSetElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLFontElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLFormElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLFrameElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLFrameSetElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLHRElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLHeadElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLHeadingElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLHtmlElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLIFrameElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLImageElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLInputElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLLIElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLLabelElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLLegendElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLLinkElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLMapElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLMarqueeElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLMenuElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLMetaElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLModElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLOListElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLObjectElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLOptGroupElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLOptionElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLOptionsCollection" = [ "WebKit_DOMObject" ];
          "WebKit_DOMHTMLParagraphElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLParamElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLPreElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLQuoteElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLScriptElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLSelectElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLStyleElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLTableCaptionElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLTableCellElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLTableColElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLTableElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLTableRowElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLTableSectionElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLTextAreaElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLTitleElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLUListElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMImplementation" = [ "WebKit_DOMObject" ];
          "WebKit_DOMKeyboardEvent" = [ "WebKit_DOMUIEvent" ];
          "WebKit_DOMMediaList" = [ "WebKit_DOMObject" ];
          "WebKit_DOMMouseEvent" = [ "WebKit_DOMUIEvent" ];
          "WebKit_DOMMutationEvent" = [ "WebKit_DOMEvent" ];
          "WebKit_DOMNamedNodeMap" = [ "WebKit_DOMObject" ];
          "WebKit_DOMNode" = [ "WebKit_DOMObject" ];
          "WebKit_DOMNodeIterator" = [ "WebKit_DOMObject" ];
          "WebKit_DOMNodeList" = [ "WebKit_DOMObject" ];
          "WebKit_DOMObject" = [ "WebKit_WebScriptObject" ];
          "WebKit_DOMOverflowEvent" = [ "WebKit_DOMEvent" ];
          "WebKit_DOMProcessingInstruction" = [ "WebKit_DOMCharacterData" ];
          "WebKit_DOMProgressEvent" = [ "WebKit_DOMEvent" ];
          "WebKit_DOMRGBColor" = [ "WebKit_DOMObject" ];
          "WebKit_DOMRange" = [ "WebKit_DOMObject" ];
          "WebKit_DOMRect" = [ "WebKit_DOMObject" ];
          "WebKit_DOMStyleSheet" = [ "WebKit_DOMObject" ];
          "WebKit_DOMStyleSheetList" = [ "WebKit_DOMObject" ];
          "WebKit_DOMText" = [ "WebKit_DOMCharacterData" ];
          "WebKit_DOMTreeWalker" = [ "WebKit_DOMObject" ];
          "WebKit_DOMUIEvent" = [ "WebKit_DOMEvent" ];
          "WebKit_DOMWheelEvent" = [ "WebKit_DOMMouseEvent" ];
          "WebKit_DOMXPathExpression" = [ "WebKit_DOMObject" ];
          "WebKit_DOMXPathResult" = [ "WebKit_DOMObject" ];
          "WebKit_WKWebView" = [ "AppKit_NSView" ];
          "WebKit_WebDownload" = [ "Foundation_NSURLDownload" ];
          "WebKit_WebFrameView" = [ "AppKit_NSView" ];
          "WebKit_WebView" = [ "AppKit_NSView" ];
          "WebKit_all" = [ "WebKit" "WebKit_DOMAbstractView" "WebKit_DOMAttr" "WebKit_DOMBlob" "WebKit_DOMCDATASection" "WebKit_DOMCSSCharsetRule" "WebKit_DOMCSSFontFaceRule" "WebKit_DOMCSSImportRule" "WebKit_DOMCSSMediaRule" "WebKit_DOMCSSPageRule" "WebKit_DOMCSSPrimitiveValue" "WebKit_DOMCSSRule" "WebKit_DOMCSSRuleList" "WebKit_DOMCSSStyleDeclaration" "WebKit_DOMCSSStyleRule" "WebKit_DOMCSSStyleSheet" "WebKit_DOMCSSUnknownRule" "WebKit_DOMCSSValue" "WebKit_DOMCSSValueList" "WebKit_DOMCharacterData" "WebKit_DOMComment" "WebKit_DOMCounter" "WebKit_DOMDocument" "WebKit_DOMDocumentFragment" "WebKit_DOMDocumentType" "WebKit_DOMElement" "WebKit_DOMEntity" "WebKit_DOMEntityReference" "WebKit_DOMEvent" "WebKit_DOMFile" "WebKit_DOMFileList" "WebKit_DOMHTMLAnchorElement" "WebKit_DOMHTMLAppletElement" "WebKit_DOMHTMLAreaElement" "WebKit_DOMHTMLBRElement" "WebKit_DOMHTMLBaseElement" "WebKit_DOMHTMLBaseFontElement" "WebKit_DOMHTMLBodyElement" "WebKit_DOMHTMLButtonElement" "WebKit_DOMHTMLCollection" "WebKit_DOMHTMLDListElement" "WebKit_DOMHTMLDirectoryElement" "WebKit_DOMHTMLDivElement" "WebKit_DOMHTMLDocument" "WebKit_DOMHTMLElement" "WebKit_DOMHTMLEmbedElement" "WebKit_DOMHTMLFieldSetElement" "WebKit_DOMHTMLFontElement" "WebKit_DOMHTMLFormElement" "WebKit_DOMHTMLFrameElement" "WebKit_DOMHTMLFrameSetElement" "WebKit_DOMHTMLHRElement" "WebKit_DOMHTMLHeadElement" "WebKit_DOMHTMLHeadingElement" "WebKit_DOMHTMLHtmlElement" "WebKit_DOMHTMLIFrameElement" "WebKit_DOMHTMLImageElement" "WebKit_DOMHTMLInputElement" "WebKit_DOMHTMLLIElement" "WebKit_DOMHTMLLabelElement" "WebKit_DOMHTMLLegendElement" "WebKit_DOMHTMLLinkElement" "WebKit_DOMHTMLMapElement" "WebKit_DOMHTMLMarqueeElement" "WebKit_DOMHTMLMenuElement" "WebKit_DOMHTMLMetaElement" "WebKit_DOMHTMLModElement" "WebKit_DOMHTMLOListElement" "WebKit_DOMHTMLObjectElement" "WebKit_DOMHTMLOptGroupElement" "WebKit_DOMHTMLOptionElement" "WebKit_DOMHTMLOptionsCollection" "WebKit_DOMHTMLParagraphElement" "WebKit_DOMHTMLParamElement" "WebKit_DOMHTMLPreElement" "WebKit_DOMHTMLQuoteElement" "WebKit_DOMHTMLScriptElement" "WebKit_DOMHTMLSelectElement" "WebKit_DOMHTMLStyleElement" "WebKit_DOMHTMLTableCaptionElement" "WebKit_DOMHTMLTableCellElement" "WebKit_DOMHTMLTableColElement" "WebKit_DOMHTMLTableElement" "WebKit_DOMHTMLTableRowElement" "WebKit_DOMHTMLTableSectionElement" "WebKit_DOMHTMLTextAreaElement" "WebKit_DOMHTMLTitleElement" "WebKit_DOMHTMLUListElement" "WebKit_DOMImplementation" "WebKit_DOMKeyboardEvent" "WebKit_DOMMediaList" "WebKit_DOMMouseEvent" "WebKit_DOMMutationEvent" "WebKit_DOMNamedNodeMap" "WebKit_DOMNode" "WebKit_DOMNodeIterator" "WebKit_DOMNodeList" "WebKit_DOMObject" "WebKit_DOMOverflowEvent" "WebKit_DOMProcessingInstruction" "WebKit_DOMProgressEvent" "WebKit_DOMRGBColor" "WebKit_DOMRange" "WebKit_DOMRect" "WebKit_DOMStyleSheet" "WebKit_DOMStyleSheetList" "WebKit_DOMText" "WebKit_DOMTreeWalker" "WebKit_DOMUIEvent" "WebKit_DOMWheelEvent" "WebKit_DOMXPathExpression" "WebKit_DOMXPathResult" "WebKit_WKBackForwardList" "WebKit_WKBackForwardListItem" "WebKit_WKContentRuleList" "WebKit_WKContentRuleListStore" "WebKit_WKContentWorld" "WebKit_WKDownload" "WebKit_WKFindConfiguration" "WebKit_WKFindResult" "WebKit_WKFrameInfo" "WebKit_WKHTTPCookieStore" "WebKit_WKNavigation" "WebKit_WKNavigationAction" "WebKit_WKNavigationResponse" "WebKit_WKOpenPanelParameters" "WebKit_WKPDFConfiguration" "WebKit_WKPreferences" "WebKit_WKProcessPool" "WebKit_WKScriptMessage" "WebKit_WKSecurityOrigin" "WebKit_WKSnapshotConfiguration" "WebKit_WKUserContentController" "WebKit_WKUserScript" "WebKit_WKWebView" "WebKit_WKWebViewConfiguration" "WebKit_WKWebpagePreferences" "WebKit_WKWebsiteDataRecord" "WebKit_WKWebsiteDataStore" "WebKit_WKWindowFeatures" "WebKit_WebArchive" "WebKit_WebBackForwardList" "WebKit_WebDataSource" "WebKit_WebDownload" "WebKit_WebFrame" "WebKit_WebFrameView" "WebKit_WebHistory" "WebKit_WebHistoryItem" "WebKit_WebPreferences" "WebKit_WebResource" "WebKit_WebScriptObject" "WebKit_WebUndefined" "WebKit_WebView" ];
          "alloc" = [ "objc2?/alloc" "block2?/alloc" ];
          "apple" = [ "objc2?/apple" "block2?/apple" ];
          "block" = [ "block2" ];
          "block2" = [ "dep:block2" ];
          "default" = [ "std" "apple" ];
          "dispatch" = [ "dep:dispatch" ];
          "gnustep-1-7" = [ "objc2?/gnustep-1-7" "block2?/gnustep-1-7" ];
          "gnustep-1-8" = [ "gnustep-1-7" "objc2?/gnustep-1-8" "block2?/gnustep-1-8" ];
          "gnustep-1-9" = [ "gnustep-1-8" "objc2?/gnustep-1-9" "block2?/gnustep-1-9" ];
          "gnustep-2-0" = [ "gnustep-1-9" "objc2?/gnustep-2-0" "block2?/gnustep-2-0" ];
          "gnustep-2-1" = [ "gnustep-2-0" "objc2?/gnustep-2-1" "block2?/gnustep-2-1" ];
          "objc2" = [ "dep:objc2" ];
          "objective-c" = [ "objc2" ];
          "std" = [ "alloc" "objc2?/std" "block2?/std" ];
          "unstable-example-basic_usage" = [ "Foundation" "Foundation_NSArray" "Foundation_NSDictionary" "Foundation_NSEnumerator" ];
          "unstable-example-browser" = [ "apple" "AppKit" "AppKit_NSButton" "AppKit_NSColor" "AppKit_NSMenu" "AppKit_NSMenuItem" "AppKit_NSStackView" "AppKit_NSTextAttachmentCell" "AppKit_NSTextField" "AppKit_NSTextView" "AppKit_NSWindow" "Foundation" "Foundation_NSString" "Foundation_NSURL" "Foundation_NSURLRequest" "WebKit" "WebKit_WKNavigation" "WebKit_WKWebView" ];
          "unstable-example-delegate" = [ "apple" "Foundation" "Foundation_NSString" "AppKit" "AppKit_NSResponder" ];
          "unstable-example-nspasteboard" = [ "apple" "Foundation" "Foundation_NSArray" "Foundation_NSDictionary" "Foundation_NSString" "AppKit" "AppKit_NSPasteboard" ];
          "unstable-example-speech_synthesis" = [ "apple" "Foundation" "Foundation_NSString" ];
          "unstable-frameworks-all" = [ "unstable-frameworks-ios" "unstable-frameworks-macos-13" ];
          "unstable-frameworks-gnustep" = [ "AppKit_all" "Foundation_all" ];
          "unstable-frameworks-gnustep-32bit" = [ "Foundation_all" ];
          "unstable-frameworks-ios" = [ "Foundation_all" "unstable-example-basic_usage" "unstable-example-speech_synthesis" ];
          "unstable-frameworks-macos-10-13" = [ "CloudKit_all" "Contacts_all" "CoreLocation_all" "EventKit_all" "ExternalAccessory_all" "GameController_all" "GameKit_all" "LocalAuthentication_all" "MapKit_all" "MediaPlayer_all" "MetalKit_all" "Metal_all" "PhotoKit_all" "unstable-example-delegate" "unstable-example-nspasteboard" "unstable-example-speech_synthesis" "unstable-frameworks-macos-10-7" ];
          "unstable-frameworks-macos-10-7" = [ "AppKit_all" "Automator_all" "CoreAnimation_all" "CoreData_all" "ExceptionHandling_all" "Foundation_all" "InputMethodKit_all" "OSAKit_all" "StoreKit_all" "WebKit_all" "unstable-example-basic_usage" ];
          "unstable-frameworks-macos-11" = [ "Accessibility_all" "ClassKit_all" "UniformTypeIdentifiers_all" "unstable-frameworks-macos-10-13" ];
          "unstable-frameworks-macos-12" = [ "DataDetection_all" "LocalAuthenticationEmbeddedUI_all" "MailKit_all" "MetricKit_all" "unstable-frameworks-macos-11" ];
          "unstable-frameworks-macos-13" = [ "AdServices_all" "AdSupport_all" "AuthenticationServices_all" "AutomaticAssessmentConfiguration_all" "BackgroundAssets_all" "BusinessChat_all" "CallKit_all" "DeviceCheck_all" "ExtensionKit_all" "FileProviderUI_all" "FileProvider_all" "HealthKit_all" "IdentityLookup_all" "LinkPresentation_all" "MetalFX_all" "SoundAnalysis_all" "Speech_all" "UserNotifications_all" "unstable-example-browser" "unstable-frameworks-macos-12" ];
        };
        resolvedDefaultFeatures = [ "AppKit" "AppKit_NSApplication" "AppKit_NSCollectionLayoutGroupCustomItem" "AppKit_NSCollectionLayoutSection" "AppKit_NSCollectionView" "AppKit_NSControl" "AppKit_NSResponder" "AppKit_NSTableColumn" "AppKit_NSTableRowView" "AppKit_NSTableView" "AppKit_NSView" "AppKit_NSWindow" "CoreData" "CoreData_NSAsynchronousFetchResult" "CoreData_NSPersistentStoreAsynchronousResult" "CoreData_NSPersistentStoreResult" "Foundation" "Foundation_NSAppleEventDescriptor" "Foundation_NSArray" "Foundation_NSAttributedString" "Foundation_NSCoder" "Foundation_NSData" "Foundation_NSDictionary" "Foundation_NSEnumerator" "Foundation_NSError" "Foundation_NSHashTable" "Foundation_NSIndexPath" "Foundation_NSMapTable" "Foundation_NSMutableAttributedString" "Foundation_NSNumber" "Foundation_NSProcessInfo" "Foundation_NSProgress" "Foundation_NSSet" "Foundation_NSString" "Foundation_NSThread" "Foundation_NSValue" "alloc" "apple" "block" "block2" "default" "dispatch" "objc2" "objective-c" "std" ];
      };
      "idna" = rec {
        crateName = "idna";
        version = "0.5.0";
        edition = "2018";
        sha256 = "1xhjrcjqq0l5bpzvdgylvpkgk94panxgsirzhjnnqfdgc4a9nkb3";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "unicode-bidi";
            packageId = "unicode-bidi";
            usesDefaultFeatures = false;
            features = [ "hardcoded-data" ];
          }
          {
            name = "unicode-normalization";
            packageId = "unicode-normalization";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" "unicode-bidi/std" "unicode-normalization/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "image" = rec {
        crateName = "image";
        version = "0.24.7";
        edition = "2018";
        sha256 = "04d7f25b8nlszfv9a474n4a0al4m2sv9gqj3yiphhqr0syyzsgbg";
        authors = [
          "The image-rs Developers"
        ];
        dependencies = [
          {
            name = "bytemuck";
            packageId = "bytemuck";
            features = [ "extern_crate_alloc" ];
          }
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "color_quant";
            packageId = "color_quant";
          }
          {
            name = "num-rational";
            packageId = "num-rational";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "png";
            packageId = "png";
            optional = true;
          }
        ];
        features = {
          "avif" = [ "avif-encoder" ];
          "avif-decoder" = [ "mp4parse" "dcv-color-primitives" "dav1d" ];
          "avif-encoder" = [ "ravif" "rgb" ];
          "dav1d" = [ "dep:dav1d" ];
          "dcv-color-primitives" = [ "dep:dcv-color-primitives" ];
          "dds" = [ "dxt" ];
          "default" = [ "gif" "jpeg" "ico" "png" "pnm" "tga" "tiff" "webp" "bmp" "hdr" "dxt" "dds" "farbfeld" "jpeg_rayon" "openexr" "qoi" ];
          "exr" = [ "dep:exr" ];
          "gif" = [ "dep:gif" ];
          "ico" = [ "bmp" "png" ];
          "jpeg" = [ "dep:jpeg" ];
          "jpeg_rayon" = [ "jpeg/rayon" ];
          "libwebp" = [ "dep:libwebp" ];
          "mp4parse" = [ "dep:mp4parse" ];
          "openexr" = [ "exr" ];
          "png" = [ "dep:png" ];
          "qoi" = [ "dep:qoi" ];
          "ravif" = [ "dep:ravif" ];
          "rgb" = [ "dep:rgb" ];
          "tiff" = [ "dep:tiff" ];
          "webp-encoder" = [ "libwebp" ];
        };
        resolvedDefaultFeatures = [ "png" ];
      };
      "indexmap" = rec {
        crateName = "indexmap";
        version = "2.1.0";
        edition = "2021";
        sha256 = "07rxrqmryr1xfnmhrjlz8ic6jw28v6h5cig3ws2c9d0wifhy2c6m";
        dependencies = [
          {
            name = "equivalent";
            packageId = "equivalent";
            usesDefaultFeatures = false;
          }
          {
            name = "hashbrown";
            packageId = "hashbrown";
            usesDefaultFeatures = false;
            features = [ "raw" ];
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "default" = [ "std" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rayon" = [ "dep:rayon" ];
          "rustc-rayon" = [ "dep:rustc-rayon" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "ingest" = rec {
        crateName = "ingest";
        version = "0.1.0";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/ingest; }
          else ./crates/ingest;
        dependencies = [
          {
            name = "egui";
            packageId = "egui";
          }
          {
            name = "procinfo";
            packageId = "procinfo";
          }
          {
            name = "sysinfo";
            packageId = "sysinfo";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "util";
            packageId = "util";
          }
        ];

      };
      "jni" = rec {
        crateName = "jni";
        version = "0.21.1";
        edition = "2018";
        sha256 = "15wczfkr2r45slsljby12ymf2hij8wi5b104ghck9byjnwmsm1qs";
        authors = [
          "Josh Chase <josh@prevoty.com>"
        ];
        dependencies = [
          {
            name = "cesu8";
            packageId = "cesu8";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "combine";
            packageId = "combine";
          }
          {
            name = "jni-sys";
            packageId = "jni-sys";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.45.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Globalization" ];
          }
        ];
        buildDependencies = [
          {
            name = "walkdir";
            packageId = "walkdir";
          }
        ];
        features = {
          "invocation" = [ "java-locator" "libloading" ];
          "java-locator" = [ "dep:java-locator" ];
          "libloading" = [ "dep:libloading" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "jni-sys" = rec {
        crateName = "jni-sys";
        version = "0.3.0";
        edition = "2015";
        sha256 = "0c01zb9ygvwg9wdx2fii2d39myzprnpqqhy7yizxvjqp5p04pbwf";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];

      };
      "jobserver" = rec {
        crateName = "jobserver";
        version = "0.1.27";
        edition = "2018";
        sha256 = "0z9w6vfqwbr6hfk9yaw7kydlh6f7k39xdlszxlh39in4acwzcdwc";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
        ];

      };
      "js-sys" = rec {
        crateName = "js-sys";
        version = "0.3.66";
        edition = "2018";
        sha256 = "1ji9la5ydg0vy17q54i7dnwc0wwb9zkx662w1583pblylm6wdsff";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
        ];

      };
      "khronos_api" = rec {
        crateName = "khronos_api";
        version = "3.1.0";
        edition = "2015";
        sha256 = "1p0xj5mlbagqyvvnv8wmv3cr7l9y1m153888pxqwg3vk3mg5inz2";
        authors = [
          "Brendan Zabarauskas <bjzaba@yahoo.com.au>"
          "Corey Richardson"
          "Arseny Kapoulkine"
          "Pierre Krieger <pierre.krieger1708@gmail.com>"
        ];

      };
      "lazy_static" = rec {
        crateName = "lazy_static";
        version = "1.4.0";
        edition = "2015";
        sha256 = "0in6ikhw8mgl33wjv6q6xfrb5b9jr16q8ygjy803fay4zcisvaz2";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        features = {
          "spin" = [ "dep:spin" ];
          "spin_no_std" = [ "spin" ];
        };
      };
      "libc" = rec {
        crateName = "libc";
        version = "0.2.152";
        edition = "2015";
        sha256 = "1rsnma7hnw22w7jh9yqg43slddvfbnfzrvm3s7s4kinbj1jvzqqk";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "align" "rustc-std-workspace-core" ];
          "rustc-std-workspace-core" = [ "dep:rustc-std-workspace-core" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "extra_traits" "std" ];
      };
      "libloading" = rec {
        crateName = "libloading";
        version = "0.8.1";
        edition = "2015";
        sha256 = "0q812zvfag4m803ak640znl6cf8ngdd0ilzky498r6pwvmvbcwf5";
        authors = [
          "Simonas Kazlauskas <libloading@kazlauskas.me>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_System_Diagnostics_Debug" "Win32_System_LibraryLoader" ];
          }
        ];

      };
      "libredox" = rec {
        crateName = "libredox";
        version = "0.0.2";
        edition = "2021";
        sha256 = "01v6pb09j7dl2gnbvzz6zmy2k4zyxjjzvl7wacwjjffqsxajry9s";
        authors = [
          "4lDO2 <4lDO2@protonmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.4.1";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall 0.4.1";
          }
        ];
        features = {
          "default" = [ "call" ];
          "scheme" = [ "call" ];
        };
        resolvedDefaultFeatures = [ "call" "default" ];
      };
      "linux-raw-sys" = rec {
        crateName = "linux-raw-sys";
        version = "0.4.12";
        edition = "2021";
        sha256 = "0mhlla3gk1jgn6mrq9s255rvvq8a1w3yk2vpjiwsd6hmmy1imkf4";
        authors = [
          "Dan Gohman <dev@sunfishcode.online>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" "general" "errno" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" "no_std" ];
        };
        resolvedDefaultFeatures = [ "elf" "errno" "general" "if_ether" "ioctl" "net" "netlink" "no_std" "prctl" "system" ];
      };
      "lock_api" = rec {
        crateName = "lock_api";
        version = "0.4.11";
        edition = "2018";
        sha256 = "0iggx0h4jx63xm35861106af3jkxq06fpqhpkhgw0axi2n38y5iw";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "scopeguard";
            packageId = "scopeguard";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "atomic_usize" ];
          "owning_ref" = [ "dep:owning_ref" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "atomic_usize" "default" ];
      };
      "log" = rec {
        crateName = "log";
        version = "0.4.20";
        edition = "2015";
        sha256 = "13rf7wphnwd61vazpxr7fiycin6cb1g8fmvgqg18i464p0y1drmm";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "kv_unstable" = [ "value-bag" ];
          "kv_unstable_serde" = [ "kv_unstable_std" "value-bag/serde" "serde" ];
          "kv_unstable_std" = [ "std" "kv_unstable" "value-bag/error" ];
          "kv_unstable_sval" = [ "kv_unstable" "value-bag/sval" "sval" "sval_ref" ];
          "serde" = [ "dep:serde" ];
          "sval" = [ "dep:sval" ];
          "sval_ref" = [ "dep:sval_ref" ];
          "value-bag" = [ "dep:value-bag" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "malloc_buf" = rec {
        crateName = "malloc_buf";
        version = "0.0.6";
        edition = "2015";
        sha256 = "1jqr77j89pwszv51fmnknzvd53i1nkmcr8rjrvcxhm4dx1zr1fv2";
        authors = [
          "Steven Sheldon"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];

      };
      "memchr" = rec {
        crateName = "memchr";
        version = "2.7.1";
        edition = "2021";
        sha256 = "0jf1kicqa4vs9lyzj4v4y1p90q0dh87hvhsdd5xvhnp527sw8gaj";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
          "bluss"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "logging" = [ "dep:log" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
          "std" = [ "alloc" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "memmap2" = rec {
        crateName = "memmap2";
        version = "0.9.3";
        edition = "2018";
        sha256 = "14kwkwh1cr790dhrdwzyjxp2f5k1jp7w1swc7z38py0vhdbkmza5";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
          "Yevhenii Reizner <razrfalcon@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
        ];
        features = {
          "stable_deref_trait" = [ "dep:stable_deref_trait" ];
        };
      };
      "memoffset" = rec {
        crateName = "memoffset";
        version = "0.7.1";
        edition = "2015";
        sha256 = "1x2zv8hv9c9bvgmhsjvr9bymqwyxvgbca12cm8xkhpyy5k1r7s2x";
        authors = [
          "Gilad Naaman <gilad.naaman@gmail.com>"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "miniz_oxide" = rec {
        crateName = "miniz_oxide";
        version = "0.7.1";
        edition = "2018";
        sha256 = "1ivl3rbbdm53bzscrd01g60l46lz5krl270487d8lhjvwl5hx0g7";
        authors = [
          "Frommi <daniil.liferenko@gmail.com>"
          "oyvindln <oyvindln@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "adler";
            packageId = "adler";
            usesDefaultFeatures = false;
          }
          {
            name = "simd-adler32";
            packageId = "simd-adler32";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "dep:alloc" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "with-alloc" ];
          "rustc-dep-of-std" = [ "core" "alloc" "compiler_builtins" "adler/rustc-dep-of-std" ];
          "simd" = [ "simd-adler32" ];
          "simd-adler32" = [ "dep:simd-adler32" ];
        };
        resolvedDefaultFeatures = [ "default" "simd" "simd-adler32" "with-alloc" ];
      };
      "ndk" = rec {
        crateName = "ndk";
        version = "0.8.0";
        edition = "2021";
        sha256 = "1dx5yyqh32bi161mipg4br4i33syjidw81qrq0w7mc8hf0ds6xi0";
        authors = [
          "The Rust Mobile contributors"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.4.1";
          }
          {
            name = "jni-sys";
            packageId = "jni-sys";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "ndk-sys";
            packageId = "ndk-sys";
            rename = "ffi";
          }
          {
            name = "num_enum";
            packageId = "num_enum";
          }
          {
            name = "raw-window-handle";
            packageId = "raw-window-handle";
            rename = "rwh_05";
            optional = true;
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        features = {
          "all" = [ "audio" "bitmap" "media" "api-level-31" "rwh_04" "rwh_05" "rwh_06" ];
          "api-level-24" = [ "api-level-23" ];
          "api-level-25" = [ "api-level-24" ];
          "api-level-26" = [ "api-level-25" ];
          "api-level-27" = [ "api-level-26" ];
          "api-level-28" = [ "api-level-27" ];
          "api-level-29" = [ "api-level-28" ];
          "api-level-30" = [ "api-level-29" ];
          "api-level-31" = [ "api-level-30" ];
          "audio" = [ "ffi/audio" "api-level-26" ];
          "bitmap" = [ "ffi/bitmap" ];
          "default" = [ "rwh_06" ];
          "jni" = [ "dep:jni" ];
          "media" = [ "ffi/media" ];
          "rwh_04" = [ "dep:rwh_04" ];
          "rwh_05" = [ "dep:rwh_05" ];
          "rwh_06" = [ "dep:rwh_06" ];
          "sync" = [ "ffi/sync" "api-level-26" ];
          "test" = [ "ffi/test" "jni" "all" ];
        };
        resolvedDefaultFeatures = [ "rwh_05" ];
      };
      "ndk-context" = rec {
        crateName = "ndk-context";
        version = "0.1.1";
        edition = "2021";
        sha256 = "12sai3dqsblsvfd1l1zab0z6xsnlha3xsfl7kagdnmj3an3jvc17";
        authors = [
          "The Rust Windowing contributors"
        ];

      };
      "ndk-sys" = rec {
        crateName = "ndk-sys";
        version = "0.5.0+25.2.9519653";
        edition = "2021";
        sha256 = "14bnxww0f17xl8pyn6j5kpkl98snjl9lin8i7qv4zzb0vmlnf6cc";
        authors = [
          "The Rust Windowing contributors"
        ];
        dependencies = [
          {
            name = "jni-sys";
            packageId = "jni-sys";
          }
        ];
        features = {
        };
      };
      "nix 0.26.4" = rec {
        crateName = "nix";
        version = "0.26.4";
        edition = "2018";
        sha256 = "06xgl4ybb8pvjrbmc3xggbgk3kbs1j0c4c0nzdfrmpbgrkrym2sr";
        authors = [
          "The nix-rust Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            features = [ "extra_traits" ];
          }
          {
            name = "memoffset";
            packageId = "memoffset";
            optional = true;
            target = { target, features }: (!("redox" == target."os" or null));
          }
        ];
        features = {
          "aio" = [ "pin-utils" ];
          "default" = [ "acct" "aio" "dir" "env" "event" "feature" "fs" "hostname" "inotify" "ioctl" "kmod" "mman" "mount" "mqueue" "net" "personality" "poll" "process" "pthread" "ptrace" "quota" "reboot" "resource" "sched" "signal" "socket" "term" "time" "ucontext" "uio" "user" "zerocopy" ];
          "dir" = [ "fs" ];
          "memoffset" = [ "dep:memoffset" ];
          "mount" = [ "uio" ];
          "mqueue" = [ "fs" ];
          "net" = [ "socket" ];
          "pin-utils" = [ "dep:pin-utils" ];
          "ptrace" = [ "process" ];
          "sched" = [ "process" ];
          "signal" = [ "process" ];
          "socket" = [ "memoffset" ];
          "ucontext" = [ "signal" ];
          "user" = [ "feature" ];
          "zerocopy" = [ "fs" "uio" ];
        };
        resolvedDefaultFeatures = [ "event" "fs" "memoffset" "mman" "poll" "socket" "uio" ];
      };
      "nix 0.27.1" = rec {
        crateName = "nix";
        version = "0.27.1";
        edition = "2021";
        sha256 = "0ly0kkmij5f0sqz35lx9czlbk6zpihb7yh1bsy4irzwfd2f4xc1f";
        authors = [
          "The nix-rust Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.4.1";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            features = [ "extra_traits" ];
          }
        ];
        features = {
          "aio" = [ "pin-utils" ];
          "dir" = [ "fs" ];
          "memoffset" = [ "dep:memoffset" ];
          "mount" = [ "uio" ];
          "mqueue" = [ "fs" ];
          "net" = [ "socket" ];
          "pin-utils" = [ "dep:pin-utils" ];
          "ptrace" = [ "process" ];
          "sched" = [ "process" ];
          "signal" = [ "process" ];
          "socket" = [ "memoffset" ];
          "ucontext" = [ "signal" ];
          "user" = [ "feature" ];
          "zerocopy" = [ "fs" "uio" ];
        };
        resolvedDefaultFeatures = [ "default" "fs" "resource" "uio" ];
      };
      "nohash-hasher" = rec {
        crateName = "nohash-hasher";
        version = "0.2.0";
        edition = "2018";
        sha256 = "0lf4p6k01w4wm7zn4grnihzj8s7zd5qczjmzng7wviwxawih5x9b";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "nu-ansi-term" = rec {
        crateName = "nu-ansi-term";
        version = "0.46.0";
        edition = "2018";
        sha256 = "115sywxh53p190lyw97alm14nc004qj5jm5lvdj608z84rbida3p";
        authors = [
          "ogham@bsago.me"
          "Ryan Scheel (Havvy) <ryan.havvy@gmail.com>"
          "Josh Triplett <josh@joshtriplett.org>"
          "The Nushell Project Developers"
        ];
        dependencies = [
          {
            name = "overload";
            packageId = "overload";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: ("windows" == target."os" or null);
            features = [ "consoleapi" "errhandlingapi" "fileapi" "handleapi" "processenv" ];
          }
        ];
        features = {
          "derive_serde_style" = [ "serde" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "num-integer" = rec {
        crateName = "num-integer";
        version = "0.1.45";
        edition = "2015";
        sha256 = "1ncwavvwdmsqzxnn65phv6c6nn72pnv9xhpmjd6a429mzf4k6p92";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "i128" = [ "num-traits/i128" ];
          "std" = [ "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "i128" ];
      };
      "num-rational" = rec {
        crateName = "num-rational";
        version = "0.4.1";
        edition = "2018";
        sha256 = "1c0rb8x4avxy3jvvzv764yk7afipzxncfnqlb10r3h53s34s2f06";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "num-bigint-std" "std" ];
          "num-bigint" = [ "dep:num-bigint" ];
          "num-bigint-std" = [ "num-bigint/std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "num-integer/std" "num-traits/std" ];
        };
      };
      "num-traits" = rec {
        crateName = "num-traits";
        version = "0.2.17";
        edition = "2018";
        sha256 = "0z16bi5zwgfysz6765v3rd6whfbjpihx3mhsn4dg8dzj2c221qrr";
        authors = [
          "The Rust Project Developers"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "libm" = [ "dep:libm" ];
        };
        resolvedDefaultFeatures = [ "default" "i128" "std" ];
      };
      "num_enum" = rec {
        crateName = "num_enum";
        version = "0.7.2";
        edition = "2021";
        sha256 = "0i88m682kk45fa1yxm02738mf8p770dib5zqk48p8lvjxr29fcq2";
        authors = [
          "Daniel Wagner-Hall <dawagner@gmail.com>"
          "Daniel Henry-Mantilla <daniel.henry.mantilla@gmail.com>"
          "Vincent Esche <regexident@gmail.com>"
        ];
        dependencies = [
          {
            name = "num_enum_derive";
            packageId = "num_enum_derive";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "complex-expressions" = [ "num_enum_derive/complex-expressions" ];
          "default" = [ "std" ];
          "std" = [ "num_enum_derive/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "num_enum_derive" = rec {
        crateName = "num_enum_derive";
        version = "0.7.2";
        edition = "2021";
        sha256 = "0awqpdw8bbzwrq0mgim99axzxar6dl9ram8qdj83c2k06ylk0438";
        procMacro = true;
        authors = [
          "Daniel Wagner-Hall <dawagner@gmail.com>"
          "Daniel Henry-Mantilla <daniel.henry.mantilla@gmail.com>"
          "Vincent Esche <regexident@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate";
            optional = true;
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "parsing" ];
          }
        ];
        devDependencies = [
          {
            name = "syn";
            packageId = "syn";
            features = [ "extra-traits" "parsing" ];
          }
        ];
        features = {
          "complex-expressions" = [ "syn/full" ];
          "default" = [ "std" ];
          "proc-macro-crate" = [ "dep:proc-macro-crate" ];
          "std" = [ "proc-macro-crate" ];
        };
        resolvedDefaultFeatures = [ "proc-macro-crate" "std" ];
      };
      "objc" = rec {
        crateName = "objc";
        version = "0.2.7";
        edition = "2015";
        sha256 = "1cbpf6kz8a244nn1qzl3xyhmp05gsg4n313c9m3567625d3innwi";
        authors = [
          "Steven Sheldon"
        ];
        dependencies = [
          {
            name = "malloc_buf";
            packageId = "malloc_buf";
          }
        ];
        features = {
          "exception" = [ "objc_exception" ];
          "objc_exception" = [ "dep:objc_exception" ];
        };
      };
      "objc-foundation" = rec {
        crateName = "objc-foundation";
        version = "0.1.1";
        edition = "2015";
        sha256 = "1y9bwb3m5fdq7w7i4bnds067dhm4qxv4m1mbg9y61j9nkrjipp8s";
        authors = [
          "Steven Sheldon"
        ];
        dependencies = [
          {
            name = "block";
            packageId = "block";
          }
          {
            name = "objc";
            packageId = "objc";
          }
          {
            name = "objc_id";
            packageId = "objc_id";
          }
        ];

      };
      "objc-sys" = rec {
        crateName = "objc-sys";
        version = "0.3.2";
        edition = "2021";
        links = "objc_0_3";
        sha256 = "0nbl4p4dmajhm0ji1z09jrlrxhqs4jfkvj1zjschh38qwhj17iy7";
        authors = [
          "Mads Marquart <mads@marquart.dk>"
        ];
        features = {
          "cc" = [ "dep:cc" ];
          "default" = [ "std" "apple" ];
          "gnustep-1-8" = [ "gnustep-1-7" ];
          "gnustep-1-9" = [ "gnustep-1-8" ];
          "gnustep-2-0" = [ "gnustep-1-9" ];
          "gnustep-2-1" = [ "gnustep-2-0" ];
          "std" = [ "alloc" ];
          "unstable-exception" = [ "cc" ];
          "unstable-winobjc" = [ "gnustep-1-8" ];
        };
        resolvedDefaultFeatures = [ "alloc" "apple" "std" ];
      };
      "objc2" = rec {
        crateName = "objc2";
        version = "0.4.1";
        edition = "2021";
        sha256 = "13gr3zqv8gzlylff5d4za91f50asb7vsrkpv8kiva3nkzm05m72m";
        authors = [
          "Steven Sheldon"
          "Mads Marquart <mads@marquart.dk>"
        ];
        dependencies = [
          {
            name = "objc-sys";
            packageId = "objc-sys";
            usesDefaultFeatures = false;
          }
          {
            name = "objc2-encode";
            packageId = "objc2-encode";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "objc2-encode/alloc" "objc-sys/alloc" ];
          "apple" = [ "objc-sys/apple" ];
          "catch-all" = [ "exception" ];
          "default" = [ "std" "apple" ];
          "exception" = [ "objc-sys/unstable-exception" ];
          "gnustep-1-7" = [ "objc-sys/gnustep-1-7" ];
          "gnustep-1-8" = [ "gnustep-1-7" "objc-sys/gnustep-1-8" ];
          "gnustep-1-9" = [ "gnustep-1-8" "objc-sys/gnustep-1-9" ];
          "gnustep-2-0" = [ "gnustep-1-9" "objc-sys/gnustep-2-0" ];
          "gnustep-2-1" = [ "gnustep-2-0" "objc-sys/gnustep-2-1" ];
          "malloc" = [ "malloc_buf" ];
          "malloc_buf" = [ "dep:malloc_buf" ];
          "objc2-proc-macros" = [ "dep:objc2-proc-macros" ];
          "std" = [ "alloc" "objc2-encode/std" "objc-sys/std" ];
          "unstable-apple-new" = [ "apple" ];
          "unstable-compiler-rt" = [ "apple" ];
          "unstable-static-class" = [ "objc2-proc-macros" ];
          "unstable-static-class-inlined" = [ "unstable-static-class" ];
          "unstable-static-sel" = [ "objc2-proc-macros" ];
          "unstable-static-sel-inlined" = [ "unstable-static-sel" ];
          "verify" = [ "malloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "apple" "default" "relax-void-encoding" "std" ];
      };
      "objc2-encode" = rec {
        crateName = "objc2-encode";
        version = "3.0.0";
        edition = "2021";
        sha256 = "0rknhkcnyj4qv1pzqp5j8l80726phz8fcxpsbpz9nhmg6xdq8yfh";
        authors = [
          "Steven Sheldon"
          "Mads Marquart <mads@marquart.dk>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "objc_id" = rec {
        crateName = "objc_id";
        version = "0.1.1";
        edition = "2015";
        sha256 = "0fq71hnp2sdblaighjc82yrac3adfmqzhpr11irhvdfp9gdlsbf9";
        authors = [
          "Steven Sheldon"
        ];
        dependencies = [
          {
            name = "objc";
            packageId = "objc";
          }
        ];

      };
      "once_cell" = rec {
        crateName = "once_cell";
        version = "1.19.0";
        edition = "2021";
        sha256 = "14kvw7px5z96dk4dwdm1r9cqhhy2cyj1l5n5b29mynbb8yr15nrz";
        authors = [
          "Aleksey Kladov <aleksey.kladov@gmail.com>"
        ];
        features = {
          "alloc" = [ "race" ];
          "atomic-polyfill" = [ "critical-section" ];
          "critical-section" = [ "dep:critical-section" "portable-atomic" ];
          "default" = [ "std" ];
          "parking_lot" = [ "dep:parking_lot_core" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "race" "std" ];
      };
      "orbclient" = rec {
        crateName = "orbclient";
        version = "0.3.47";
        edition = "2018";
        sha256 = "0rk144mqpv27r390bjn6dfcp2314xxfila6g3njx6x4pvr5xbw2j";
        authors = [
          "Jeremy Soller <jackpot51@gmail.com>"
        ];
        dependencies = [
          {
            name = "libredox";
            packageId = "libredox";
            target = { target, features }: ("redox" == target."os" or null);
          }
        ];
        features = {
          "bundled" = [ "sdl" "sdl2/bundled" "sdl2/static-link" "sdl2-sys/bundled" "sdl2-sys/static-link" ];
          "default" = [ "std" "sdl" "unifont" ];
          "libc" = [ "dep:libc" ];
          "raw-window-handle" = [ "dep:raw-window-handle" ];
          "sdl" = [ "sdl2" "sdl2-sys" "libc" ];
          "sdl2" = [ "dep:sdl2" ];
          "sdl2-sys" = [ "dep:sdl2-sys" ];
        };
      };
      "overload" = rec {
        crateName = "overload";
        version = "0.1.1";
        edition = "2018";
        sha256 = "0fdgbaqwknillagy1xq7xfgv60qdbk010diwl7s1p0qx7hb16n5i";
        authors = [
          "Daniel Salvadori <danaugrs@gmail.com>"
        ];

      };
      "owned_ttf_parser" = rec {
        crateName = "owned_ttf_parser";
        version = "0.20.0";
        edition = "2021";
        sha256 = "1rr38229kigjp4mzwpgz5qhjpd9jrfx88k57jwbwfj66wkgnwn6l";
        authors = [
          "Alex Butler <alexheretic@gmail.com>"
        ];
        dependencies = [
          {
            name = "ttf-parser";
            packageId = "ttf-parser";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "apple-layout" = [ "ttf-parser/apple-layout" ];
          "default" = [ "std" "opentype-layout" "apple-layout" "variable-fonts" "glyph-names" ];
          "glyph-names" = [ "ttf-parser/glyph-names" ];
          "gvar-alloc" = [ "std" "ttf-parser/gvar-alloc" ];
          "opentype-layout" = [ "ttf-parser/opentype-layout" ];
          "std" = [ "ttf-parser/std" ];
          "variable-fonts" = [ "ttf-parser/variable-fonts" ];
        };
        resolvedDefaultFeatures = [ "apple-layout" "default" "glyph-names" "opentype-layout" "std" "variable-fonts" ];
      };
      "parking_lot" = rec {
        crateName = "parking_lot";
        version = "0.12.1";
        edition = "2018";
        sha256 = "13r2xk7mnxfc5g0g6dkdxqdqad99j7s7z8zhzz4npw5r0g0v4hip";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "lock_api";
            packageId = "lock_api";
          }
          {
            name = "parking_lot_core";
            packageId = "parking_lot_core";
          }
        ];
        features = {
          "arc_lock" = [ "lock_api/arc_lock" ];
          "deadlock_detection" = [ "parking_lot_core/deadlock_detection" ];
          "nightly" = [ "parking_lot_core/nightly" "lock_api/nightly" ];
          "owning_ref" = [ "lock_api/owning_ref" ];
          "serde" = [ "lock_api/serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "parking_lot_core" = rec {
        crateName = "parking_lot_core";
        version = "0.9.9";
        edition = "2018";
        sha256 = "13h0imw1aq86wj28gxkblhkzx6z1gk8q18n0v76qmmj6cliajhjc";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall 0.4.1";
            target = { target, features }: ("redox" == target."os" or null);
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.48.5";
            target = { target, features }: (target."windows" or false);
          }
        ];
        features = {
          "backtrace" = [ "dep:backtrace" ];
          "deadlock_detection" = [ "petgraph" "thread-id" "backtrace" ];
          "petgraph" = [ "dep:petgraph" ];
          "thread-id" = [ "dep:thread-id" ];
        };
      };
      "percent-encoding" = rec {
        crateName = "percent-encoding";
        version = "2.3.1";
        edition = "2018";
        sha256 = "0gi8wgx0dcy8rnv1kywdv98lwcx67hz0a0zwpib5v2i08r88y573";
        authors = [
          "The rust-url developers"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "pi" = rec {
        crateName = "pi";
        version = "0.1.0";
        edition = "2021";
        crateBin = [
          {
            name = "pi";
            path = "src/main.rs";
            requiredFeatures = [ ];
          }
        ];
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/pi; }
          else ./crates/pi;
        dependencies = [
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" ];
          }
          {
            name = "eframe";
            packageId = "eframe";
            usesDefaultFeatures = false;
            features = [ "default_fonts" "glow" "wayland" ];
          }
          {
            name = "egui_plot";
            packageId = "egui_plot";
          }
          {
            name = "ingest";
            packageId = "ingest";
          }
          {
            name = "procinfo";
            packageId = "procinfo";
          }
          {
            name = "sysinfo";
            packageId = "sysinfo";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber";
          }
          {
            name = "util";
            packageId = "util";
          }
        ];

      };
      "pin-project-lite" = rec {
        crateName = "pin-project-lite";
        version = "0.2.13";
        edition = "2018";
        sha256 = "0n0bwr5qxlf0mhn2xkl36sy55118s9qmvx2yl5f3ixkb007lbywa";

      };
      "pkg-config" = rec {
        crateName = "pkg-config";
        version = "0.3.28";
        edition = "2015";
        sha256 = "16kgffwncx5hsppsdf54z6jnjkhwywqy601cxk3rqncyi9zmilv9";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];

      };
      "png" = rec {
        crateName = "png";
        version = "0.17.10";
        edition = "2018";
        sha256 = "0r5a8a25ad0jq2pkp2zbab3wwhpgp6jmdg6d0ybjnw6kilnvyxfx";
        authors = [
          "The image-rs Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "crc32fast";
            packageId = "crc32fast";
          }
          {
            name = "fdeflate";
            packageId = "fdeflate";
          }
          {
            name = "flate2";
            packageId = "flate2";
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide";
            features = [ "simd" ];
          }
        ];
        features = {
        };
      };
      "polling" = rec {
        crateName = "polling";
        version = "3.3.1";
        edition = "2021";
        sha256 = "17hwk4g8qbdsyr0kqjddhw0l2v64pxhakkdlaqbc24xk99iglqyg";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "John Nunley <dev@notgull.net>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "concurrent-queue";
            packageId = "concurrent-queue";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "rustix";
            packageId = "rustix";
            usesDefaultFeatures = false;
            target = { target, features }: ((target."unix" or false) || ("fuchsia" == target."os" or null) || ("vxworks" == target."os" or null));
            features = [ "event" "fs" "pipe" "process" "std" "time" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Wdk_Foundation" "Wdk_Storage_FileSystem" "Win32_Foundation" "Win32_Networking_WinSock" "Win32_Security" "Win32_Storage_FileSystem" "Win32_System_IO" "Win32_System_LibraryLoader" "Win32_System_Threading" "Win32_System_WindowsProgramming" ];
          }
        ];

      };
      "proc-macro-crate" = rec {
        crateName = "proc-macro-crate";
        version = "1.3.1";
        edition = "2021";
        sha256 = "069r1k56bvgk0f58dm5swlssfcp79im230affwk6d9ck20g04k3z";
        authors = [
          "Bastian Köcher <git@kchr.de>"
        ];
        dependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "toml_edit";
            packageId = "toml_edit";
          }
        ];

      };
      "proc-macro2" = rec {
        crateName = "proc-macro2";
        version = "1.0.76";
        edition = "2021";
        sha256 = "136cp0fgl6rg5ljm3b1xpc0bn0lyvagzzmxvbxgk5hxml36mdz4m";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "procinfo" = rec {
        crateName = "procinfo";
        version = "0.1.0";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/procinfo; }
          else ./crates/procinfo;
        dependencies = [
          {
            name = "either";
            packageId = "either";
          }
          {
            name = "nix";
            packageId = "nix 0.27.1";
            features = [ "uio" "resource" "fs" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "util";
            packageId = "util";
          }
        ];

      };
      "quick-xml" = rec {
        crateName = "quick-xml";
        version = "0.30.0";
        edition = "2018";
        sha256 = "0mp9cqy06blsaka3r1n2p40ddmzhsf7bx37x22r5faw6hq753xpg";
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "async-tokio" = [ "tokio" ];
          "document-features" = [ "dep:document-features" ];
          "encoding" = [ "encoding_rs" ];
          "encoding_rs" = [ "dep:encoding_rs" ];
          "serde" = [ "dep:serde" ];
          "serde-types" = [ "serde/derive" ];
          "serialize" = [ "serde" ];
          "tokio" = [ "dep:tokio" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "quote" = rec {
        crateName = "quote";
        version = "1.0.35";
        edition = "2018";
        sha256 = "1vv8r2ncaz4pqdr78x7f138ka595sp2ncr1sa2plm4zxbsmwj7i9";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "raw-window-handle" = rec {
        crateName = "raw-window-handle";
        version = "0.5.2";
        edition = "2021";
        sha256 = "1f9k10fgda464ia1b2hni8f0sa8i0bphdsbs3di032x80qgrmzzj";
        authors = [
          "Osspial <osspial@gmail.com>"
        ];
        features = {
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "redox_syscall 0.3.5" = rec {
        crateName = "redox_syscall";
        version = "0.3.5";
        edition = "2018";
        sha256 = "0acgiy2lc1m2vr8cr33l5s7k9wzby8dybyab1a9p753hcbr68xjn";
        libName = "syscall";
        authors = [
          "Jeremy Soller <jackpot51@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
        ];
        features = {
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "bitflags/rustc-dep-of-std" ];
        };
      };
      "redox_syscall 0.4.1" = rec {
        crateName = "redox_syscall";
        version = "0.4.1";
        edition = "2018";
        sha256 = "1aiifyz5dnybfvkk4cdab9p2kmphag1yad6iknc7aszlxxldf8j7";
        libName = "syscall";
        authors = [
          "Jeremy Soller <jackpot51@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
        ];
        features = {
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "bitflags/rustc-dep-of-std" ];
        };
      };
      "rustix" = rec {
        crateName = "rustix";
        version = "0.38.28";
        edition = "2021";
        sha256 = "05m3vacvbqbg6r6ksmx9k5afpi0lppjdv712crrpsrfax2jp5rbj";
        authors = [
          "Dan Gohman <dev@sunfishcode.online>"
          "Jakub Konka <kubkon@jakubkonka.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.4.1";
            usesDefaultFeatures = false;
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."rustix_use_libc" or false)) && (!(target."miri" or false)) && ("linux" == target."os" or null) && ("little" == target."endian" or null) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))));
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."windows" or false)) && ((target."rustix_use_libc" or false) || (target."miri" or false) || (!(("linux" == target."os" or null) && ("little" == target."endian" or null) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null)))))));
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."rustix_use_libc" or false)) && (!(target."miri" or false)) && ("linux" == target."os" or null) && ("little" == target."endian" or null) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))));
            features = [ "extra_traits" ];
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."windows" or false)) && ((target."rustix_use_libc" or false) || (target."miri" or false) || (!(("linux" == target."os" or null) && ("little" == target."endian" or null) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null)))))));
            features = [ "extra_traits" ];
          }
          {
            name = "linux-raw-sys";
            packageId = "linux-raw-sys";
            usesDefaultFeatures = false;
            target = { target, features }: ((("android" == target."os" or null) || ("linux" == target."os" or null)) && ((target."rustix_use_libc" or false) || (target."miri" or false) || (!(("linux" == target."os" or null) && ("little" == target."endian" or null) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null)))))));
            features = [ "general" "ioctl" "no_std" ];
          }
          {
            name = "linux-raw-sys";
            packageId = "linux-raw-sys";
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."rustix_use_libc" or false)) && (!(target."miri" or false)) && ("linux" == target."os" or null) && ("little" == target."endian" or null) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))));
            features = [ "general" "errno" "ioctl" "no_std" "elf" ];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Networking_WinSock" "Win32_NetworkManagement_IpHelper" "Win32_System_Threading" ];
          }
        ];
        devDependencies = [
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "all-apis" = [ "event" "fs" "io_uring" "mm" "mount" "net" "param" "pipe" "process" "procfs" "pty" "rand" "runtime" "shm" "stdio" "system" "termios" "thread" "time" ];
          "default" = [ "std" "use-libc-auxv" ];
          "io_uring" = [ "event" "fs" "net" "linux-raw-sys/io_uring" ];
          "itoa" = [ "dep:itoa" ];
          "libc" = [ "dep:libc" ];
          "libc_errno" = [ "dep:libc_errno" ];
          "linux_latest" = [ "linux_4_11" ];
          "net" = [ "linux-raw-sys/net" "linux-raw-sys/netlink" "linux-raw-sys/if_ether" ];
          "once_cell" = [ "dep:once_cell" ];
          "param" = [ "fs" ];
          "process" = [ "linux-raw-sys/prctl" ];
          "procfs" = [ "once_cell" "itoa" "fs" ];
          "pty" = [ "itoa" "fs" ];
          "runtime" = [ "linux-raw-sys/prctl" ];
          "rustc-dep-of-std" = [ "dep:core" "dep:alloc" "dep:compiler_builtins" "linux-raw-sys/rustc-dep-of-std" "bitflags/rustc-dep-of-std" "compiler_builtins?/rustc-dep-of-std" ];
          "shm" = [ "fs" ];
          "std" = [ "bitflags/std" "alloc" "libc?/std" "libc_errno?/std" ];
          "system" = [ "linux-raw-sys/system" ];
          "thread" = [ "linux-raw-sys/prctl" ];
          "use-libc" = [ "libc_errno" "libc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "event" "fs" "net" "pipe" "process" "shm" "std" "system" "thread" "time" "use-libc-auxv" ];
      };
      "same-file" = rec {
        crateName = "same-file";
        version = "1.0.6";
        edition = "2018";
        sha256 = "00h5j1w87dmhnvbv9l8bic3y7xxsnjmssvifw2ayvgx9mb1ivz4k";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = { target, features }: (target."windows" or false);
          }
        ];

      };
      "scoped-tls" = rec {
        crateName = "scoped-tls";
        version = "1.0.1";
        edition = "2015";
        sha256 = "15524h04mafihcvfpgxd8f4bgc3k95aclz8grjkg9a0rxcvn9kz1";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];

      };
      "scopeguard" = rec {
        crateName = "scopeguard";
        version = "1.2.0";
        edition = "2015";
        sha256 = "0jcz9sd47zlsgcnm1hdw0664krxwb5gczlif4qngj2aif8vky54l";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
        };
      };
      "serde" = rec {
        crateName = "serde";
        version = "1.0.195";
        edition = "2018";
        sha256 = "00kbc86kgaihpza0zdglcd2qq5468yg0dvvdmkli2y660bs1s9k3";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            target = { target, features }: false;
          }
        ];
        devDependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
        ];
        features = {
          "default" = [ "std" ];
          "derive" = [ "serde_derive" ];
          "serde_derive" = [ "dep:serde_derive" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "serde_derive" = rec {
        crateName = "serde_derive";
        version = "1.0.195";
        edition = "2015";
        sha256 = "0b7ag1qm9q3fgwlmyk2ap5gjbqa9vyf2wfmj4xish6yq0f38zzj6";
        procMacro = true;
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "sharded-slab" = rec {
        crateName = "sharded-slab";
        version = "0.1.7";
        edition = "2018";
        sha256 = "1xipjr4nqsgw34k7a2cgj9zaasl2ds6jwn89886kww93d32a637l";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
        ];
        features = {
          "loom" = [ "dep:loom" ];
        };
      };
      "simd-adler32" = rec {
        crateName = "simd-adler32";
        version = "0.3.7";
        edition = "2018";
        sha256 = "1zkq40c3iajcnr5936gjp9jjh1lpzhy44p3dq3fiw75iwr1w2vfn";
        authors = [
          "Marvin Countryman <me@maar.vin>"
        ];
        features = {
          "default" = [ "std" "const-generics" ];
        };
        resolvedDefaultFeatures = [ "const-generics" "default" "std" ];
      };
      "slab" = rec {
        crateName = "slab";
        version = "0.4.9";
        edition = "2018";
        sha256 = "0rxvsgir0qw5lkycrqgb1cxsvxzjv9bmx73bk5y42svnzfba94lg";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "slotmap" = rec {
        crateName = "slotmap";
        version = "1.0.7";
        edition = "2018";
        sha256 = "0amqb2fn9lcy1ri0risblkcp88dl0rnfmynw7lx0nqwza77lmzyv";
        authors = [
          "Orson Peters <orsonpeters@gmail.com>"
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "smallvec" = rec {
        crateName = "smallvec";
        version = "1.11.2";
        edition = "2018";
        sha256 = "0w79x38f7c0np7hqfmzrif9zmn0avjvvm31b166zdk9d1aad1k2d";
        authors = [
          "The Servo Project Developers"
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "const_new" = [ "const_generics" ];
          "drain_keep_rest" = [ "drain_filter" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "const_generics" "const_new" "union" ];
      };
      "smithay-client-toolkit" = rec {
        crateName = "smithay-client-toolkit";
        version = "0.18.0";
        edition = "2021";
        sha256 = "03v0h71qzg5iw5nd2k15a50ic55a9wq6bc7l5dyczfm33yadkqv0";
        authors = [
          "Elinor Berger <elinor@safaradeg.net>"
          "i509VCB <mail@i509.me>"
          "Ashley Wulber <ashley@system76.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.4.1";
          }
          {
            name = "calloop";
            packageId = "calloop";
            optional = true;
          }
          {
            name = "calloop-wayland-source";
            packageId = "calloop-wayland-source";
            optional = true;
          }
          {
            name = "cursor-icon";
            packageId = "cursor-icon";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "memmap2";
            packageId = "memmap2";
          }
          {
            name = "rustix";
            packageId = "rustix";
            features = [ "fs" "pipe" "shm" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "wayland-backend";
            packageId = "wayland-backend";
          }
          {
            name = "wayland-client";
            packageId = "wayland-client";
          }
          {
            name = "wayland-csd-frame";
            packageId = "wayland-csd-frame";
          }
          {
            name = "wayland-cursor";
            packageId = "wayland-cursor";
          }
          {
            name = "wayland-protocols";
            packageId = "wayland-protocols";
            features = [ "client" "staging" "unstable" ];
          }
          {
            name = "wayland-protocols-wlr";
            packageId = "wayland-protocols-wlr";
            features = [ "client" ];
          }
          {
            name = "wayland-scanner";
            packageId = "wayland-scanner";
          }
          {
            name = "xkeysym";
            packageId = "xkeysym";
          }
        ];
        features = {
          "bytemuck" = [ "dep:bytemuck" ];
          "calloop" = [ "dep:calloop" "calloop-wayland-source" ];
          "calloop-wayland-source" = [ "dep:calloop-wayland-source" ];
          "default" = [ "calloop" "xkbcommon" ];
          "pkg-config" = [ "dep:pkg-config" ];
          "xkbcommon" = [ "dep:xkbcommon" "bytemuck" "pkg-config" "xkeysym/bytemuck" ];
        };
        resolvedDefaultFeatures = [ "calloop" "calloop-wayland-source" ];
      };
      "smithay-clipboard" = rec {
        crateName = "smithay-clipboard";
        version = "0.7.0";
        edition = "2021";
        sha256 = "19m1rqw4fsp9x92cji9qz169004djjh376b68ylcp9g51hl2pdhb";
        authors = [
          "Kirill Chibisov <contact@kchibisov.com>"
          "Victor Berger <victor.berger@m4x.org>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "smithay-client-toolkit";
            packageId = "smithay-client-toolkit";
            rename = "sctk";
            usesDefaultFeatures = false;
            features = [ "calloop" ];
          }
          {
            name = "wayland-backend";
            packageId = "wayland-backend";
            usesDefaultFeatures = false;
            features = [ "client_system" ];
          }
        ];
        devDependencies = [
          {
            name = "smithay-client-toolkit";
            packageId = "smithay-client-toolkit";
            rename = "sctk";
            usesDefaultFeatures = false;
            features = [ "calloop" "xkbcommon" ];
          }
        ];
        features = {
          "default" = [ "dlopen" ];
          "dlopen" = [ "wayland-backend/dlopen" ];
        };
        resolvedDefaultFeatures = [ "default" "dlopen" ];
      };
      "smol_str" = rec {
        crateName = "smol_str";
        version = "0.2.0";
        edition = "2018";
        sha256 = "1779hpx5ipbcvkdj5zw8zqk3ynn160qvls1gkcr54hwsprmjw8bl";
        authors = [
          "Aleksey Kladov <aleksey.kladov@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "serde?/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "static_assertions" = rec {
        crateName = "static_assertions";
        version = "1.1.0";
        edition = "2015";
        sha256 = "0gsl6xmw10gvn3zs1rv99laj5ig7ylffnh71f9l34js4nr4r7sx2";
        authors = [
          "Nikolai Vazquez"
        ];
        features = {
        };
      };
      "str-buf" = rec {
        crateName = "str-buf";
        version = "1.0.6";
        edition = "2018";
        sha256 = "1l7q4nha7wpsr0970bfqm773vhmpwr9l6rr8r4gwgrh46wvdh24y";
        authors = [
          "Douman <douman@gmx.se>"
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
      };
      "strsim" = rec {
        crateName = "strsim";
        version = "0.10.0";
        edition = "2015";
        sha256 = "08s69r4rcrahwnickvi0kq49z524ci50capybln83mg6b473qivk";
        authors = [
          "Danny Guo <danny@dannyguo.com>"
        ];

      };
      "syn" = rec {
        crateName = "syn";
        version = "2.0.48";
        edition = "2021";
        sha256 = "0gqgfygmrxmp8q32lia9p294kdd501ybn6kn2h4gqza0irik2d8g";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = [ "derive" "parsing" "printing" "clone-impls" "proc-macro" ];
          "printing" = [ "quote" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "quote/proc-macro" ];
          "quote" = [ "dep:quote" ];
          "test" = [ "syn-test-suite/all-features" ];
        };
        resolvedDefaultFeatures = [ "clone-impls" "default" "derive" "extra-traits" "full" "parsing" "printing" "proc-macro" "quote" "visit" "visit-mut" ];
      };
      "sysinfo" = rec {
        crateName = "sysinfo";
        version = "0.1.0";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/sysinfo; }
          else ./crates/sysinfo;
        dependencies = [
          {
            name = "nix";
            packageId = "nix 0.27.1";
            features = [ "uio" "resource" "fs" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "util";
            packageId = "util";
          }
        ];

      };
      "thiserror" = rec {
        crateName = "thiserror";
        version = "1.0.56";
        edition = "2021";
        sha256 = "1b9hnzngjan4d89zjs16i01bcpcnvdwklyh73lj16xk28p37hhym";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "thiserror-impl";
            packageId = "thiserror-impl";
          }
        ];

      };
      "thiserror-impl" = rec {
        crateName = "thiserror-impl";
        version = "1.0.56";
        edition = "2021";
        sha256 = "0w9ldp8fa574ilz4dn7y7scpcq66vdjy59qal8qdpwsh7faal3zs";
        procMacro = true;
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
        ];

      };
      "thread_local" = rec {
        crateName = "thread_local";
        version = "1.1.7";
        edition = "2021";
        sha256 = "0lp19jdgvp5m4l60cgxdnl00yw1hlqy8gcywg9bddwng9h36zp9z";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
        ];
        features = {
        };
      };
      "tinyvec" = rec {
        crateName = "tinyvec";
        version = "1.6.0";
        edition = "2018";
        sha256 = "0l6bl2h62a5m44jdnpn7lmj14rd44via8180i7121fvm73mmrk47";
        authors = [
          "Lokathor <zefria@gmail.com>"
        ];
        dependencies = [
          {
            name = "tinyvec_macros";
            packageId = "tinyvec_macros";
            optional = true;
          }
        ];
        features = {
          "alloc" = [ "tinyvec_macros" ];
          "arbitrary" = [ "dep:arbitrary" ];
          "real_blackbox" = [ "criterion/real_blackbox" ];
          "rustc_1_55" = [ "rustc_1_40" ];
          "rustc_1_57" = [ "rustc_1_55" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
          "tinyvec_macros" = [ "dep:tinyvec_macros" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "tinyvec_macros" ];
      };
      "tinyvec_macros" = rec {
        crateName = "tinyvec_macros";
        version = "0.1.1";
        edition = "2018";
        sha256 = "081gag86208sc3y6sdkshgw3vysm5d34p431dzw0bshz66ncng0z";
        authors = [
          "Soveu <marx.tomasz@gmail.com>"
        ];

      };
      "toml_datetime" = rec {
        crateName = "toml_datetime";
        version = "0.6.5";
        edition = "2021";
        sha256 = "1wds4pm2cn6agd38f0ivm65xnc7c7bmk9m0fllcaq82nd3lz8l1m";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
      };
      "toml_edit" = rec {
        crateName = "toml_edit";
        version = "0.19.15";
        edition = "2021";
        sha256 = "08bl7rp5g6jwmfpad9s8jpw8wjrciadpnbaswgywpr9hv9qbfnqv";
        authors = [
          "Andronik Ordian <write@reusable.software>"
          "Ed Page <eopage@gmail.com>"
        ];
        dependencies = [
          {
            name = "indexmap";
            packageId = "indexmap";
            features = [ "std" ];
          }
          {
            name = "toml_datetime";
            packageId = "toml_datetime";
          }
          {
            name = "winnow";
            packageId = "winnow";
          }
        ];
        features = {
          "perf" = [ "dep:kstring" ];
          "serde" = [ "dep:serde" "toml_datetime/serde" "dep:serde_spanned" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "tracing" = rec {
        crateName = "tracing";
        version = "0.1.40";
        edition = "2018";
        sha256 = "1vv48dac9zgj9650pg2b4d0j3w6f3x9gbggf43scq5hrlysklln3";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tracing-attributes";
            packageId = "tracing-attributes";
            optional = true;
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "attributes" = [ "tracing-attributes" ];
          "default" = [ "std" "attributes" ];
          "log" = [ "dep:log" ];
          "log-always" = [ "log" ];
          "std" = [ "tracing-core/std" ];
          "tracing-attributes" = [ "dep:tracing-attributes" ];
          "valuable" = [ "tracing-core/valuable" ];
        };
        resolvedDefaultFeatures = [ "attributes" "default" "std" "tracing-attributes" ];
      };
      "tracing-attributes" = rec {
        crateName = "tracing-attributes";
        version = "0.1.27";
        edition = "2018";
        sha256 = "1rvb5dn9z6d0xdj14r403z0af0bbaqhg02hq4jc97g5wds6lqw1l";
        procMacro = true;
        authors = [
          "Tokio Contributors <team@tokio.rs>"
          "Eliza Weisman <eliza@buoyant.io>"
          "David Barsky <dbarsky@amazon.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            usesDefaultFeatures = false;
            features = [ "full" "parsing" "printing" "visit-mut" "clone-impls" "extra-traits" "proc-macro" ];
          }
        ];
        features = {
        };
      };
      "tracing-core" = rec {
        crateName = "tracing-core";
        version = "0.1.32";
        edition = "2018";
        sha256 = "0m5aglin3cdwxpvbg6kz0r9r0k31j48n0kcfwsp6l49z26k3svf0";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
          }
          {
            name = "valuable";
            packageId = "valuable";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (target."tracing_unstable" or false);
          }
        ];
        features = {
          "default" = [ "std" "valuable/std" ];
          "once_cell" = [ "dep:once_cell" ];
          "std" = [ "once_cell" ];
          "valuable" = [ "dep:valuable" ];
        };
        resolvedDefaultFeatures = [ "default" "once_cell" "std" "valuable" ];
      };
      "tracing-log" = rec {
        crateName = "tracing-log";
        version = "0.2.0";
        edition = "2018";
        sha256 = "1hs77z026k730ij1a9dhahzrl0s073gfa2hm5p0fbl0b80gmz1gf";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
          }
        ];
        features = {
          "ahash" = [ "dep:ahash" ];
          "default" = [ "log-tracer" "std" ];
          "interest-cache" = [ "lru" "ahash" ];
          "lru" = [ "dep:lru" ];
          "std" = [ "log/std" ];
        };
        resolvedDefaultFeatures = [ "log-tracer" "std" ];
      };
      "tracing-subscriber" = rec {
        crateName = "tracing-subscriber";
        version = "0.3.18";
        edition = "2018";
        sha256 = "12vs1bwk4kig1l2qqjbbn2nm5amwiqmkcmnznylzmnfvjy6083xd";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
          "David Barsky <me@davidbarsky.com>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "nu-ansi-term";
            packageId = "nu-ansi-term";
            optional = true;
          }
          {
            name = "sharded-slab";
            packageId = "sharded-slab";
            optional = true;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            optional = true;
          }
          {
            name = "thread_local";
            packageId = "thread_local";
            optional = true;
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
            usesDefaultFeatures = false;
          }
          {
            name = "tracing-log";
            packageId = "tracing-log";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "log-tracer" "std" ];
          }
        ];
        devDependencies = [
          {
            name = "tracing-log";
            packageId = "tracing-log";
          }
        ];
        features = {
          "ansi" = [ "fmt" "nu-ansi-term" ];
          "chrono" = [ "dep:chrono" ];
          "default" = [ "smallvec" "fmt" "ansi" "tracing-log" "std" ];
          "env-filter" = [ "matchers" "regex" "once_cell" "tracing" "std" "thread_local" ];
          "fmt" = [ "registry" "std" ];
          "json" = [ "tracing-serde" "serde" "serde_json" ];
          "local-time" = [ "time/local-offset" ];
          "matchers" = [ "dep:matchers" ];
          "nu-ansi-term" = [ "dep:nu-ansi-term" ];
          "once_cell" = [ "dep:once_cell" ];
          "parking_lot" = [ "dep:parking_lot" ];
          "regex" = [ "dep:regex" ];
          "registry" = [ "sharded-slab" "thread_local" "std" ];
          "serde" = [ "dep:serde" ];
          "serde_json" = [ "dep:serde_json" ];
          "sharded-slab" = [ "dep:sharded-slab" ];
          "smallvec" = [ "dep:smallvec" ];
          "std" = [ "alloc" "tracing-core/std" ];
          "thread_local" = [ "dep:thread_local" ];
          "time" = [ "dep:time" ];
          "tracing" = [ "dep:tracing" ];
          "tracing-log" = [ "dep:tracing-log" ];
          "tracing-serde" = [ "dep:tracing-serde" ];
          "valuable" = [ "tracing-core/valuable" "valuable_crate" "valuable-serde" "tracing-serde/valuable" ];
          "valuable-serde" = [ "dep:valuable-serde" ];
          "valuable_crate" = [ "dep:valuable_crate" ];
        };
        resolvedDefaultFeatures = [ "alloc" "ansi" "default" "fmt" "nu-ansi-term" "registry" "sharded-slab" "smallvec" "std" "thread_local" "tracing-log" ];
      };
      "ttf-parser" = rec {
        crateName = "ttf-parser";
        version = "0.20.0";
        edition = "2018";
        sha256 = "1d4n3p9ccjvy4mj72700i0c2q6d49dxjpwflw47q79rpv1v7vxqp";
        authors = [
          "Yevhenii Reizner <razrfalcon@gmail.com>"
        ];
        features = {
          "default" = [ "std" "opentype-layout" "apple-layout" "variable-fonts" "glyph-names" ];
          "gvar-alloc" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "apple-layout" "glyph-names" "opentype-layout" "std" "variable-fonts" ];
      };
      "unicode-bidi" = rec {
        crateName = "unicode-bidi";
        version = "0.3.14";
        edition = "2018";
        sha256 = "05i4ps31vskq1wdp8yf315fxivyh1frijly9d4gb5clygbr2h9bg";
        libName = "unicode_bidi";
        authors = [
          "The Servo Project Developers"
        ];
        features = {
          "default" = [ "std" "hardcoded-data" ];
          "flame" = [ "dep:flame" ];
          "flame_it" = [ "flame" "flamer" ];
          "flamer" = [ "dep:flamer" ];
          "serde" = [ "dep:serde" ];
          "with_serde" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "hardcoded-data" "std" ];
      };
      "unicode-ident" = rec {
        crateName = "unicode-ident";
        version = "1.0.12";
        edition = "2018";
        sha256 = "0jzf1znfpb2gx8nr8mvmyqs1crnv79l57nxnbiszc7xf7ynbjm1k";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "unicode-normalization" = rec {
        crateName = "unicode-normalization";
        version = "0.1.22";
        edition = "2018";
        sha256 = "08d95g7b1irc578b2iyhzv4xhsa4pfvwsqxcl9lbcpabzkq16msw";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "tinyvec";
            packageId = "tinyvec";
            features = [ "alloc" ];
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "unicode-segmentation" = rec {
        crateName = "unicode-segmentation";
        version = "1.10.1";
        edition = "2018";
        sha256 = "0dky2hm5k51xy11hc3nk85p533rvghd462b6i0c532b7hl4j9mhx";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
        };
      };
      "url" = rec {
        crateName = "url";
        version = "2.5.0";
        edition = "2018";
        sha256 = "0cs65961miawncdg2z20171w0vqrmraswv2ihdpd8lxp7cp31rii";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "form_urlencoded";
            packageId = "form_urlencoded";
          }
          {
            name = "idna";
            packageId = "idna";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "utf8parse" = rec {
        crateName = "utf8parse";
        version = "0.2.1";
        edition = "2018";
        sha256 = "02ip1a0az0qmc2786vxk2nqwsgcwf17d3a38fkf0q7hrmwh9c6vi";
        authors = [
          "Joe Wilm <joe@jwilm.com>"
          "Christian Duerr <contact@christianduerr.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "util" = rec {
        crateName = "util";
        version = "0.1.0";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/util; }
          else ./crates/util;
        dependencies = [
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];

      };
      "valuable" = rec {
        crateName = "valuable";
        version = "0.1.0";
        edition = "2018";
        sha256 = "0v9gp3nkjbl30z0fd56d8mx7w1csk86wwjhfjhr400wh9mfpw2w3";
        features = {
          "default" = [ "std" ];
          "derive" = [ "valuable-derive" ];
          "std" = [ "alloc" ];
          "valuable-derive" = [ "dep:valuable-derive" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "version_check" = rec {
        crateName = "version_check";
        version = "0.9.4";
        edition = "2015";
        sha256 = "0gs8grwdlgh0xq660d7wr80x14vxbizmd8dbp29p2pdncx8lp1s9";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];

      };
      "walkdir" = rec {
        crateName = "walkdir";
        version = "2.4.0";
        edition = "2018";
        sha256 = "1vjl9fmfc4v8k9ald23qrpcbyb8dl1ynyq8d516cm537r1yqa7fp";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "same-file";
            packageId = "same-file";
          }
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = { target, features }: (target."windows" or false);
          }
        ];

      };
      "wasi" = rec {
        crateName = "wasi";
        version = "0.11.0+wasi-snapshot-preview1";
        edition = "2018";
        sha256 = "08z4hxwkpdpalxjps1ai9y7ihin26y9f476i53dv98v45gkqg3cw";
        authors = [
          "The Cranelift Project Developers"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "compiler_builtins" "core" "rustc-std-workspace-alloc" ];
          "rustc-std-workspace-alloc" = [ "dep:rustc-std-workspace-alloc" ];
        };
      };
      "wasm-bindgen" = rec {
        crateName = "wasm-bindgen";
        version = "0.2.89";
        edition = "2018";
        sha256 = "0kh6akdldy13z9xqj0skz6b4npq1d98bjkgzb8ccq59hibvd9l0f";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "wasm-bindgen-macro";
            packageId = "wasm-bindgen-macro";
          }
        ];
        features = {
          "default" = [ "spans" "std" ];
          "enable-interning" = [ "std" ];
          "gg-alloc" = [ "wasm-bindgen-test/gg-alloc" ];
          "serde" = [ "dep:serde" ];
          "serde-serialize" = [ "serde" "serde_json" "std" ];
          "serde_json" = [ "dep:serde_json" ];
          "spans" = [ "wasm-bindgen-macro/spans" ];
          "strict-macro" = [ "wasm-bindgen-macro/strict-macro" ];
          "xxx_debug_only_print_generated_code" = [ "wasm-bindgen-macro/xxx_debug_only_print_generated_code" ];
        };
        resolvedDefaultFeatures = [ "default" "spans" "std" ];
      };
      "wasm-bindgen-backend" = rec {
        crateName = "wasm-bindgen-backend";
        version = "0.2.89";
        edition = "2018";
        sha256 = "09l8lyylsdssz993h4fzja69zpvpykaw84fivs210fjgwqjzcmhv";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "bumpalo";
            packageId = "bumpalo";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "full" ];
          }
          {
            name = "wasm-bindgen-shared";
            packageId = "wasm-bindgen-shared";
          }
        ];
        features = {
          "extra-traits" = [ "syn/extra-traits" ];
        };
        resolvedDefaultFeatures = [ "spans" ];
      };
      "wasm-bindgen-futures" = rec {
        crateName = "wasm-bindgen-futures";
        version = "0.4.39";
        edition = "2018";
        sha256 = "04lsxpw4jqfwh7c0crzx0smj52nvwp1w3bh4098sq90149da2dmc";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: (builtins.elem "atomics" targetFeatures);
            features = [ "MessageEvent" "Worker" ];
          }
        ];
        features = {
          "futures-core" = [ "dep:futures-core" ];
          "futures-core-03-stream" = [ "futures-core" ];
        };
      };
      "wasm-bindgen-macro" = rec {
        crateName = "wasm-bindgen-macro";
        version = "0.2.89";
        edition = "2018";
        sha256 = "1cl2w7k5jn2jbd5kx613c8k8vjvda22hfgcgx7y2mk93fbrxnqh1";
        procMacro = true;
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "wasm-bindgen-macro-support";
            packageId = "wasm-bindgen-macro-support";
          }
        ];
        features = {
          "spans" = [ "wasm-bindgen-macro-support/spans" ];
          "strict-macro" = [ "wasm-bindgen-macro-support/strict-macro" ];
        };
        resolvedDefaultFeatures = [ "spans" ];
      };
      "wasm-bindgen-macro-support" = rec {
        crateName = "wasm-bindgen-macro-support";
        version = "0.2.89";
        edition = "2018";
        sha256 = "10sj1gr2naxv5q116yjb929hhpvz45dxbkvyk8hyc2lknzy85szh";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "visit" "full" ];
          }
          {
            name = "wasm-bindgen-backend";
            packageId = "wasm-bindgen-backend";
          }
          {
            name = "wasm-bindgen-shared";
            packageId = "wasm-bindgen-shared";
          }
        ];
        features = {
          "extra-traits" = [ "syn/extra-traits" ];
          "spans" = [ "wasm-bindgen-backend/spans" ];
        };
        resolvedDefaultFeatures = [ "spans" ];
      };
      "wasm-bindgen-shared" = rec {
        crateName = "wasm-bindgen-shared";
        version = "0.2.89";
        edition = "2018";
        links = "wasm_bindgen";
        sha256 = "17s5rppad113c6ggkaq8c3cg7a3zz15i78wxcg6mcl1n15iv7fbs";
        authors = [
          "The wasm-bindgen Developers"
        ];

      };
      "wayland-backend" = rec {
        crateName = "wayland-backend";
        version = "0.3.2";
        edition = "2018";
        sha256 = "1r7vz56z6ixfbljraxl4q59g43jfb6i9qkaksi704pzlfgfjs58r";
        authors = [
          "Elinor Berger <elinor@safaradeg.net>"
        ];
        dependencies = [
          {
            name = "downcast-rs";
            packageId = "downcast-rs";
          }
          {
            name = "nix";
            packageId = "nix 0.26.4";
            usesDefaultFeatures = false;
            features = [ "event" "fs" "poll" "socket" "uio" ];
          }
          {
            name = "scoped-tls";
            packageId = "scoped-tls";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            features = [ "union" "const_generics" "const_new" ];
          }
          {
            name = "wayland-sys";
            packageId = "wayland-sys";
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        features = {
          "client_system" = [ "wayland-sys/client" ];
          "dlopen" = [ "wayland-sys/dlopen" ];
          "log" = [ "dep:log" ];
          "raw-window-handle" = [ "dep:raw-window-handle" ];
          "server_system" = [ "wayland-sys/server" ];
        };
        resolvedDefaultFeatures = [ "client_system" "dlopen" ];
      };
      "wayland-client" = rec {
        crateName = "wayland-client";
        version = "0.31.1";
        edition = "2018";
        sha256 = "1lryhibzmi4hb3jpbraj623l110f6rgp0migpxrm8vrl8wixb9qw";
        authors = [
          "Elinor Berger <elinor@safaradeg.net>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.4.1";
          }
          {
            name = "nix";
            packageId = "nix 0.26.4";
            usesDefaultFeatures = false;
          }
          {
            name = "wayland-backend";
            packageId = "wayland-backend";
          }
          {
            name = "wayland-scanner";
            packageId = "wayland-scanner";
          }
        ];
        features = {
          "log" = [ "dep:log" ];
        };
      };
      "wayland-csd-frame" = rec {
        crateName = "wayland-csd-frame";
        version = "0.3.0";
        edition = "2021";
        sha256 = "0zjcmcqprfzx57hlm741n89ssp4sha5yh5cnmbk2agflvclm0p32";
        authors = [
          "Kirill Chibisov <contact@kchibisov.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.4.1";
          }
          {
            name = "cursor-icon";
            packageId = "cursor-icon";
          }
          {
            name = "wayland-backend";
            packageId = "wayland-backend";
            usesDefaultFeatures = false;
          }
        ];

      };
      "wayland-cursor" = rec {
        crateName = "wayland-cursor";
        version = "0.31.0";
        edition = "2018";
        sha256 = "0nxdyyg3a3649n316fbnm8rak5k90j580kfnfxn9src6x45a4jm4";
        authors = [
          "Elinor Berger <elinor@safaradeg.net>"
        ];
        dependencies = [
          {
            name = "nix";
            packageId = "nix 0.26.4";
            usesDefaultFeatures = false;
            features = [ "mman" ];
          }
          {
            name = "wayland-client";
            packageId = "wayland-client";
          }
          {
            name = "xcursor";
            packageId = "xcursor";
          }
        ];

      };
      "wayland-protocols" = rec {
        crateName = "wayland-protocols";
        version = "0.31.0";
        edition = "2018";
        sha256 = "077257bxv21whi33wm0lz5jkq6jnx0spz5jkq8yr44x9gc8dflz2";
        authors = [
          "Elinor Berger <elinor@safaradeg.net>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.4.1";
          }
          {
            name = "wayland-backend";
            packageId = "wayland-backend";
          }
          {
            name = "wayland-client";
            packageId = "wayland-client";
            optional = true;
          }
          {
            name = "wayland-scanner";
            packageId = "wayland-scanner";
          }
        ];
        features = {
          "client" = [ "wayland-client" ];
          "server" = [ "wayland-server" ];
          "wayland-client" = [ "dep:wayland-client" ];
          "wayland-server" = [ "dep:wayland-server" ];
        };
        resolvedDefaultFeatures = [ "client" "staging" "unstable" "wayland-client" ];
      };
      "wayland-protocols-plasma" = rec {
        crateName = "wayland-protocols-plasma";
        version = "0.2.0";
        edition = "2018";
        sha256 = "0yglbxd4ka8284k0j0ssh9hf6wd9qp2n0s2qrsdymyaz258kb013";
        authors = [
          "Elinor Berger <elinor@safaradeg.net>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.4.1";
          }
          {
            name = "wayland-backend";
            packageId = "wayland-backend";
          }
          {
            name = "wayland-client";
            packageId = "wayland-client";
            optional = true;
          }
          {
            name = "wayland-protocols";
            packageId = "wayland-protocols";
          }
          {
            name = "wayland-scanner";
            packageId = "wayland-scanner";
          }
        ];
        features = {
          "client" = [ "wayland-client" "wayland-protocols/client" ];
          "server" = [ "wayland-server" "wayland-protocols/server" ];
          "wayland-client" = [ "dep:wayland-client" ];
          "wayland-server" = [ "dep:wayland-server" ];
        };
        resolvedDefaultFeatures = [ "client" "wayland-client" ];
      };
      "wayland-protocols-wlr" = rec {
        crateName = "wayland-protocols-wlr";
        version = "0.2.0";
        edition = "2018";
        sha256 = "1mjww9psk2nc5hm2q4s3qas30rbzfg1sb6qgw518fbbcdfvn27xd";
        authors = [
          "Elinor Berger <elinor@safaradeg.net>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.4.1";
          }
          {
            name = "wayland-backend";
            packageId = "wayland-backend";
          }
          {
            name = "wayland-client";
            packageId = "wayland-client";
            optional = true;
          }
          {
            name = "wayland-protocols";
            packageId = "wayland-protocols";
          }
          {
            name = "wayland-scanner";
            packageId = "wayland-scanner";
          }
        ];
        features = {
          "client" = [ "wayland-client" "wayland-protocols/client" ];
          "server" = [ "wayland-server" "wayland-protocols/server" ];
          "wayland-client" = [ "dep:wayland-client" ];
          "wayland-server" = [ "dep:wayland-server" ];
        };
        resolvedDefaultFeatures = [ "client" "wayland-client" ];
      };
      "wayland-scanner" = rec {
        crateName = "wayland-scanner";
        version = "0.31.0";
        edition = "2018";
        sha256 = "1760n887j18lzd1ni087q7jzsmpcf7ny3dq2698zkjb56r02i3pv";
        procMacro = true;
        authors = [
          "Elinor Berger <elinor@safaradeg.net>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quick-xml";
            packageId = "quick-xml";
          }
          {
            name = "quote";
            packageId = "quote";
          }
        ];

      };
      "wayland-sys" = rec {
        crateName = "wayland-sys";
        version = "0.31.1";
        edition = "2018";
        sha256 = "1bxpwamgagpxa8p9m798gd3g6rwj2m4sbdvc49zx05jjzzmci80m";
        authors = [
          "Elinor Berger <elinor@safaradeg.net>"
        ];
        dependencies = [
          {
            name = "dlib";
            packageId = "dlib";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];
        features = {
          "cursor" = [ "client" ];
          "dlopen" = [ "once_cell" ];
          "egl" = [ "client" ];
          "libc" = [ "dep:libc" ];
          "memoffset" = [ "dep:memoffset" ];
          "once_cell" = [ "dep:once_cell" ];
          "server" = [ "libc" "memoffset" ];
        };
        resolvedDefaultFeatures = [ "client" "dlopen" "egl" "once_cell" ];
      };
      "web-sys" = rec {
        crateName = "web-sys";
        version = "0.3.66";
        edition = "2018";
        sha256 = "03q1z22djv5ncqkyydcvnchmdsl5gvnyzcyixkxnifw6xi24mhjh";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "js-sys";
            packageId = "js-sys";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
        ];
        features = {
          "AbortSignal" = [ "EventTarget" ];
          "AnalyserNode" = [ "AudioNode" "EventTarget" ];
          "Animation" = [ "EventTarget" ];
          "AnimationEvent" = [ "Event" ];
          "AnimationPlaybackEvent" = [ "Event" ];
          "Attr" = [ "EventTarget" "Node" ];
          "AudioBufferSourceNode" = [ "AudioNode" "AudioScheduledSourceNode" "EventTarget" ];
          "AudioContext" = [ "BaseAudioContext" "EventTarget" ];
          "AudioDestinationNode" = [ "AudioNode" "EventTarget" ];
          "AudioNode" = [ "EventTarget" ];
          "AudioProcessingEvent" = [ "Event" ];
          "AudioScheduledSourceNode" = [ "AudioNode" "EventTarget" ];
          "AudioStreamTrack" = [ "EventTarget" "MediaStreamTrack" ];
          "AudioTrackList" = [ "EventTarget" ];
          "AudioWorklet" = [ "Worklet" ];
          "AudioWorkletGlobalScope" = [ "WorkletGlobalScope" ];
          "AudioWorkletNode" = [ "AudioNode" "EventTarget" ];
          "AuthenticatorAssertionResponse" = [ "AuthenticatorResponse" ];
          "AuthenticatorAttestationResponse" = [ "AuthenticatorResponse" ];
          "BaseAudioContext" = [ "EventTarget" ];
          "BatteryManager" = [ "EventTarget" ];
          "BeforeUnloadEvent" = [ "Event" ];
          "BiquadFilterNode" = [ "AudioNode" "EventTarget" ];
          "BlobEvent" = [ "Event" ];
          "Bluetooth" = [ "EventTarget" ];
          "BluetoothAdvertisingEvent" = [ "Event" ];
          "BluetoothDevice" = [ "EventTarget" ];
          "BluetoothPermissionResult" = [ "EventTarget" "PermissionStatus" ];
          "BluetoothRemoteGattCharacteristic" = [ "EventTarget" ];
          "BluetoothRemoteGattService" = [ "EventTarget" ];
          "BroadcastChannel" = [ "EventTarget" ];
          "CanvasCaptureMediaStream" = [ "EventTarget" "MediaStream" ];
          "CanvasCaptureMediaStreamTrack" = [ "EventTarget" "MediaStreamTrack" ];
          "CdataSection" = [ "CharacterData" "EventTarget" "Node" "Text" ];
          "ChannelMergerNode" = [ "AudioNode" "EventTarget" ];
          "ChannelSplitterNode" = [ "AudioNode" "EventTarget" ];
          "CharacterData" = [ "EventTarget" "Node" ];
          "ChromeWorker" = [ "EventTarget" "Worker" ];
          "Clipboard" = [ "EventTarget" ];
          "ClipboardEvent" = [ "Event" ];
          "CloseEvent" = [ "Event" ];
          "Comment" = [ "CharacterData" "EventTarget" "Node" ];
          "CompositionEvent" = [ "Event" "UiEvent" ];
          "ConstantSourceNode" = [ "AudioNode" "AudioScheduledSourceNode" "EventTarget" ];
          "ConvolverNode" = [ "AudioNode" "EventTarget" ];
          "CssAnimation" = [ "Animation" "EventTarget" ];
          "CssConditionRule" = [ "CssGroupingRule" "CssRule" ];
          "CssCounterStyleRule" = [ "CssRule" ];
          "CssFontFaceRule" = [ "CssRule" ];
          "CssFontFeatureValuesRule" = [ "CssRule" ];
          "CssGroupingRule" = [ "CssRule" ];
          "CssImportRule" = [ "CssRule" ];
          "CssKeyframeRule" = [ "CssRule" ];
          "CssKeyframesRule" = [ "CssRule" ];
          "CssMediaRule" = [ "CssConditionRule" "CssGroupingRule" "CssRule" ];
          "CssNamespaceRule" = [ "CssRule" ];
          "CssPageRule" = [ "CssRule" ];
          "CssStyleRule" = [ "CssRule" ];
          "CssStyleSheet" = [ "StyleSheet" ];
          "CssSupportsRule" = [ "CssConditionRule" "CssGroupingRule" "CssRule" ];
          "CssTransition" = [ "Animation" "EventTarget" ];
          "CustomEvent" = [ "Event" ];
          "DedicatedWorkerGlobalScope" = [ "EventTarget" "WorkerGlobalScope" ];
          "DelayNode" = [ "AudioNode" "EventTarget" ];
          "DeviceLightEvent" = [ "Event" ];
          "DeviceMotionEvent" = [ "Event" ];
          "DeviceOrientationEvent" = [ "Event" ];
          "DeviceProximityEvent" = [ "Event" ];
          "Document" = [ "EventTarget" "Node" ];
          "DocumentFragment" = [ "EventTarget" "Node" ];
          "DocumentTimeline" = [ "AnimationTimeline" ];
          "DocumentType" = [ "EventTarget" "Node" ];
          "DomMatrix" = [ "DomMatrixReadOnly" ];
          "DomPoint" = [ "DomPointReadOnly" ];
          "DomRect" = [ "DomRectReadOnly" ];
          "DomRequest" = [ "EventTarget" ];
          "DragEvent" = [ "Event" "MouseEvent" "UiEvent" ];
          "DynamicsCompressorNode" = [ "AudioNode" "EventTarget" ];
          "Element" = [ "EventTarget" "Node" ];
          "ErrorEvent" = [ "Event" ];
          "EventSource" = [ "EventTarget" ];
          "ExtendableEvent" = [ "Event" ];
          "ExtendableMessageEvent" = [ "Event" "ExtendableEvent" ];
          "FetchEvent" = [ "Event" "ExtendableEvent" ];
          "FetchObserver" = [ "EventTarget" ];
          "File" = [ "Blob" ];
          "FileReader" = [ "EventTarget" ];
          "FileSystemDirectoryEntry" = [ "FileSystemEntry" ];
          "FileSystemDirectoryHandle" = [ "FileSystemHandle" ];
          "FileSystemFileEntry" = [ "FileSystemEntry" ];
          "FileSystemFileHandle" = [ "FileSystemHandle" ];
          "FileSystemWritableFileStream" = [ "WritableStream" ];
          "FocusEvent" = [ "Event" "UiEvent" ];
          "FontFaceSet" = [ "EventTarget" ];
          "FontFaceSetLoadEvent" = [ "Event" ];
          "GainNode" = [ "AudioNode" "EventTarget" ];
          "GamepadAxisMoveEvent" = [ "Event" "GamepadEvent" ];
          "GamepadButtonEvent" = [ "Event" "GamepadEvent" ];
          "GamepadEvent" = [ "Event" ];
          "GpuDevice" = [ "EventTarget" ];
          "GpuInternalError" = [ "GpuError" ];
          "GpuOutOfMemoryError" = [ "GpuError" ];
          "GpuPipelineError" = [ "DomException" ];
          "GpuUncapturedErrorEvent" = [ "Event" ];
          "GpuValidationError" = [ "GpuError" ];
          "HashChangeEvent" = [ "Event" ];
          "Hid" = [ "EventTarget" ];
          "HidConnectionEvent" = [ "Event" ];
          "HidDevice" = [ "EventTarget" ];
          "HidInputReportEvent" = [ "Event" ];
          "HtmlAnchorElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlAreaElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlAudioElement" = [ "Element" "EventTarget" "HtmlElement" "HtmlMediaElement" "Node" ];
          "HtmlBaseElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlBodyElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlBrElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlButtonElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlCanvasElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDListElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDataElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDataListElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDetailsElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDialogElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDirectoryElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDivElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDocument" = [ "Document" "EventTarget" "Node" ];
          "HtmlElement" = [ "Element" "EventTarget" "Node" ];
          "HtmlEmbedElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlFieldSetElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlFontElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlFormControlsCollection" = [ "HtmlCollection" ];
          "HtmlFormElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlFrameElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlFrameSetElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlHeadElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlHeadingElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlHrElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlHtmlElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlIFrameElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlImageElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlInputElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlLabelElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlLegendElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlLiElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlLinkElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMapElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMediaElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMenuElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMenuItemElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMetaElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMeterElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlModElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlOListElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlObjectElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlOptGroupElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlOptionElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlOptionsCollection" = [ "HtmlCollection" ];
          "HtmlOutputElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlParagraphElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlParamElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlPictureElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlPreElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlProgressElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlQuoteElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlScriptElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlSelectElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlSlotElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlSourceElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlSpanElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlStyleElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableCaptionElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableCellElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableColElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableRowElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableSectionElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTemplateElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTextAreaElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTimeElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTitleElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTrackElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlUListElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlUnknownElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlVideoElement" = [ "Element" "EventTarget" "HtmlElement" "HtmlMediaElement" "Node" ];
          "IdbCursorWithValue" = [ "IdbCursor" ];
          "IdbDatabase" = [ "EventTarget" ];
          "IdbFileHandle" = [ "EventTarget" ];
          "IdbFileRequest" = [ "DomRequest" "EventTarget" ];
          "IdbLocaleAwareKeyRange" = [ "IdbKeyRange" ];
          "IdbMutableFile" = [ "EventTarget" ];
          "IdbOpenDbRequest" = [ "EventTarget" "IdbRequest" ];
          "IdbRequest" = [ "EventTarget" ];
          "IdbTransaction" = [ "EventTarget" ];
          "IdbVersionChangeEvent" = [ "Event" ];
          "IirFilterNode" = [ "AudioNode" "EventTarget" ];
          "ImageCaptureErrorEvent" = [ "Event" ];
          "ImageTrack" = [ "EventTarget" ];
          "InputEvent" = [ "Event" "UiEvent" ];
          "KeyboardEvent" = [ "Event" "UiEvent" ];
          "KeyframeEffect" = [ "AnimationEffect" ];
          "LocalMediaStream" = [ "EventTarget" "MediaStream" ];
          "MediaDevices" = [ "EventTarget" ];
          "MediaElementAudioSourceNode" = [ "AudioNode" "EventTarget" ];
          "MediaEncryptedEvent" = [ "Event" ];
          "MediaKeyError" = [ "Event" ];
          "MediaKeyMessageEvent" = [ "Event" ];
          "MediaKeySession" = [ "EventTarget" ];
          "MediaQueryList" = [ "EventTarget" ];
          "MediaQueryListEvent" = [ "Event" ];
          "MediaRecorder" = [ "EventTarget" ];
          "MediaRecorderErrorEvent" = [ "Event" ];
          "MediaSource" = [ "EventTarget" ];
          "MediaStream" = [ "EventTarget" ];
          "MediaStreamAudioDestinationNode" = [ "AudioNode" "EventTarget" ];
          "MediaStreamAudioSourceNode" = [ "AudioNode" "EventTarget" ];
          "MediaStreamEvent" = [ "Event" ];
          "MediaStreamTrack" = [ "EventTarget" ];
          "MediaStreamTrackEvent" = [ "Event" ];
          "MediaStreamTrackGenerator" = [ "EventTarget" "MediaStreamTrack" ];
          "MessageEvent" = [ "Event" ];
          "MessagePort" = [ "EventTarget" ];
          "MidiAccess" = [ "EventTarget" ];
          "MidiConnectionEvent" = [ "Event" ];
          "MidiInput" = [ "EventTarget" "MidiPort" ];
          "MidiMessageEvent" = [ "Event" ];
          "MidiOutput" = [ "EventTarget" "MidiPort" ];
          "MidiPort" = [ "EventTarget" ];
          "MouseEvent" = [ "Event" "UiEvent" ];
          "MouseScrollEvent" = [ "Event" "MouseEvent" "UiEvent" ];
          "MutationEvent" = [ "Event" ];
          "NetworkInformation" = [ "EventTarget" ];
          "Node" = [ "EventTarget" ];
          "Notification" = [ "EventTarget" ];
          "NotificationEvent" = [ "Event" "ExtendableEvent" ];
          "OfflineAudioCompletionEvent" = [ "Event" ];
          "OfflineAudioContext" = [ "BaseAudioContext" "EventTarget" ];
          "OfflineResourceList" = [ "EventTarget" ];
          "OffscreenCanvas" = [ "EventTarget" ];
          "OscillatorNode" = [ "AudioNode" "AudioScheduledSourceNode" "EventTarget" ];
          "PageTransitionEvent" = [ "Event" ];
          "PaintWorkletGlobalScope" = [ "WorkletGlobalScope" ];
          "PannerNode" = [ "AudioNode" "EventTarget" ];
          "PaymentMethodChangeEvent" = [ "Event" "PaymentRequestUpdateEvent" ];
          "PaymentRequestUpdateEvent" = [ "Event" ];
          "Performance" = [ "EventTarget" ];
          "PerformanceMark" = [ "PerformanceEntry" ];
          "PerformanceMeasure" = [ "PerformanceEntry" ];
          "PerformanceNavigationTiming" = [ "PerformanceEntry" "PerformanceResourceTiming" ];
          "PerformanceResourceTiming" = [ "PerformanceEntry" ];
          "PermissionStatus" = [ "EventTarget" ];
          "PointerEvent" = [ "Event" "MouseEvent" "UiEvent" ];
          "PopStateEvent" = [ "Event" ];
          "PopupBlockedEvent" = [ "Event" ];
          "PresentationAvailability" = [ "EventTarget" ];
          "PresentationConnection" = [ "EventTarget" ];
          "PresentationConnectionAvailableEvent" = [ "Event" ];
          "PresentationConnectionCloseEvent" = [ "Event" ];
          "PresentationConnectionList" = [ "EventTarget" ];
          "PresentationRequest" = [ "EventTarget" ];
          "ProcessingInstruction" = [ "CharacterData" "EventTarget" "Node" ];
          "ProgressEvent" = [ "Event" ];
          "PromiseRejectionEvent" = [ "Event" ];
          "PublicKeyCredential" = [ "Credential" ];
          "PushEvent" = [ "Event" "ExtendableEvent" ];
          "RadioNodeList" = [ "NodeList" ];
          "RtcDataChannel" = [ "EventTarget" ];
          "RtcDataChannelEvent" = [ "Event" ];
          "RtcPeerConnection" = [ "EventTarget" ];
          "RtcPeerConnectionIceEvent" = [ "Event" ];
          "RtcTrackEvent" = [ "Event" ];
          "RtcdtmfSender" = [ "EventTarget" ];
          "RtcdtmfToneChangeEvent" = [ "Event" ];
          "Screen" = [ "EventTarget" ];
          "ScreenOrientation" = [ "EventTarget" ];
          "ScriptProcessorNode" = [ "AudioNode" "EventTarget" ];
          "ScrollAreaEvent" = [ "Event" "UiEvent" ];
          "SecurityPolicyViolationEvent" = [ "Event" ];
          "Serial" = [ "EventTarget" ];
          "SerialPort" = [ "EventTarget" ];
          "ServiceWorker" = [ "EventTarget" ];
          "ServiceWorkerContainer" = [ "EventTarget" ];
          "ServiceWorkerGlobalScope" = [ "EventTarget" "WorkerGlobalScope" ];
          "ServiceWorkerRegistration" = [ "EventTarget" ];
          "ShadowRoot" = [ "DocumentFragment" "EventTarget" "Node" ];
          "SharedWorker" = [ "EventTarget" ];
          "SharedWorkerGlobalScope" = [ "EventTarget" "WorkerGlobalScope" ];
          "SourceBuffer" = [ "EventTarget" ];
          "SourceBufferList" = [ "EventTarget" ];
          "SpeechRecognition" = [ "EventTarget" ];
          "SpeechRecognitionError" = [ "Event" ];
          "SpeechRecognitionEvent" = [ "Event" ];
          "SpeechSynthesis" = [ "EventTarget" ];
          "SpeechSynthesisErrorEvent" = [ "Event" "SpeechSynthesisEvent" ];
          "SpeechSynthesisEvent" = [ "Event" ];
          "SpeechSynthesisUtterance" = [ "EventTarget" ];
          "StereoPannerNode" = [ "AudioNode" "EventTarget" ];
          "StorageEvent" = [ "Event" ];
          "SubmitEvent" = [ "Event" ];
          "SvgAnimateElement" = [ "Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement" ];
          "SvgAnimateMotionElement" = [ "Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement" ];
          "SvgAnimateTransformElement" = [ "Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement" ];
          "SvgAnimationElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgCircleElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgClipPathElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgComponentTransferFunctionElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgDefsElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgDescElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgElement" = [ "Element" "EventTarget" "Node" ];
          "SvgEllipseElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgFilterElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgForeignObjectElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgGeometryElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgGradientElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgGraphicsElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgImageElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgLineElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgLinearGradientElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGradientElement" ];
          "SvgMarkerElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgMaskElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgMetadataElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgPathElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgPathSegArcAbs" = [ "SvgPathSeg" ];
          "SvgPathSegArcRel" = [ "SvgPathSeg" ];
          "SvgPathSegClosePath" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoCubicAbs" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoCubicRel" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoCubicSmoothAbs" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoCubicSmoothRel" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoQuadraticAbs" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoQuadraticRel" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoQuadraticSmoothAbs" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoQuadraticSmoothRel" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoAbs" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoHorizontalAbs" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoHorizontalRel" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoRel" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoVerticalAbs" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoVerticalRel" = [ "SvgPathSeg" ];
          "SvgPathSegMovetoAbs" = [ "SvgPathSeg" ];
          "SvgPathSegMovetoRel" = [ "SvgPathSeg" ];
          "SvgPatternElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgPolygonElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgPolylineElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgRadialGradientElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGradientElement" ];
          "SvgRectElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgScriptElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgSetElement" = [ "Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement" ];
          "SvgStopElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgStyleElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgSwitchElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgSymbolElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgTextContentElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgTextElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement" "SvgTextPositioningElement" ];
          "SvgTextPathElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement" ];
          "SvgTextPositioningElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement" ];
          "SvgTitleElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgUseElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgViewElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgaElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgfeBlendElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeColorMatrixElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeComponentTransferElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeCompositeElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeConvolveMatrixElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeDiffuseLightingElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeDisplacementMapElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeDistantLightElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeDropShadowElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeFloodElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeFuncAElement" = [ "Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement" ];
          "SvgfeFuncBElement" = [ "Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement" ];
          "SvgfeFuncGElement" = [ "Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement" ];
          "SvgfeFuncRElement" = [ "Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement" ];
          "SvgfeGaussianBlurElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeImageElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeMergeElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeMergeNodeElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeMorphologyElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeOffsetElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfePointLightElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeSpecularLightingElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeSpotLightElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeTileElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeTurbulenceElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvggElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgmPathElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgsvgElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgtSpanElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement" "SvgTextPositioningElement" ];
          "TaskController" = [ "AbortController" ];
          "TaskPriorityChangeEvent" = [ "Event" ];
          "TaskSignal" = [ "AbortSignal" "EventTarget" ];
          "TcpServerSocket" = [ "EventTarget" ];
          "TcpServerSocketEvent" = [ "Event" ];
          "TcpSocket" = [ "EventTarget" ];
          "TcpSocketErrorEvent" = [ "Event" ];
          "TcpSocketEvent" = [ "Event" ];
          "Text" = [ "CharacterData" "EventTarget" "Node" ];
          "TextTrack" = [ "EventTarget" ];
          "TextTrackCue" = [ "EventTarget" ];
          "TextTrackList" = [ "EventTarget" ];
          "TimeEvent" = [ "Event" ];
          "TouchEvent" = [ "Event" "UiEvent" ];
          "TrackEvent" = [ "Event" ];
          "TransitionEvent" = [ "Event" ];
          "UiEvent" = [ "Event" ];
          "Usb" = [ "EventTarget" ];
          "UsbConnectionEvent" = [ "Event" ];
          "UsbPermissionResult" = [ "EventTarget" "PermissionStatus" ];
          "UserProximityEvent" = [ "Event" ];
          "ValueEvent" = [ "Event" ];
          "VideoStreamTrack" = [ "EventTarget" "MediaStreamTrack" ];
          "VideoTrackList" = [ "EventTarget" ];
          "VrDisplay" = [ "EventTarget" ];
          "VttCue" = [ "EventTarget" "TextTrackCue" ];
          "WakeLockSentinel" = [ "EventTarget" ];
          "WaveShaperNode" = [ "AudioNode" "EventTarget" ];
          "WebGlContextEvent" = [ "Event" ];
          "WebKitCssMatrix" = [ "DomMatrix" "DomMatrixReadOnly" ];
          "WebSocket" = [ "EventTarget" ];
          "WebTransportError" = [ "DomException" ];
          "WebTransportReceiveStream" = [ "ReadableStream" ];
          "WebTransportSendStream" = [ "WritableStream" ];
          "WheelEvent" = [ "Event" "MouseEvent" "UiEvent" ];
          "Window" = [ "EventTarget" ];
          "WindowClient" = [ "Client" ];
          "Worker" = [ "EventTarget" ];
          "WorkerDebuggerGlobalScope" = [ "EventTarget" ];
          "WorkerGlobalScope" = [ "EventTarget" ];
          "XmlDocument" = [ "Document" "EventTarget" "Node" ];
          "XmlHttpRequest" = [ "EventTarget" "XmlHttpRequestEventTarget" ];
          "XmlHttpRequestEventTarget" = [ "EventTarget" ];
          "XmlHttpRequestUpload" = [ "EventTarget" "XmlHttpRequestEventTarget" ];
          "XrBoundedReferenceSpace" = [ "EventTarget" "XrReferenceSpace" "XrSpace" ];
          "XrInputSourceEvent" = [ "Event" ];
          "XrInputSourcesChangeEvent" = [ "Event" ];
          "XrJointPose" = [ "XrPose" ];
          "XrJointSpace" = [ "EventTarget" "XrSpace" ];
          "XrLayer" = [ "EventTarget" ];
          "XrPermissionStatus" = [ "EventTarget" "PermissionStatus" ];
          "XrReferenceSpace" = [ "EventTarget" "XrSpace" ];
          "XrReferenceSpaceEvent" = [ "Event" ];
          "XrSession" = [ "EventTarget" ];
          "XrSessionEvent" = [ "Event" ];
          "XrSpace" = [ "EventTarget" ];
          "XrSystem" = [ "EventTarget" ];
          "XrViewerPose" = [ "XrPose" ];
          "XrWebGlLayer" = [ "EventTarget" "XrLayer" ];
        };
        resolvedDefaultFeatures = [ "AbortController" "AbortSignal" "AngleInstancedArrays" "BinaryType" "Blob" "Clipboard" "ClipboardEvent" "CompositionEvent" "CssStyleDeclaration" "DataTransfer" "DataTransferItem" "DataTransferItemList" "Document" "DomRect" "DomRectReadOnly" "DragEvent" "Element" "Event" "EventListener" "EventTarget" "ExtBlendMinmax" "ExtColorBufferFloat" "ExtColorBufferHalfFloat" "ExtDisjointTimerQuery" "ExtFragDepth" "ExtSRgb" "ExtShaderTextureLod" "ExtTextureFilterAnisotropic" "File" "FileList" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "HtmlImageElement" "HtmlInputElement" "HtmlMediaElement" "HtmlVideoElement" "ImageBitmap" "InputEvent" "IntersectionObserver" "IntersectionObserverEntry" "KeyboardEvent" "Location" "MediaQueryList" "MediaQueryListEvent" "MessageChannel" "MessageEvent" "MessagePort" "MouseEvent" "Navigator" "Node" "OesElementIndexUint" "OesStandardDerivatives" "OesTextureFloat" "OesTextureFloatLinear" "OesTextureHalfFloat" "OesTextureHalfFloatLinear" "OesVertexArrayObject" "OvrMultiview2" "PageTransitionEvent" "Performance" "PointerEvent" "ResizeObserver" "ResizeObserverBoxOptions" "ResizeObserverEntry" "ResizeObserverOptions" "ResizeObserverSize" "Storage" "Touch" "TouchEvent" "TouchList" "UiEvent" "VideoFrame" "VisibilityState" "WebGl2RenderingContext" "WebGlActiveInfo" "WebGlBuffer" "WebGlFramebuffer" "WebGlProgram" "WebGlQuery" "WebGlRenderbuffer" "WebGlRenderingContext" "WebGlSampler" "WebGlShader" "WebGlSync" "WebGlTexture" "WebGlTransformFeedback" "WebGlUniformLocation" "WebGlVertexArrayObject" "WebglColorBufferFloat" "WebglCompressedTextureAstc" "WebglCompressedTextureEtc" "WebglCompressedTextureEtc1" "WebglCompressedTexturePvrtc" "WebglCompressedTextureS3tc" "WebglCompressedTextureS3tcSrgb" "WebglDebugRendererInfo" "WebglDebugShaders" "WebglDepthTexture" "WebglDrawBuffers" "WebglLoseContext" "WheelEvent" "Window" "Worker" "console" ];
      };
      "web-time" = rec {
        crateName = "web-time";
        version = "0.2.4";
        edition = "2021";
        sha256 = "1q6gk0nkwbfz30g1pz8g52mq00zjx7m5im36k3474aw73jdh8c5a";
        dependencies = [
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: ((builtins.elem "wasm" target."family") && (!(("emscripten" == target."os" or null) || ("wasi" == target."os" or null))));
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            usesDefaultFeatures = false;
            target = { target, features }: ((builtins.elem "wasm" target."family") && (!(("emscripten" == target."os" or null) || ("wasi" == target."os" or null))));
          }
        ];

      };
      "webbrowser" = rec {
        crateName = "webbrowser";
        version = "0.8.12";
        edition = "2018";
        sha256 = "0w9w098h99xssjlzn4lbiq9qaqk9dqysg865kxqjfb5hb0b3kcl2";
        authors = [
          "Amod Malviya @amodm"
        ];
        dependencies = [
          {
            name = "core-foundation";
            packageId = "core-foundation";
            target = { target, features }: ("macos" == target."os" or null);
          }
          {
            name = "home";
            packageId = "home";
            target = { target, features }: (("linux" == target."os" or null) || ("freebsd" == target."os" or null) || ("netbsd" == target."os" or null) || ("openbsd" == target."os" or null) || ("haiku" == target."os" or null));
          }
          {
            name = "jni";
            packageId = "jni";
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "ndk-context";
            packageId = "ndk-context";
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "objc";
            packageId = "objc";
            target = { target, features }: ("ios" == target."os" or null);
          }
          {
            name = "raw-window-handle";
            packageId = "raw-window-handle";
            target = { target, features }: ("ios" == target."os" or null);
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [ "Window" ];
          }
        ];
        features = {
          "wasm-console" = [ "web-sys/console" ];
        };
      };
      "winapi" = rec {
        crateName = "winapi";
        version = "0.3.9";
        edition = "2015";
        sha256 = "06gl025x418lchw1wxj64ycr7gha83m44cjr5sarhynd9xkrm0sw";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-i686-pc-windows-gnu";
            packageId = "winapi-i686-pc-windows-gnu";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "i686-pc-windows-gnu");
          }
          {
            name = "winapi-x86_64-pc-windows-gnu";
            packageId = "winapi-x86_64-pc-windows-gnu";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "x86_64-pc-windows-gnu");
          }
        ];
        features = {
          "debug" = [ "impl-debug" ];
        };
        resolvedDefaultFeatures = [ "basetsd" "consoleapi" "errhandlingapi" "fileapi" "handleapi" "minwindef" "processenv" "shellapi" "std" "stringapiset" "synchapi" "sysinfoapi" "winbase" "wincon" "winerror" "winnt" "winsock2" "winuser" ];
      };
      "winapi-i686-pc-windows-gnu" = rec {
        crateName = "winapi-i686-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1dmpa6mvcvzz16zg6d5vrfy4bxgg541wxrcip7cnshi06v38ffxc";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];

      };
      "winapi-util" = rec {
        crateName = "winapi-util";
        version = "0.1.6";
        edition = "2021";
        sha256 = "15i5lm39wd44004i9d5qspry2cynkrpvwzghr6s2c3dsk28nz7pj";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "std" "consoleapi" "errhandlingapi" "fileapi" "minwindef" "processenv" "sysinfoapi" "winbase" "wincon" "winerror" "winnt" ];
          }
        ];

      };
      "winapi-wsapoll" = rec {
        crateName = "winapi-wsapoll";
        version = "0.1.1";
        edition = "2018";
        sha256 = "0vnzlcm6yrlx0xdx4g7zr41n84aj73h0p8fwh0m60mbiyl873ha4";
        authors = [
          "Uli Schlachter <psychon@znc.in>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "winsock2" ];
          }
        ];

      };
      "winapi-x86_64-pc-windows-gnu" = rec {
        crateName = "winapi-x86_64-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "0gqq64czqb64kskjryj8isp62m2sgvx25yyj3kpc2myh85w24bki";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];

      };
      "windows-sys 0.45.0" = rec {
        crateName = "windows-sys";
        version = "0.45.0";
        edition = "2018";
        sha256 = "1l36bcqm4g89pknfp8r9rl1w4bn017q6a8qlx8viv0xjxzjkna3m";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.42.2";
            target = { target, features }: (!(target."windows_raw_dylib" or false));
          }
        ];
        features = {
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Data_Xml" = [ "Win32_Data" ];
          "Win32_Data_Xml_MsXml" = [ "Win32_Data_Xml" ];
          "Win32_Data_Xml_XmlLite" = [ "Win32_Data_Xml" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAccess" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_FunctionDiscovery" = [ "Win32_Devices" ];
          "Win32_Devices_Geolocation" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_ImageAcquisition" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_Audio_Apo" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_DirectMusic" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_Endpoints" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_XAudio2" = [ "Win32_Media_Audio" ];
          "Win32_Media_DeviceManager" = [ "Win32_Media" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_LibrarySharingServices" = [ "Win32_Media" ];
          "Win32_Media_MediaPlayer" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_Speech" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_MobileBroadband" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkPolicyServer" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectNow" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_BackgroundIntelligentTransferService" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_NetworkListManager" = [ "Win32_Networking" ];
          "Win32_Networking_RemoteDifferentialCompression" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authentication_Identity_Provider" = [ "Win32_Security_Authentication_Identity" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Authorization_UI" = [ "Win32_Security_Authorization" ];
          "Win32_Security_ConfigurationSnapin" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_Tpm" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DataDeduplication" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_EnhancedStorage" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileServerResourceManager" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_Packaging_Opc" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_VirtualDiskService" = [ "Win32_Storage" ];
          "Win32_Storage_Vss" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_Storage_Xps_Printing" = [ "Win32_Storage_Xps" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_AssessmentTool" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_CallObj" = [ "Win32_System_Com" ];
          "Win32_System_Com_ChannelCredentials" = [ "Win32_System_Com" ];
          "Win32_System_Com_Events" = [ "Win32_System_Com" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_UI" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_Contacts" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DesktopSharing" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Mmc" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_ParentalControls" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_RealTimeCommunications" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteAssistance" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_ServerBackup" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SettingsManagementInfrastructure" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_TaskScheduler" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_UpdateAgent" = [ "Win32_System" ];
          "Win32_System_UpdateAssessment" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_WindowsSync" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_Animation" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_Controls_RichEdit" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Ink" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Radial" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_LegacyWindowsEnvironmentFeatures" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Notifications" = [ "Win32_UI" ];
          "Win32_UI_Ribbon" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_Common" = [ "Win32_UI_Shell" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_UI_Wpf" = [ "Win32_UI" ];
        };
        resolvedDefaultFeatures = [ "Win32" "Win32_Globalization" "default" ];
      };
      "windows-sys 0.48.0" = rec {
        crateName = "windows-sys";
        version = "0.48.0";
        edition = "2018";
        sha256 = "1aan23v5gs7gya1lc46hqn9mdh8yph3fhxmhxlw36pn6pqc28zb7";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.48.5";
          }
        ];
        features = {
          "Wdk_System" = [ "Wdk" ];
          "Wdk_System_OfflineRegistry" = [ "Wdk_System" ];
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Data_Xml" = [ "Win32_Data" ];
          "Win32_Data_Xml_MsXml" = [ "Win32_Data_Xml" ];
          "Win32_Data_Xml_XmlLite" = [ "Win32_Data_Xml" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAccess" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_FunctionDiscovery" = [ "Win32_Devices" ];
          "Win32_Devices_Geolocation" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_ImageAcquisition" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_Audio_Apo" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_DirectMusic" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_Endpoints" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_XAudio2" = [ "Win32_Media_Audio" ];
          "Win32_Media_DeviceManager" = [ "Win32_Media" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_LibrarySharingServices" = [ "Win32_Media" ];
          "Win32_Media_MediaPlayer" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_Speech" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_MobileBroadband" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkPolicyServer" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectNow" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_BackgroundIntelligentTransferService" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_NetworkListManager" = [ "Win32_Networking" ];
          "Win32_Networking_RemoteDifferentialCompression" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authentication_Identity_Provider" = [ "Win32_Security_Authentication_Identity" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Authorization_UI" = [ "Win32_Security_Authorization" ];
          "Win32_Security_ConfigurationSnapin" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_Tpm" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DataDeduplication" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_EnhancedStorage" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileServerResourceManager" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_Packaging_Opc" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_VirtualDiskService" = [ "Win32_Storage" ];
          "Win32_Storage_Vss" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_Storage_Xps_Printing" = [ "Win32_Storage_Xps" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_AssessmentTool" = [ "Win32_System" ];
          "Win32_System_ClrHosting" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_CallObj" = [ "Win32_System_Com" ];
          "Win32_System_Com_ChannelCredentials" = [ "Win32_System_Com" ];
          "Win32_System_Com_Events" = [ "Win32_System_Com" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_UI" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_Contacts" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DesktopSharing" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ClrProfiling" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug_ActiveScript" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Debug_Extensions" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Mmc" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_ParentalControls" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_RealTimeCommunications" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteAssistance" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_ServerBackup" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SettingsManagementInfrastructure" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_TaskScheduler" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_UpdateAgent" = [ "Win32_System" ];
          "Win32_System_UpdateAssessment" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_WindowsSync" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_Animation" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_Controls_RichEdit" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Ink" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Radial" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_LegacyWindowsEnvironmentFeatures" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Notifications" = [ "Win32_UI" ];
          "Win32_UI_Ribbon" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_Common" = [ "Win32_UI_Shell" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_UI_Wpf" = [ "Win32_UI" ];
          "Win32_Web" = [ "Win32" ];
          "Win32_Web_InternetExplorer" = [ "Win32_Web" ];
        };
        resolvedDefaultFeatures = [ "Win32" "Win32_Devices" "Win32_Devices_HumanInterfaceDevice" "Win32_Foundation" "Win32_Globalization" "Win32_Graphics" "Win32_Graphics_Dwm" "Win32_Graphics_Gdi" "Win32_Graphics_OpenGL" "Win32_Media" "Win32_System" "Win32_System_Com" "Win32_System_Com_StructuredStorage" "Win32_System_Diagnostics" "Win32_System_Diagnostics_Debug" "Win32_System_LibraryLoader" "Win32_System_Ole" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "Win32_UI" "Win32_UI_Accessibility" "Win32_UI_Controls" "Win32_UI_HiDpi" "Win32_UI_Input" "Win32_UI_Input_Ime" "Win32_UI_Input_KeyboardAndMouse" "Win32_UI_Input_Pointer" "Win32_UI_Input_Touch" "Win32_UI_Shell" "Win32_UI_TextServices" "Win32_UI_WindowsAndMessaging" "default" ];
      };
      "windows-sys 0.52.0" = rec {
        crateName = "windows-sys";
        version = "0.52.0";
        edition = "2021";
        sha256 = "0gd3v4ji88490zgb6b5mq5zgbvwv7zx1ibn8v3x83rwcdbryaar8";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.0";
          }
        ];
        features = {
          "Wdk_Foundation" = [ "Wdk" ];
          "Wdk_Graphics" = [ "Wdk" ];
          "Wdk_Graphics_Direct3D" = [ "Wdk_Graphics" ];
          "Wdk_Storage" = [ "Wdk" ];
          "Wdk_Storage_FileSystem" = [ "Wdk_Storage" ];
          "Wdk_Storage_FileSystem_Minifilters" = [ "Wdk_Storage_FileSystem" ];
          "Wdk_System" = [ "Wdk" ];
          "Wdk_System_IO" = [ "Wdk_System" ];
          "Wdk_System_OfflineRegistry" = [ "Wdk_System" ];
          "Wdk_System_Registry" = [ "Wdk_System" ];
          "Wdk_System_SystemInformation" = [ "Wdk_System" ];
          "Wdk_System_SystemServices" = [ "Wdk_System" ];
          "Wdk_System_Threading" = [ "Wdk_System" ];
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_GdiPlus" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_Nvme" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_ClrHosting" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug_Extensions" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_Variant" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_Web" = [ "Win32" ];
          "Win32_Web_InternetExplorer" = [ "Win32_Web" ];
        };
        resolvedDefaultFeatures = [ "Wdk" "Wdk_Foundation" "Wdk_Storage" "Wdk_Storage_FileSystem" "Win32" "Win32_Foundation" "Win32_NetworkManagement" "Win32_NetworkManagement_IpHelper" "Win32_Networking" "Win32_Networking_WinSock" "Win32_Security" "Win32_Storage" "Win32_Storage_FileSystem" "Win32_System" "Win32_System_Com" "Win32_System_Console" "Win32_System_Diagnostics" "Win32_System_Diagnostics_Debug" "Win32_System_IO" "Win32_System_LibraryLoader" "Win32_System_Threading" "Win32_System_WindowsProgramming" "Win32_UI" "Win32_UI_Shell" "default" ];
      };
      "windows-targets 0.42.2" = rec {
        crateName = "windows-targets";
        version = "0.42.2";
        edition = "2018";
        sha256 = "0wfhnib2fisxlx8c507dbmh97kgij4r6kcxdi0f9nk6l1k080lcf";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows_aarch64_gnullvm";
            packageId = "windows_aarch64_gnullvm 0.42.2";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "aarch64-pc-windows-gnullvm");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc 0.42.2";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "aarch64-pc-windows-msvc");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc 0.42.2";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "aarch64-uwp-windows-msvc");
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu 0.42.2";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "i686-pc-windows-gnu");
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu 0.42.2";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "i686-uwp-windows-gnu");
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc 0.42.2";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "i686-pc-windows-msvc");
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc 0.42.2";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "i686-uwp-windows-msvc");
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu 0.42.2";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "x86_64-pc-windows-gnu");
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu 0.42.2";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "x86_64-uwp-windows-gnu");
          }
          {
            name = "windows_x86_64_gnullvm";
            packageId = "windows_x86_64_gnullvm 0.42.2";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "x86_64-pc-windows-gnullvm");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc 0.42.2";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "x86_64-pc-windows-msvc");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc 0.42.2";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "x86_64-uwp-windows-msvc");
          }
        ];

      };
      "windows-targets 0.48.5" = rec {
        crateName = "windows-targets";
        version = "0.48.5";
        edition = "2018";
        sha256 = "034ljxqshifs1lan89xwpcy1hp0lhdh4b5n0d2z4fwjx2piacbws";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows_aarch64_gnullvm";
            packageId = "windows_aarch64_gnullvm 0.48.5";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "aarch64-pc-windows-gnullvm");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc 0.48.5";
            target = { target, features }: (("aarch64" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu 0.48.5";
            target = { target, features }: (("x86" == target."arch" or null) && ("gnu" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc 0.48.5";
            target = { target, features }: (("x86" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu 0.48.5";
            target = { target, features }: (("x86_64" == target."arch" or null) && ("gnu" == target."env" or null) && (!("llvm" == target."abi" or null)) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnullvm";
            packageId = "windows_x86_64_gnullvm 0.48.5";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "x86_64-pc-windows-gnullvm");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc 0.48.5";
            target = { target, features }: (("x86_64" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
        ];

      };
      "windows-targets 0.52.0" = rec {
        crateName = "windows-targets";
        version = "0.52.0";
        edition = "2021";
        sha256 = "1kg7a27ynzw8zz3krdgy6w5gbqcji27j1sz4p7xk2j5j8082064a";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows_aarch64_gnullvm";
            packageId = "windows_aarch64_gnullvm 0.52.0";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "aarch64-pc-windows-gnullvm");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc 0.52.0";
            target = { target, features }: (("aarch64" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu 0.52.0";
            target = { target, features }: (("x86" == target."arch" or null) && ("gnu" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc 0.52.0";
            target = { target, features }: (("x86" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu 0.52.0";
            target = { target, features }: (("x86_64" == target."arch" or null) && ("gnu" == target."env" or null) && (!("llvm" == target."abi" or null)) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnullvm";
            packageId = "windows_x86_64_gnullvm 0.52.0";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "x86_64-pc-windows-gnullvm");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc 0.52.0";
            target = { target, features }: (("x86_64" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
        ];

      };
      "windows_aarch64_gnullvm 0.42.2" = rec {
        crateName = "windows_aarch64_gnullvm";
        version = "0.42.2";
        edition = "2018";
        sha256 = "1y4q0qmvl0lvp7syxvfykafvmwal5hrjb4fmv04bqs0bawc52yjr";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_gnullvm 0.48.5" = rec {
        crateName = "windows_aarch64_gnullvm";
        version = "0.48.5";
        edition = "2018";
        sha256 = "1n05v7qblg1ci3i567inc7xrkmywczxrs1z3lj3rkkxw18py6f1b";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_gnullvm 0.52.0" = rec {
        crateName = "windows_aarch64_gnullvm";
        version = "0.52.0";
        edition = "2021";
        sha256 = "1shmn1kbdc0bpphcxz0vlph96bxz0h1jlmh93s9agf2dbpin8xyb";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_msvc 0.42.2" = rec {
        crateName = "windows_aarch64_msvc";
        version = "0.42.2";
        edition = "2018";
        sha256 = "0hsdikjl5sa1fva5qskpwlxzpc5q9l909fpl1w6yy1hglrj8i3p0";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_msvc 0.48.5" = rec {
        crateName = "windows_aarch64_msvc";
        version = "0.48.5";
        edition = "2018";
        sha256 = "1g5l4ry968p73g6bg6jgyvy9lb8fyhcs54067yzxpcpkf44k2dfw";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_msvc 0.52.0" = rec {
        crateName = "windows_aarch64_msvc";
        version = "0.52.0";
        edition = "2021";
        sha256 = "1vvmy1ypvzdvxn9yf0b8ygfl85gl2gpcyvsvqppsmlpisil07amv";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnu 0.42.2" = rec {
        crateName = "windows_i686_gnu";
        version = "0.42.2";
        edition = "2018";
        sha256 = "0kx866dfrby88lqs9v1vgmrkk1z6af9lhaghh5maj7d4imyr47f6";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnu 0.48.5" = rec {
        crateName = "windows_i686_gnu";
        version = "0.48.5";
        edition = "2018";
        sha256 = "0gklnglwd9ilqx7ac3cn8hbhkraqisd0n83jxzf9837nvvkiand7";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnu 0.52.0" = rec {
        crateName = "windows_i686_gnu";
        version = "0.52.0";
        edition = "2021";
        sha256 = "04zkglz4p3pjsns5gbz85v4s5aw102raz4spj4b0lmm33z5kg1m2";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_msvc 0.42.2" = rec {
        crateName = "windows_i686_msvc";
        version = "0.42.2";
        edition = "2018";
        sha256 = "0q0h9m2aq1pygc199pa5jgc952qhcnf0zn688454i7v4xjv41n24";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_msvc 0.48.5" = rec {
        crateName = "windows_i686_msvc";
        version = "0.48.5";
        edition = "2018";
        sha256 = "01m4rik437dl9rdf0ndnm2syh10hizvq0dajdkv2fjqcywrw4mcg";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_msvc 0.52.0" = rec {
        crateName = "windows_i686_msvc";
        version = "0.52.0";
        edition = "2021";
        sha256 = "16kvmbvx0vr0zbgnaz6nsks9ycvfh5xp05bjrhq65kj623iyirgz";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnu 0.42.2" = rec {
        crateName = "windows_x86_64_gnu";
        version = "0.42.2";
        edition = "2018";
        sha256 = "0dnbf2xnp3xrvy8v9mgs3var4zq9v9yh9kv79035rdgyp2w15scd";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnu 0.48.5" = rec {
        crateName = "windows_x86_64_gnu";
        version = "0.48.5";
        edition = "2018";
        sha256 = "13kiqqcvz2vnyxzydjh73hwgigsdr2z1xpzx313kxll34nyhmm2k";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnu 0.52.0" = rec {
        crateName = "windows_x86_64_gnu";
        version = "0.52.0";
        edition = "2021";
        sha256 = "1zdy4qn178sil5sdm63lm7f0kkcjg6gvdwmcprd2yjmwn8ns6vrx";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnullvm 0.42.2" = rec {
        crateName = "windows_x86_64_gnullvm";
        version = "0.42.2";
        edition = "2018";
        sha256 = "18wl9r8qbsl475j39zvawlidp1bsbinliwfymr43fibdld31pm16";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnullvm 0.48.5" = rec {
        crateName = "windows_x86_64_gnullvm";
        version = "0.48.5";
        edition = "2018";
        sha256 = "1k24810wfbgz8k48c2yknqjmiigmql6kk3knmddkv8k8g1v54yqb";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnullvm 0.52.0" = rec {
        crateName = "windows_x86_64_gnullvm";
        version = "0.52.0";
        edition = "2021";
        sha256 = "17lllq4l2k1lqgcnw1cccphxp9vs7inq99kjlm2lfl9zklg7wr8s";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_msvc 0.42.2" = rec {
        crateName = "windows_x86_64_msvc";
        version = "0.42.2";
        edition = "2018";
        sha256 = "1w5r0q0yzx827d10dpjza2ww0j8iajqhmb54s735hhaj66imvv4s";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_msvc 0.48.5" = rec {
        crateName = "windows_x86_64_msvc";
        version = "0.48.5";
        edition = "2018";
        sha256 = "0f4mdp895kkjh9zv8dxvn4pc10xr7839lf5pa9l0193i2pkgr57d";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_msvc 0.52.0" = rec {
        crateName = "windows_x86_64_msvc";
        version = "0.52.0";
        edition = "2021";
        sha256 = "012wfq37f18c09ij5m6rniw7xxn5fcvrxbqd0wd8vgnl3hfn9yfz";
        authors = [
          "Microsoft"
        ];

      };
      "winit" = rec {
        crateName = "winit";
        version = "0.29.9";
        edition = "2021";
        sha256 = "0l0m923dcyz3711k94cs7p24xbrqf2y0v7v7ifnh37702fmnsdy2";
        authors = [
          "The winit contributors"
          "Pierre Krieger <pierre.krieger1708@gmail.com>"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash";
            optional = true;
            target = { target, features }: ((target."unix" or false) && (!(("redox" == target."os" or null) || (builtins.elem "wasm" target."family") || ("android" == target."os" or null) || ("ios" == target."os" or null) || ("macos" == target."os" or null))));
            features = [ "no-rng" ];
          }
          {
            name = "android-activity";
            packageId = "android-activity";
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "atomic-waker";
            packageId = "atomic-waker";
            target = { target, features }: (builtins.elem "wasm" target."family");
          }
          {
            name = "bitflags";
            packageId = "bitflags 2.4.1";
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ((target."unix" or false) && (!(("redox" == target."os" or null) || (builtins.elem "wasm" target."family") || ("android" == target."os" or null) || ("ios" == target."os" or null) || ("macos" == target."os" or null))));
          }
          {
            name = "calloop";
            packageId = "calloop";
            target = { target, features }: ((target."unix" or false) && (!(("redox" == target."os" or null) || (builtins.elem "wasm" target."family") || ("android" == target."os" or null) || ("ios" == target."os" or null) || ("macos" == target."os" or null))));
          }
          {
            name = "core-foundation";
            packageId = "core-foundation";
            target = { target, features }: (("ios" == target."os" or null) || ("macos" == target."os" or null));
          }
          {
            name = "core-graphics";
            packageId = "core-graphics";
            target = { target, features }: ("macos" == target."os" or null);
          }
          {
            name = "cursor-icon";
            packageId = "cursor-icon";
          }
          {
            name = "icrate";
            packageId = "icrate";
            target = { target, features }: ("ios" == target."os" or null);
            features = [ "dispatch" "Foundation" "Foundation_NSArray" "Foundation_NSString" "Foundation_NSProcessInfo" "Foundation_NSThread" "Foundation_NSSet" ];
          }
          {
            name = "icrate";
            packageId = "icrate";
            target = { target, features }: ("macos" == target."os" or null);
            features = [ "dispatch" "Foundation" "Foundation_NSArray" "Foundation_NSAttributedString" "Foundation_NSMutableAttributedString" "Foundation_NSData" "Foundation_NSDictionary" "Foundation_NSString" "Foundation_NSProcessInfo" "Foundation_NSThread" "Foundation_NSNumber" ];
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: (builtins.elem "wasm" target."family");
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ((target."unix" or false) && (!(("redox" == target."os" or null) || (builtins.elem "wasm" target."family") || ("android" == target."os" or null) || ("ios" == target."os" or null) || ("macos" == target."os" or null))));
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "memmap2";
            packageId = "memmap2";
            optional = true;
            target = { target, features }: ((target."unix" or false) && (!(("redox" == target."os" or null) || (builtins.elem "wasm" target."family") || ("android" == target."os" or null) || ("ios" == target."os" or null) || ("macos" == target."os" or null))));
          }
          {
            name = "ndk";
            packageId = "ndk";
            usesDefaultFeatures = false;
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "ndk-sys";
            packageId = "ndk-sys";
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "objc2";
            packageId = "objc2";
            target = { target, features }: (("ios" == target."os" or null) || ("macos" == target."os" or null));
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "orbclient";
            packageId = "orbclient";
            usesDefaultFeatures = false;
            target = { target, features }: ("redox" == target."os" or null);
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            optional = true;
            target = { target, features }: ((target."unix" or false) && (!(("redox" == target."os" or null) || (builtins.elem "wasm" target."family") || ("android" == target."os" or null) || ("ios" == target."os" or null) || ("macos" == target."os" or null))));
          }
          {
            name = "raw-window-handle";
            packageId = "raw-window-handle";
            rename = "rwh_05";
            optional = true;
            features = [ "std" ];
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall 0.3.5";
            target = { target, features }: ("redox" == target."os" or null);
          }
          {
            name = "rustix";
            packageId = "rustix";
            usesDefaultFeatures = false;
            target = { target, features }: ((target."unix" or false) && (!(("redox" == target."os" or null) || (builtins.elem "wasm" target."family") || ("android" == target."os" or null) || ("ios" == target."os" or null) || ("macos" == target."os" or null))));
            features = [ "std" "system" "thread" "process" ];
          }
          {
            name = "smithay-client-toolkit";
            packageId = "smithay-client-toolkit";
            rename = "sctk";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ((target."unix" or false) && (!(("redox" == target."os" or null) || (builtins.elem "wasm" target."family") || ("android" == target."os" or null) || ("ios" == target."os" or null) || ("macos" == target."os" or null))));
            features = [ "calloop" ];
          }
          {
            name = "smol_str";
            packageId = "smol_str";
          }
          {
            name = "unicode-segmentation";
            packageId = "unicode-segmentation";
            target = { target, features }: ("windows" == target."os" or null);
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: (builtins.elem "wasm" target."family");
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
            target = { target, features }: (builtins.elem "wasm" target."family");
          }
          {
            name = "wayland-backend";
            packageId = "wayland-backend";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ((target."unix" or false) && (!(("redox" == target."os" or null) || (builtins.elem "wasm" target."family") || ("android" == target."os" or null) || ("ios" == target."os" or null) || ("macos" == target."os" or null))));
            features = [ "client_system" ];
          }
          {
            name = "wayland-client";
            packageId = "wayland-client";
            optional = true;
            target = { target, features }: ((target."unix" or false) && (!(("redox" == target."os" or null) || (builtins.elem "wasm" target."family") || ("android" == target."os" or null) || ("ios" == target."os" or null) || ("macos" == target."os" or null))));
          }
          {
            name = "wayland-protocols";
            packageId = "wayland-protocols";
            optional = true;
            target = { target, features }: ((target."unix" or false) && (!(("redox" == target."os" or null) || (builtins.elem "wasm" target."family") || ("android" == target."os" or null) || ("ios" == target."os" or null) || ("macos" == target."os" or null))));
            features = [ "staging" ];
          }
          {
            name = "wayland-protocols-plasma";
            packageId = "wayland-protocols-plasma";
            optional = true;
            target = { target, features }: ((target."unix" or false) && (!(("redox" == target."os" or null) || (builtins.elem "wasm" target."family") || ("android" == target."os" or null) || ("ios" == target."os" or null) || ("macos" == target."os" or null))));
            features = [ "client" ];
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            rename = "web_sys";
            target = { target, features }: (builtins.elem "wasm" target."family");
            features = [ "AbortController" "AbortSignal" "console" "CssStyleDeclaration" "Document" "DomRect" "DomRectReadOnly" "Element" "Event" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "IntersectionObserver" "IntersectionObserverEntry" "KeyboardEvent" "MediaQueryList" "MessageChannel" "MessagePort" "Node" "PageTransitionEvent" "PointerEvent" "ResizeObserver" "ResizeObserverBoxOptions" "ResizeObserverEntry" "ResizeObserverOptions" "ResizeObserverSize" "VisibilityState" "Window" "WheelEvent" ];
          }
          {
            name = "web-time";
            packageId = "web-time";
            target = { target, features }: (builtins.elem "wasm" target."family");
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            target = { target, features }: ("windows" == target."os" or null);
            features = [ "Win32_Devices_HumanInterfaceDevice" "Win32_Foundation" "Win32_Globalization" "Win32_Graphics_Dwm" "Win32_Graphics_Gdi" "Win32_Media" "Win32_System_Com_StructuredStorage" "Win32_System_Com" "Win32_System_LibraryLoader" "Win32_System_Ole" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "Win32_UI_Accessibility" "Win32_UI_Controls" "Win32_UI_HiDpi" "Win32_UI_Input_Ime" "Win32_UI_Input_KeyboardAndMouse" "Win32_UI_Input_Pointer" "Win32_UI_Input_Touch" "Win32_UI_Shell" "Win32_UI_TextServices" "Win32_UI_WindowsAndMessaging" ];
          }
          {
            name = "x11-dl";
            packageId = "x11-dl";
            optional = true;
            target = { target, features }: ((target."unix" or false) && (!(("redox" == target."os" or null) || (builtins.elem "wasm" target."family") || ("android" == target."os" or null) || ("ios" == target."os" or null) || ("macos" == target."os" or null))));
          }
          {
            name = "x11rb";
            packageId = "x11rb 0.13.0";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ((target."unix" or false) && (!(("redox" == target."os" or null) || (builtins.elem "wasm" target."family") || ("android" == target."os" or null) || ("ios" == target."os" or null) || ("macos" == target."os" or null))));
            features = [ "allow-unsafe-code" "dl-libxcb" "randr" "resource_manager" "xinput" "xkb" ];
          }
          {
            name = "xkbcommon-dl";
            packageId = "xkbcommon-dl";
            target = { target, features }: ((target."unix" or false) && (!(("redox" == target."os" or null) || (builtins.elem "wasm" target."family") || ("android" == target."os" or null) || ("ios" == target."os" or null) || ("macos" == target."os" or null))));
          }
        ];
        buildDependencies = [
          {
            name = "cfg_aliases";
            packageId = "cfg_aliases";
          }
        ];
        devDependencies = [
          {
            name = "web-sys";
            packageId = "web-sys";
            target = {target, features}: (builtins.elem "wasm" target."family");
            features = [ "CanvasRenderingContext2d" ];
          }
        ];
        features = {
          "ahash" = [ "dep:ahash" ];
          "android-game-activity" = [ "android-activity/game-activity" ];
          "android-native-activity" = [ "android-activity/native-activity" ];
          "bytemuck" = [ "dep:bytemuck" ];
          "default" = [ "rwh_06" "x11" "wayland" "wayland-dlopen" "wayland-csd-adwaita" ];
          "memmap2" = [ "dep:memmap2" ];
          "mint" = [ "dep:mint" ];
          "percent-encoding" = [ "dep:percent-encoding" ];
          "rwh_04" = [ "dep:rwh_04" "ndk/rwh_04" ];
          "rwh_05" = [ "dep:rwh_05" "ndk/rwh_05" ];
          "rwh_06" = [ "dep:rwh_06" "ndk/rwh_06" ];
          "sctk" = [ "dep:sctk" ];
          "sctk-adwaita" = [ "dep:sctk-adwaita" ];
          "serde" = [ "dep:serde" "cursor-icon/serde" "smol_str/serde" ];
          "wayland" = [ "wayland-client" "wayland-backend" "wayland-protocols" "wayland-protocols-plasma" "sctk" "ahash" "memmap2" ];
          "wayland-backend" = [ "dep:wayland-backend" ];
          "wayland-client" = [ "dep:wayland-client" ];
          "wayland-csd-adwaita" = [ "sctk-adwaita" "sctk-adwaita/ab_glyph" ];
          "wayland-csd-adwaita-crossfont" = [ "sctk-adwaita" "sctk-adwaita/crossfont" ];
          "wayland-csd-adwaita-notitle" = [ "sctk-adwaita" ];
          "wayland-dlopen" = [ "wayland-backend/dlopen" ];
          "wayland-protocols" = [ "dep:wayland-protocols" ];
          "wayland-protocols-plasma" = [ "dep:wayland-protocols-plasma" ];
          "x11" = [ "x11-dl" "bytemuck" "percent-encoding" "xkbcommon-dl/x11" "x11rb" ];
          "x11-dl" = [ "dep:x11-dl" ];
          "x11rb" = [ "dep:x11rb" ];
        };
        resolvedDefaultFeatures = [ "ahash" "bytemuck" "memmap2" "percent-encoding" "rwh_05" "sctk" "wayland" "wayland-backend" "wayland-client" "wayland-protocols" "wayland-protocols-plasma" "x11" "x11-dl" "x11rb" ];
      };
      "winnow" = rec {
        crateName = "winnow";
        version = "0.5.34";
        edition = "2021";
        sha256 = "05lwgfbd2i3016hh4yff7m9qy4mf75x7ki4wsv5xq65kb6v4gkxp";
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "debug" = [ "dep:anstream" "dep:anstyle" "dep:is-terminal" "dep:terminal_size" ];
          "default" = [ "std" ];
          "simd" = [ "dep:memchr" ];
          "std" = [ "alloc" "memchr?/std" ];
          "unstable-doc" = [ "alloc" "std" "simd" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "x11-dl" = rec {
        crateName = "x11-dl";
        version = "2.21.0";
        edition = "2021";
        sha256 = "0vsiq62xpcfm0kn9zjw5c9iycvccxl22jya8wnk18lyxzqj5jwrq";
        authors = [
          "daggerbot <daggerbot@gmail.com>"
          "Erle Pereira <erle@erlepereira.com>"
          "AltF02 <contact@altf2.dev>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
        ];
        buildDependencies = [
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];

      };
      "x11rb 0.12.0" = rec {
        crateName = "x11rb";
        version = "0.12.0";
        edition = "2021";
        sha256 = "02h492k920mb1733cdmly138zfiwkspil6ssqcvi7inyshk1nr5i";
        authors = [
          "Uli Schlachter <psychon@znc.in>"
          "Eduardo Sánchez Muñoz <eduardosm-dev@e64.io>"
          "notgull <jtnunley01@gmail.com>"
        ];
        dependencies = [
          {
            name = "gethostname";
            packageId = "gethostname 0.3.0";
          }
          {
            name = "nix";
            packageId = "nix 0.26.4";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
            features = [ "socket" "uio" "poll" ];
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "winsock2" ];
          }
          {
            name = "winapi-wsapoll";
            packageId = "winapi-wsapoll";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "x11rb-protocol";
            packageId = "x11rb-protocol 0.12.0";
          }
        ];
        features = {
          "all-extensions" = [ "x11rb-protocol/all-extensions" "composite" "damage" "dbe" "dpms" "dri2" "dri3" "glx" "present" "randr" "record" "render" "res" "screensaver" "shape" "shm" "sync" "xevie" "xf86dri" "xf86vidmode" "xfixes" "xinerama" "xinput" "xkb" "xprint" "xselinux" "xtest" "xv" "xvmc" ];
          "allow-unsafe-code" = [ "libc" "as-raw-xcb-connection" ];
          "as-raw-xcb-connection" = [ "dep:as-raw-xcb-connection" ];
          "composite" = [ "x11rb-protocol/composite" "xfixes" ];
          "cursor" = [ "render" "resource_manager" ];
          "damage" = [ "x11rb-protocol/damage" "xfixes" ];
          "dbe" = [ "x11rb-protocol/dbe" ];
          "dl-libxcb" = [ "allow-unsafe-code" "libloading" "once_cell" ];
          "dpms" = [ "x11rb-protocol/dpms" ];
          "dri2" = [ "x11rb-protocol/dri2" ];
          "dri3" = [ "x11rb-protocol/dri3" ];
          "glx" = [ "x11rb-protocol/glx" ];
          "libc" = [ "dep:libc" ];
          "libloading" = [ "dep:libloading" ];
          "once_cell" = [ "dep:once_cell" ];
          "present" = [ "x11rb-protocol/present" "randr" "xfixes" "sync" ];
          "randr" = [ "x11rb-protocol/randr" "render" ];
          "record" = [ "x11rb-protocol/record" ];
          "render" = [ "x11rb-protocol/render" ];
          "res" = [ "x11rb-protocol/res" ];
          "resource_manager" = [ "x11rb-protocol/resource_manager" ];
          "screensaver" = [ "x11rb-protocol/screensaver" ];
          "shape" = [ "x11rb-protocol/shape" ];
          "shm" = [ "x11rb-protocol/shm" ];
          "sync" = [ "x11rb-protocol/sync" ];
          "tracing" = [ "dep:tracing" ];
          "xevie" = [ "x11rb-protocol/xevie" ];
          "xf86dri" = [ "x11rb-protocol/xf86dri" ];
          "xf86vidmode" = [ "x11rb-protocol/xf86vidmode" ];
          "xfixes" = [ "x11rb-protocol/xfixes" "render" "shape" ];
          "xinerama" = [ "x11rb-protocol/xinerama" ];
          "xinput" = [ "x11rb-protocol/xinput" "xfixes" ];
          "xkb" = [ "x11rb-protocol/xkb" ];
          "xprint" = [ "x11rb-protocol/xprint" ];
          "xselinux" = [ "x11rb-protocol/xselinux" ];
          "xtest" = [ "x11rb-protocol/xtest" ];
          "xv" = [ "x11rb-protocol/xv" "shm" ];
          "xvmc" = [ "x11rb-protocol/xvmc" "xv" ];
        };
      };
      "x11rb 0.13.0" = rec {
        crateName = "x11rb";
        version = "0.13.0";
        edition = "2021";
        sha256 = "06lzpmb67sfw37m0i9zz786hx6fklmykd9j3689blk3yijnmxwpq";
        authors = [
          "Uli Schlachter <psychon@znc.in>"
          "Eduardo Sánchez Muñoz <eduardosm-dev@e64.io>"
          "notgull <jtnunley01@gmail.com>"
        ];
        dependencies = [
          {
            name = "as-raw-xcb-connection";
            packageId = "as-raw-xcb-connection";
            optional = true;
          }
          {
            name = "gethostname";
            packageId = "gethostname 0.4.3";
            target = { target, features }: (!(target."unix" or false));
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
          }
          {
            name = "libloading";
            packageId = "libloading";
            optional = true;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
          }
          {
            name = "rustix";
            packageId = "rustix";
            usesDefaultFeatures = false;
            features = [ "std" "event" "fs" "net" "system" ];
          }
          {
            name = "x11rb-protocol";
            packageId = "x11rb-protocol 0.13.0";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        devDependencies = [
          {
            name = "gethostname";
            packageId = "gethostname 0.4.3";
          }
        ];
        features = {
          "all-extensions" = [ "x11rb-protocol/all-extensions" "composite" "damage" "dbe" "dpms" "dri2" "dri3" "glx" "present" "randr" "record" "render" "res" "screensaver" "shape" "shm" "sync" "xevie" "xf86dri" "xf86vidmode" "xfixes" "xinerama" "xinput" "xkb" "xprint" "xselinux" "xtest" "xv" "xvmc" ];
          "allow-unsafe-code" = [ "libc" "as-raw-xcb-connection" ];
          "as-raw-xcb-connection" = [ "dep:as-raw-xcb-connection" ];
          "composite" = [ "x11rb-protocol/composite" "xfixes" ];
          "cursor" = [ "render" "resource_manager" ];
          "damage" = [ "x11rb-protocol/damage" "xfixes" ];
          "dbe" = [ "x11rb-protocol/dbe" ];
          "dl-libxcb" = [ "allow-unsafe-code" "libloading" "once_cell" ];
          "dpms" = [ "x11rb-protocol/dpms" ];
          "dri2" = [ "x11rb-protocol/dri2" ];
          "dri3" = [ "x11rb-protocol/dri3" ];
          "extra-traits" = [ "x11rb-protocol/extra-traits" ];
          "glx" = [ "x11rb-protocol/glx" ];
          "libc" = [ "dep:libc" ];
          "libloading" = [ "dep:libloading" ];
          "once_cell" = [ "dep:once_cell" ];
          "present" = [ "x11rb-protocol/present" "randr" "xfixes" "sync" ];
          "randr" = [ "x11rb-protocol/randr" "render" ];
          "record" = [ "x11rb-protocol/record" ];
          "render" = [ "x11rb-protocol/render" ];
          "request-parsing" = [ "x11rb-protocol/request-parsing" ];
          "res" = [ "x11rb-protocol/res" ];
          "resource_manager" = [ "x11rb-protocol/resource_manager" ];
          "screensaver" = [ "x11rb-protocol/screensaver" ];
          "shape" = [ "x11rb-protocol/shape" ];
          "shm" = [ "x11rb-protocol/shm" ];
          "sync" = [ "x11rb-protocol/sync" ];
          "tracing" = [ "dep:tracing" ];
          "xevie" = [ "x11rb-protocol/xevie" ];
          "xf86dri" = [ "x11rb-protocol/xf86dri" ];
          "xf86vidmode" = [ "x11rb-protocol/xf86vidmode" ];
          "xfixes" = [ "x11rb-protocol/xfixes" "render" "shape" ];
          "xinerama" = [ "x11rb-protocol/xinerama" ];
          "xinput" = [ "x11rb-protocol/xinput" "xfixes" ];
          "xkb" = [ "x11rb-protocol/xkb" ];
          "xprint" = [ "x11rb-protocol/xprint" ];
          "xselinux" = [ "x11rb-protocol/xselinux" ];
          "xtest" = [ "x11rb-protocol/xtest" ];
          "xv" = [ "x11rb-protocol/xv" "shm" ];
          "xvmc" = [ "x11rb-protocol/xvmc" "xv" ];
        };
        resolvedDefaultFeatures = [ "allow-unsafe-code" "as-raw-xcb-connection" "dl-libxcb" "libc" "libloading" "once_cell" "randr" "render" "resource_manager" "shape" "xfixes" "xinput" "xkb" ];
      };
      "x11rb-protocol 0.12.0" = rec {
        crateName = "x11rb-protocol";
        version = "0.12.0";
        edition = "2021";
        sha256 = "1g24qdvq0mbyl2npz7zqy5v6hpdxq2qakkpnp3x02rzvl3ww7ml2";
        authors = [
          "Uli Schlachter <psychon@znc.in>"
          "Eduardo Sánchez Muñoz <eduardosm-dev@e64.io>"
          "notgull <jtnunley01@gmail.com>"
        ];
        dependencies = [
          {
            name = "nix";
            packageId = "nix 0.26.4";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
            features = [ "fs" ];
          }
        ];
        features = {
          "all-extensions" = [ "composite" "damage" "dbe" "dpms" "dri2" "dri3" "glx" "present" "randr" "record" "render" "res" "screensaver" "shape" "shm" "sync" "xevie" "xf86dri" "xf86vidmode" "xfixes" "xinerama" "xinput" "xkb" "xprint" "xselinux" "xtest" "xv" "xvmc" ];
          "composite" = [ "xfixes" ];
          "damage" = [ "xfixes" ];
          "default" = [ "std" ];
          "nix" = [ "dep:nix" ];
          "present" = [ "randr" "xfixes" "sync" ];
          "randr" = [ "render" ];
          "resource_manager" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "nix" ];
          "xfixes" = [ "render" "shape" ];
          "xinput" = [ "xfixes" ];
          "xv" = [ "shm" ];
          "xvmc" = [ "xv" ];
        };
        resolvedDefaultFeatures = [ "default" "nix" "std" ];
      };
      "x11rb-protocol 0.13.0" = rec {
        crateName = "x11rb-protocol";
        version = "0.13.0";
        edition = "2021";
        sha256 = "0d3cc2dr5fcx8asgrm31d7lrxpnbqi6kl5v3r71gx7xxp3272gp6";
        authors = [
          "Uli Schlachter <psychon@znc.in>"
          "Eduardo Sánchez Muñoz <eduardosm-dev@e64.io>"
          "notgull <jtnunley01@gmail.com>"
        ];
        features = {
          "all-extensions" = [ "composite" "damage" "dbe" "dpms" "dri2" "dri3" "glx" "present" "randr" "record" "render" "res" "screensaver" "shape" "shm" "sync" "xevie" "xf86dri" "xf86vidmode" "xfixes" "xinerama" "xinput" "xkb" "xprint" "xselinux" "xtest" "xv" "xvmc" ];
          "composite" = [ "xfixes" ];
          "damage" = [ "xfixes" ];
          "default" = [ "std" ];
          "present" = [ "randr" "xfixes" "sync" ];
          "randr" = [ "render" ];
          "resource_manager" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "xfixes" = [ "render" "shape" ];
          "xinput" = [ "xfixes" ];
          "xv" = [ "shm" ];
          "xvmc" = [ "xv" ];
        };
        resolvedDefaultFeatures = [ "randr" "render" "resource_manager" "shape" "std" "xfixes" "xinput" "xkb" ];
      };
      "xcursor" = rec {
        crateName = "xcursor";
        version = "0.3.5";
        edition = "2018";
        sha256 = "0499ff2gy9hfb9dvndn5zyc7gzz9lhc5fly3s3yfsiak99xws33a";
        authors = [
          "Samuele Esposito"
        ];

      };
      "xkbcommon-dl" = rec {
        crateName = "xkbcommon-dl";
        version = "0.4.1";
        edition = "2021";
        sha256 = "16c6kmgqbffdsnw5w9q97p55d824ss3fqzif2lrh33648j2nc939";
        authors = [
          "Francesca Frangipane <francesca@comfysoft.net>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.4.1";
          }
          {
            name = "dlib";
            packageId = "dlib";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "xkeysym";
            packageId = "xkeysym";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "x11" ];
      };
      "xkeysym" = rec {
        crateName = "xkeysym";
        version = "0.2.0";
        edition = "2018";
        sha256 = "0886dn1rlkiazcp5n6ayqfg0ibpiny62dlbiyr9v4l32nxl8wjh5";
        authors = [
          "John Nunley <jtnunley01@gmail.com>"
        ];
        features = {
          "bytemuck" = [ "dep:bytemuck" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "xml-rs" = rec {
        crateName = "xml-rs";
        version = "0.8.19";
        edition = "2021";
        crateBin = [];
        sha256 = "0nnpvk3fv32hgh7vs9gbg2swmzxx5yz73f4b7rak7q39q2x9rjqg";
        libName = "xml";
        authors = [
          "Vladimir Matveev <vmatveev@citrine.cc>"
        ];

      };
      "zerocopy" = rec {
        crateName = "zerocopy";
        version = "0.7.32";
        edition = "2018";
        sha256 = "1ghnfxw69kx5d1aqfd5fsfrra9dgpz17yqx84nd4ryjk3sbd7m3l";
        authors = [
          "Joshua Liebow-Feeser <joshlf@google.com>"
        ];
        dependencies = [
          {
            name = "zerocopy-derive";
            packageId = "zerocopy-derive";
            optional = true;
          }
          {
            name = "zerocopy-derive";
            packageId = "zerocopy-derive";
            target = { target, features }: false;
          }
        ];
        devDependencies = [
          {
            name = "zerocopy-derive";
            packageId = "zerocopy-derive";
          }
        ];
        features = {
          "__internal_use_only_features_that_work_on_stable" = [ "alloc" "derive" "simd" ];
          "byteorder" = [ "dep:byteorder" ];
          "default" = [ "byteorder" ];
          "derive" = [ "zerocopy-derive" ];
          "simd-nightly" = [ "simd" ];
          "zerocopy-derive" = [ "dep:zerocopy-derive" ];
        };
        resolvedDefaultFeatures = [ "simd" ];
      };
      "zerocopy-derive" = rec {
        crateName = "zerocopy-derive";
        version = "0.7.32";
        edition = "2018";
        sha256 = "19nj11md42aijyqnfx8pa647fjzhz537xyc624rajwwfrn6b3qcw";
        procMacro = true;
        authors = [
          "Joshua Liebow-Feeser <joshlf@google.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
        ];

      };
    };

    #
# crate2nix/default.nix (excerpt start)
#

  /* Target (platform) data for conditional dependencies.
    This corresponds roughly to what buildRustCrate is setting.
  */
  makeDefaultTarget = platform: {
    unix = platform.isUnix;
    windows = platform.isWindows;
    fuchsia = true;
    test = false;

    /* We are choosing an arbitrary rust version to grab `lib` from,
      which is unfortunate, but `lib` has been version-agnostic the
      whole time so this is good enough for now.
    */
    os = pkgs.rust.lib.toTargetOs platform;
    arch = pkgs.rust.lib.toTargetArch platform;
    family = pkgs.rust.lib.toTargetFamily platform;
    vendor = pkgs.rust.lib.toTargetVendor platform;
    env = "gnu";
    endian =
      if platform.parsed.cpu.significantByte.name == "littleEndian"
      then "little" else "big";
    pointer_width = toString platform.parsed.cpu.bits;
    debug_assertions = false;
  };

  /* Filters common temp files and build files. */
  # TODO(pkolloch): Substitute with gitignore filter
  sourceFilter = name: type:
    let
      baseName = builtins.baseNameOf (builtins.toString name);
    in
      ! (
        # Filter out git
        baseName == ".gitignore"
        || (type == "directory" && baseName == ".git")

        # Filter out build results
        || (
          type == "directory" && (
            baseName == "target"
            || baseName == "_site"
            || baseName == ".sass-cache"
            || baseName == ".jekyll-metadata"
            || baseName == "build-artifacts"
          )
        )

        # Filter out nix-build result symlinks
        || (
          type == "symlink" && lib.hasPrefix "result" baseName
        )

        # Filter out IDE config
        || (
          type == "directory" && (
            baseName == ".idea" || baseName == ".vscode"
          )
        ) || lib.hasSuffix ".iml" baseName

        # Filter out nix build files
        || baseName == "Cargo.nix"

        # Filter out editor backup / swap files.
        || lib.hasSuffix "~" baseName
        || builtins.match "^\\.sw[a-z]$$" baseName != null
        || builtins.match "^\\..*\\.sw[a-z]$$" baseName != null
        || lib.hasSuffix ".tmp" baseName
        || lib.hasSuffix ".bak" baseName
        || baseName == "tests.nix"
      );

  /* Returns a crate which depends on successful test execution
    of crate given as the second argument.

    testCrateFlags: list of flags to pass to the test exectuable
    testInputs: list of packages that should be available during test execution
  */
  crateWithTest = { crate, testCrate, testCrateFlags, testInputs, testPreRun, testPostRun }:
    assert builtins.typeOf testCrateFlags == "list";
    assert builtins.typeOf testInputs == "list";
    assert builtins.typeOf testPreRun == "string";
    assert builtins.typeOf testPostRun == "string";
    let
      # override the `crate` so that it will build and execute tests instead of
      # building the actual lib and bin targets We just have to pass `--test`
      # to rustc and it will do the right thing.  We execute the tests and copy
      # their log and the test executables to $out for later inspection.
      test =
        let
          drv = testCrate.override
            (
              _: {
                buildTests = true;
              }
            );
          # If the user hasn't set any pre/post commands, we don't want to
          # insert empty lines. This means that any existing users of crate2nix
          # don't get a spurious rebuild unless they set these explicitly.
          testCommand = pkgs.lib.concatStringsSep "\n"
            (pkgs.lib.filter (s: s != "") [
              testPreRun
              "$f $testCrateFlags 2>&1 | tee -a $out"
              testPostRun
            ]);
        in
        pkgs.runCommand "run-tests-${testCrate.name}"
          {
            inherit testCrateFlags;
            buildInputs = testInputs;
          } ''
          set -e

          export RUST_BACKTRACE=1

          # recreate a file hierarchy as when running tests with cargo

          # the source for test data
          ${pkgs.buildPackages.xorg.lndir}/bin/lndir ${crate.src}

          # build outputs
          testRoot=target/debug
          mkdir -p $testRoot

          # executables of the crate
          # we copy to prevent std::env::current_exe() to resolve to a store location
          for i in ${crate}/bin/*; do
            cp "$i" "$testRoot"
          done
          chmod +w -R .

          # test harness executables are suffixed with a hash, like cargo does
          # this allows to prevent name collision with the main
          # executables of the crate
          hash=$(basename $out)
          for file in ${drv}/tests/*; do
            f=$testRoot/$(basename $file)-$hash
            cp $file $f
            ${testCommand}
          done
        '';
    in
    pkgs.runCommand "${crate.name}-linked"
      {
        inherit (crate) outputs crateName;
        passthru = (crate.passthru or { }) // {
          inherit test;
        };
      }
      (lib.optionalString (stdenv.buildPlatform.canExecute stdenv.hostPlatform) ''
        echo tested by ${test}
      '' + ''
        ${lib.concatMapStringsSep "\n" (output: "ln -s ${crate.${output}} ${"$"}${output}") crate.outputs}
      '');

  /* A restricted overridable version of builtRustCratesWithFeatures. */
  buildRustCrateWithFeatures =
    { packageId
    , features ? rootFeatures
    , crateOverrides ? defaultCrateOverrides
    , buildRustCrateForPkgsFunc ? null
    , runTests ? false
    , testCrateFlags ? [ ]
    , testInputs ? [ ]
      # Any command to run immediatelly before a test is executed.
    , testPreRun ? ""
      # Any command run immediatelly after a test is executed.
    , testPostRun ? ""
    }:
    lib.makeOverridable
      (
        { features
        , crateOverrides
        , runTests
        , testCrateFlags
        , testInputs
        , testPreRun
        , testPostRun
        }:
        let
          buildRustCrateForPkgsFuncOverriden =
            if buildRustCrateForPkgsFunc != null
            then buildRustCrateForPkgsFunc
            else
              (
                if crateOverrides == pkgs.defaultCrateOverrides
                then buildRustCrateForPkgs
                else
                  pkgs: (buildRustCrateForPkgs pkgs).override {
                    defaultCrateOverrides = crateOverrides;
                  }
              );
          builtRustCrates = builtRustCratesWithFeatures {
            inherit packageId features;
            buildRustCrateForPkgsFunc = buildRustCrateForPkgsFuncOverriden;
            runTests = false;
          };
          builtTestRustCrates = builtRustCratesWithFeatures {
            inherit packageId features;
            buildRustCrateForPkgsFunc = buildRustCrateForPkgsFuncOverriden;
            runTests = true;
          };
          drv = builtRustCrates.crates.${packageId};
          testDrv = builtTestRustCrates.crates.${packageId};
          derivation =
            if runTests then
              crateWithTest
                {
                  crate = drv;
                  testCrate = testDrv;
                  inherit testCrateFlags testInputs testPreRun testPostRun;
                }
            else drv;
        in
        derivation
      )
      { inherit features crateOverrides runTests testCrateFlags testInputs testPreRun testPostRun; };

  /* Returns an attr set with packageId mapped to the result of buildRustCrateForPkgsFunc
    for the corresponding crate.
  */
  builtRustCratesWithFeatures =
    { packageId
    , features
    , crateConfigs ? crates
    , buildRustCrateForPkgsFunc
    , runTests
    , makeTarget ? makeDefaultTarget
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isList features);
      assert (builtins.isAttrs (makeTarget stdenv.hostPlatform));
      assert (builtins.isBool runTests);
      let
        rootPackageId = packageId;
        mergedFeatures = mergePackageFeatures
          (
            args // {
              inherit rootPackageId;
              target = makeTarget stdenv.hostPlatform // { test = runTests; };
            }
          );
        # Memoize built packages so that reappearing packages are only built once.
        builtByPackageIdByPkgs = mkBuiltByPackageIdByPkgs pkgs;
        mkBuiltByPackageIdByPkgs = pkgs:
          let
            self = {
              crates = lib.mapAttrs (packageId: value: buildByPackageIdForPkgsImpl self pkgs packageId) crateConfigs;
              target = makeTarget pkgs.stdenv.hostPlatform;
              build = mkBuiltByPackageIdByPkgs pkgs.buildPackages;
            };
          in
          self;
        buildByPackageIdForPkgsImpl = self: pkgs: packageId:
          let
            features = mergedFeatures."${packageId}" or [ ];
            crateConfig' = crateConfigs."${packageId}";
            crateConfig =
              builtins.removeAttrs crateConfig' [ "resolvedDefaultFeatures" "devDependencies" ];
            devDependencies =
              lib.optionals
                (runTests && packageId == rootPackageId)
                (crateConfig'.devDependencies or [ ]);
            dependencies =
              dependencyDerivations {
                inherit features;
                inherit (self) target;
                buildByPackageId = depPackageId:
                  # proc_macro crates must be compiled for the build architecture
                  if crateConfigs.${depPackageId}.procMacro or false
                  then self.build.crates.${depPackageId}
                  else self.crates.${depPackageId};
                dependencies =
                  (crateConfig.dependencies or [ ])
                  ++ devDependencies;
              };
            buildDependencies =
              dependencyDerivations {
                inherit features;
                inherit (self.build) target;
                buildByPackageId = depPackageId:
                  self.build.crates.${depPackageId};
                dependencies = crateConfig.buildDependencies or [ ];
              };
            dependenciesWithRenames =
              let
                buildDeps = filterEnabledDependencies {
                  inherit features;
                  inherit (self) target;
                  dependencies = crateConfig.dependencies or [ ] ++ devDependencies;
                };
                hostDeps = filterEnabledDependencies {
                  inherit features;
                  inherit (self.build) target;
                  dependencies = crateConfig.buildDependencies or [ ];
                };
              in
              lib.filter (d: d ? "rename") (hostDeps ++ buildDeps);
            # Crate renames have the form:
            #
            # {
            #    crate_name = [
            #       { version = "1.2.3"; rename = "crate_name01"; }
            #    ];
            #    # ...
            # }
            crateRenames =
              let
                grouped =
                  lib.groupBy
                    (dependency: dependency.name)
                    dependenciesWithRenames;
                versionAndRename = dep:
                  let
                    package = crateConfigs."${dep.packageId}";
                  in
                  { inherit (dep) rename; inherit (package) version; };
              in
              lib.mapAttrs (name: builtins.map versionAndRename) grouped;
          in
          buildRustCrateForPkgsFunc pkgs
            (
              crateConfig // {
                # https://github.com/NixOS/nixpkgs/issues/218712
                dontStrip = stdenv.hostPlatform.isDarwin;
                src = crateConfig.src or (
                  pkgs.fetchurl rec {
                    name = "${crateConfig.crateName}-${crateConfig.version}.tar.gz";
                    # https://www.pietroalbini.org/blog/downloading-crates-io/
                    # Not rate-limited, CDN URL.
                    url = "https://static.crates.io/crates/${crateConfig.crateName}/${crateConfig.crateName}-${crateConfig.version}.crate";
                    sha256 =
                      assert (lib.assertMsg (crateConfig ? sha256) "Missing sha256 for ${name}");
                      crateConfig.sha256;
                  }
                );
                extraRustcOpts = lib.lists.optional (targetFeatures != [ ]) "-C target-feature=${lib.concatMapStringsSep "," (x: "+${x}") targetFeatures}";
                inherit features dependencies buildDependencies crateRenames release;
              }
            );
      in
      builtByPackageIdByPkgs;

  /* Returns the actual derivations for the given dependencies. */
  dependencyDerivations =
    { buildByPackageId
    , features
    , dependencies
    , target
    }:
      assert (builtins.isList features);
      assert (builtins.isList dependencies);
      assert (builtins.isAttrs target);
      let
        enabledDependencies = filterEnabledDependencies {
          inherit dependencies features target;
        };
        depDerivation = dependency: buildByPackageId dependency.packageId;
      in
      map depDerivation enabledDependencies;

  /* Returns a sanitized version of val with all values substituted that cannot
    be serialized as JSON.
  */
  sanitizeForJson = val:
    if builtins.isAttrs val
    then lib.mapAttrs (n: sanitizeForJson) val
    else if builtins.isList val
    then builtins.map sanitizeForJson val
    else if builtins.isFunction val
    then "function"
    else val;

  /* Returns various tools to debug a crate. */
  debugCrate = { packageId, target ? makeDefaultTarget stdenv.hostPlatform }:
    assert (builtins.isString packageId);
    let
      debug = rec {
        # The built tree as passed to buildRustCrate.
        buildTree = buildRustCrateWithFeatures {
          buildRustCrateForPkgsFunc = _: lib.id;
          inherit packageId;
        };
        sanitizedBuildTree = sanitizeForJson buildTree;
        dependencyTree = sanitizeForJson
          (
            buildRustCrateWithFeatures {
              buildRustCrateForPkgsFunc = _: crate: {
                "01_crateName" = crate.crateName or false;
                "02_features" = crate.features or [ ];
                "03_dependencies" = crate.dependencies or [ ];
              };
              inherit packageId;
            }
          );
        mergedPackageFeatures = mergePackageFeatures {
          features = rootFeatures;
          inherit packageId target;
        };
        diffedDefaultPackageFeatures = diffDefaultPackageFeatures {
          inherit packageId target;
        };
      };
    in
    { internal = debug; };

  /* Returns differences between cargo default features and crate2nix default
    features.

    This is useful for verifying the feature resolution in crate2nix.
  */
  diffDefaultPackageFeatures =
    { crateConfigs ? crates
    , packageId
    , target
    }:
      assert (builtins.isAttrs crateConfigs);
      let
        prefixValues = prefix: lib.mapAttrs (n: v: { "${prefix}" = v; });
        mergedFeatures =
          prefixValues
            "crate2nix"
            (mergePackageFeatures { inherit crateConfigs packageId target; features = [ "default" ]; });
        configs = prefixValues "cargo" crateConfigs;
        combined = lib.foldAttrs (a: b: a // b) { } [ mergedFeatures configs ];
        onlyInCargo =
          builtins.attrNames
            (lib.filterAttrs (n: v: !(v ? "crate2nix") && (v ? "cargo")) combined);
        onlyInCrate2Nix =
          builtins.attrNames
            (lib.filterAttrs (n: v: (v ? "crate2nix") && !(v ? "cargo")) combined);
        differentFeatures = lib.filterAttrs
          (
            n: v:
              (v ? "crate2nix")
              && (v ? "cargo")
              && (v.crate2nix.features or [ ]) != (v."cargo".resolved_default_features or [ ])
          )
          combined;
      in
      builtins.toJSON {
        inherit onlyInCargo onlyInCrate2Nix differentFeatures;
      };

  /* Returns an attrset mapping packageId to the list of enabled features.

    If multiple paths to a dependency enable different features, the
    corresponding feature sets are merged. Features in rust are additive.
  */
  mergePackageFeatures =
    { crateConfigs ? crates
    , packageId
    , rootPackageId ? packageId
    , features ? rootFeatures
    , dependencyPath ? [ crates.${packageId}.crateName ]
    , featuresByPackageId ? { }
    , target
      # Adds devDependencies to the crate with rootPackageId.
    , runTests ? false
    , ...
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isString rootPackageId);
      assert (builtins.isList features);
      assert (builtins.isList dependencyPath);
      assert (builtins.isAttrs featuresByPackageId);
      assert (builtins.isAttrs target);
      assert (builtins.isBool runTests);
      let
        crateConfig = crateConfigs."${packageId}" or (builtins.throw "Package not found: ${packageId}");
        expandedFeatures = expandFeatures (crateConfig.features or { }) features;
        enabledFeatures = enableFeatures (crateConfig.dependencies or [ ]) expandedFeatures;
        depWithResolvedFeatures = dependency:
          let
            inherit (dependency) packageId;
            features = dependencyFeatures enabledFeatures dependency;
          in
          { inherit packageId features; };
        resolveDependencies = cache: path: dependencies:
          assert (builtins.isAttrs cache);
          assert (builtins.isList dependencies);
          let
            enabledDependencies = filterEnabledDependencies {
              inherit dependencies target;
              features = enabledFeatures;
            };
            directDependencies = map depWithResolvedFeatures enabledDependencies;
            foldOverCache = op: lib.foldl op cache directDependencies;
          in
          foldOverCache
            (
              cache: { packageId, features }:
                let
                  cacheFeatures = cache.${packageId} or [ ];
                  combinedFeatures = sortedUnique (cacheFeatures ++ features);
                in
                if cache ? ${packageId} && cache.${packageId} == combinedFeatures
                then cache
                else
                  mergePackageFeatures {
                    features = combinedFeatures;
                    featuresByPackageId = cache;
                    inherit crateConfigs packageId target runTests rootPackageId;
                  }
            );
        cacheWithSelf =
          let
            cacheFeatures = featuresByPackageId.${packageId} or [ ];
            combinedFeatures = sortedUnique (cacheFeatures ++ enabledFeatures);
          in
          featuresByPackageId // {
            "${packageId}" = combinedFeatures;
          };
        cacheWithDependencies =
          resolveDependencies cacheWithSelf "dep"
            (
              crateConfig.dependencies or [ ]
              ++ lib.optionals
                (runTests && packageId == rootPackageId)
                (crateConfig.devDependencies or [ ])
            );
        cacheWithAll =
          resolveDependencies
            cacheWithDependencies "build"
            (crateConfig.buildDependencies or [ ]);
      in
      cacheWithAll;

  /* Returns the enabled dependencies given the enabled features. */
  filterEnabledDependencies = { dependencies, features, target }:
    assert (builtins.isList dependencies);
    assert (builtins.isList features);
    assert (builtins.isAttrs target);

    lib.filter
      (
        dep:
        let
          targetFunc = dep.target or (features: true);
        in
        targetFunc { inherit features target; }
        && (
          !(dep.optional or false)
          || builtins.any (doesFeatureEnableDependency dep) features
        )
      )
      dependencies;

  /* Returns whether the given feature should enable the given dependency. */
  doesFeatureEnableDependency = dependency: feature:
    let
      name = dependency.rename or dependency.name;
      prefix = "${name}/";
      len = builtins.stringLength prefix;
      startsWithPrefix = builtins.substring 0 len feature == prefix;
    in
    feature == name || feature == "dep:" + name || startsWithPrefix;

  /* Returns the expanded features for the given inputFeatures by applying the
    rules in featureMap.

    featureMap is an attribute set which maps feature names to lists of further
    feature names to enable in case this feature is selected.
  */
  expandFeatures = featureMap: inputFeatures:
    assert (builtins.isAttrs featureMap);
    assert (builtins.isList inputFeatures);
    let
      expandFeaturesNoCycle = oldSeen: inputFeatures:
        if inputFeatures != [ ]
        then
          let
            # The feature we're currently expanding.
            feature = builtins.head inputFeatures;
            # All the features we've seen/expanded so far, including the one
            # we're currently processing.
            seen = oldSeen // { ${feature} = 1; };
            # Expand the feature but be careful to not re-introduce a feature
            # that we've already seen: this can easily cause a cycle, see issue
            # #209.
            enables = builtins.filter (f: !(seen ? "${f}")) (featureMap."${feature}" or [ ]);
          in
          [ feature ] ++ (expandFeaturesNoCycle seen (builtins.tail inputFeatures ++ enables))
        # No more features left, nothing to expand to.
        else [ ];
      outFeatures = expandFeaturesNoCycle { } inputFeatures;
    in
    sortedUnique outFeatures;

  /* This function adds optional dependencies as features if they are enabled
    indirectly by dependency features. This function mimics Cargo's behavior
    described in a note at:
    https://doc.rust-lang.org/nightly/cargo/reference/features.html#dependency-features
  */
  enableFeatures = dependencies: features:
    assert (builtins.isList features);
    assert (builtins.isList dependencies);
    let
      additionalFeatures = lib.concatMap
        (
          dependency:
            assert (builtins.isAttrs dependency);
            let
              enabled = builtins.any (doesFeatureEnableDependency dependency) features;
            in
            if (dependency.optional or false) && enabled
            then [ (dependency.rename or dependency.name) ]
            else [ ]
        )
        dependencies;
    in
    sortedUnique (features ++ additionalFeatures);

  /*
    Returns the actual features for the given dependency.

    features: The features of the crate that refers this dependency.
  */
  dependencyFeatures = features: dependency:
    assert (builtins.isList features);
    assert (builtins.isAttrs dependency);
    let
      defaultOrNil =
        if dependency.usesDefaultFeatures or true
        then [ "default" ]
        else [ ];
      explicitFeatures = dependency.features or [ ];
      additionalDependencyFeatures =
        let
          name = dependency.rename or dependency.name;
          stripPrefixMatch = prefix: s:
            if lib.hasPrefix prefix s
            then lib.removePrefix prefix s
            else null;
          extractFeature = feature: lib.findFirst
            (f: f != null)
            null
            (map (prefix: stripPrefixMatch prefix feature) [
              (name + "/")
              (name + "?/")
            ]);
          dependencyFeatures = lib.filter (f: f != null) (map extractFeature features);
        in
        dependencyFeatures;
    in
    defaultOrNil ++ explicitFeatures ++ additionalDependencyFeatures;

  /* Sorts and removes duplicates from a list of strings. */
  sortedUnique = features:
    assert (builtins.isList features);
    assert (builtins.all builtins.isString features);
    let
      outFeaturesSet = lib.foldl (set: feature: set // { "${feature}" = 1; }) { } features;
      outFeaturesUnique = builtins.attrNames outFeaturesSet;
    in
    builtins.sort (a: b: a < b) outFeaturesUnique;

  deprecationWarning = message: value:
    if strictDeprecation
    then builtins.throw "strictDeprecation enabled, aborting: ${message}"
    else builtins.trace message value;

  #
  # crate2nix/default.nix (excerpt end)
  #
  };
}

